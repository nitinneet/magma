// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: orc8r/protos/common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_orc8r_2fprotos_2fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_orc8r_2fprotos_2fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>   // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_orc8r_2fprotos_2fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_orc8r_2fprotos_2fcommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField
      entries[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField
      aux[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable
      schema[4] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata
      field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable
      serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_orc8r_2fprotos_2fcommon_2eproto;
namespace magma {
namespace orc8r {
class Bytes;
class BytesDefaultTypeInternal;
extern BytesDefaultTypeInternal _Bytes_default_instance_;
class IDList;
class IDListDefaultTypeInternal;
extern IDListDefaultTypeInternal _IDList_default_instance_;
class NetworkID;
class NetworkIDDefaultTypeInternal;
extern NetworkIDDefaultTypeInternal _NetworkID_default_instance_;
class Void;
class VoidDefaultTypeInternal;
extern VoidDefaultTypeInternal _Void_default_instance_;
}  // namespace orc8r
}  // namespace magma
PROTOBUF_NAMESPACE_OPEN
template<>
::magma::orc8r::Bytes* Arena::CreateMaybeMessage<::magma::orc8r::Bytes>(Arena*);
template<>
::magma::orc8r::IDList* Arena::CreateMaybeMessage<::magma::orc8r::IDList>(
    Arena*);
template<>
::magma::orc8r::NetworkID* Arena::CreateMaybeMessage<::magma::orc8r::NetworkID>(
    Arena*);
template<>
::magma::orc8r::Void* Arena::CreateMaybeMessage<::magma::orc8r::Void>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace magma {
namespace orc8r {

enum LogLevel : int {
  DEBUG   = 0,
  INFO    = 1,
  WARNING = 2,
  ERROR   = 3,
  FATAL   = 4,
  LogLevel_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LogLevel_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LogLevel_IsValid(int value);
constexpr LogLevel LogLevel_MIN  = DEBUG;
constexpr LogLevel LogLevel_MAX  = FATAL;
constexpr int LogLevel_ARRAYSIZE = LogLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogLevel_descriptor();
template<typename T>
inline const std::string& LogLevel_Name(T enum_t_value) {
  static_assert(
      ::std::is_same<T, LogLevel>::value || ::std::is_integral<T>::value,
      "Incorrect type passed to function LogLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
      LogLevel_descriptor(), enum_t_value);
}
inline bool LogLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LogLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LogLevel>(
      LogLevel_descriptor(), name, value);
}
// ===================================================================

class Void PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.orc8r.Void)
                   */
{
 public:
  inline Void() : Void(nullptr) {}
  virtual ~Void();

  Void(const Void& from);
  Void(Void&& from) noexcept : Void() { *this = ::std::move(from); }

  inline Void& operator=(const Void& from) {
    CopyFrom(from);
    return *this;
  }
  inline Void& operator=(Void&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Void& default_instance();

  static inline const Void* internal_default_instance() {
    return reinterpret_cast<const Void*>(&_Void_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;

  friend void swap(Void& a, Void& b) { a.Swap(&b); }
  inline void Swap(Void* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Void* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Void* New() const final { return CreateMaybeMessage<Void>(nullptr); }

  Void* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Void>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Void& from);
  void MergeFrom(const Void& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Void* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.orc8r.Void";
  }

 protected:
  explicit Void(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_orc8r_2fprotos_2fcommon_2eproto);
    return ::descriptor_table_orc8r_2fprotos_2fcommon_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:magma.orc8r.Void)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_orc8r_2fprotos_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Bytes PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.orc8r.Bytes)
                   */
{
 public:
  inline Bytes() : Bytes(nullptr) {}
  virtual ~Bytes();

  Bytes(const Bytes& from);
  Bytes(Bytes&& from) noexcept : Bytes() { *this = ::std::move(from); }

  inline Bytes& operator=(const Bytes& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bytes& operator=(Bytes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bytes& default_instance();

  static inline const Bytes* internal_default_instance() {
    return reinterpret_cast<const Bytes*>(&_Bytes_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;

  friend void swap(Bytes& a, Bytes& b) { a.Swap(&b); }
  inline void Swap(Bytes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bytes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bytes* New() const final { return CreateMaybeMessage<Bytes>(nullptr); }

  Bytes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bytes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bytes& from);
  void MergeFrom(const Bytes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bytes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.orc8r.Bytes";
  }

 protected:
  explicit Bytes(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_orc8r_2fprotos_2fcommon_2eproto);
    return ::descriptor_table_orc8r_2fprotos_2fcommon_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 1,
  };
  // bytes val = 1;
  void clear_val();
  const std::string& val() const;
  void set_val(const std::string& value);
  void set_val(std::string&& value);
  void set_val(const char* value);
  void set_val(const void* value, size_t size);
  std::string* mutable_val();
  std::string* release_val();
  void set_allocated_val(std::string* val);

 private:
  const std::string& _internal_val() const;
  void _internal_set_val(const std::string& value);
  std::string* _internal_mutable_val();

 public:
  // @@protoc_insertion_point(class_scope:magma.orc8r.Bytes)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_orc8r_2fprotos_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class NetworkID PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.orc8r.NetworkID)
                   */
{
 public:
  inline NetworkID() : NetworkID(nullptr) {}
  virtual ~NetworkID();

  NetworkID(const NetworkID& from);
  NetworkID(NetworkID&& from) noexcept : NetworkID() {
    *this = ::std::move(from);
  }

  inline NetworkID& operator=(const NetworkID& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkID& operator=(NetworkID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkID& default_instance();

  static inline const NetworkID* internal_default_instance() {
    return reinterpret_cast<const NetworkID*>(&_NetworkID_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;

  friend void swap(NetworkID& a, NetworkID& b) { a.Swap(&b); }
  inline void Swap(NetworkID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkID* New() const final {
    return CreateMaybeMessage<NetworkID>(nullptr);
  }

  NetworkID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkID& from);
  void MergeFrom(const NetworkID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.orc8r.NetworkID";
  }

 protected:
  explicit NetworkID(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_orc8r_2fprotos_2fcommon_2eproto);
    return ::descriptor_table_orc8r_2fprotos_2fcommon_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

 private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();

 public:
  // @@protoc_insertion_point(class_scope:magma.orc8r.NetworkID)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_orc8r_2fprotos_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class IDList PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.orc8r.IDList)
                   */
{
 public:
  inline IDList() : IDList(nullptr) {}
  virtual ~IDList();

  IDList(const IDList& from);
  IDList(IDList&& from) noexcept : IDList() { *this = ::std::move(from); }

  inline IDList& operator=(const IDList& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDList& operator=(IDList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDList& default_instance();

  static inline const IDList* internal_default_instance() {
    return reinterpret_cast<const IDList*>(&_IDList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;

  friend void swap(IDList& a, IDList& b) { a.Swap(&b); }
  inline void Swap(IDList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDList* New() const final {
    return CreateMaybeMessage<IDList>(nullptr);
  }

  IDList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDList& from);
  void MergeFrom(const IDList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.orc8r.IDList";
  }

 protected:
  explicit IDList(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_orc8r_2fprotos_2fcommon_2eproto);
    return ::descriptor_table_orc8r_2fprotos_2fcommon_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
  };
  // repeated string ids = 1;
  int ids_size() const;

 private:
  int _internal_ids_size() const;

 public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();

 private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();

 public:
  // @@protoc_insertion_point(class_scope:magma.orc8r.IDList)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_orc8r_2fprotos_2fcommon_2eproto;
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Void

// -------------------------------------------------------------------

// Bytes

// bytes val = 1;
inline void Bytes::clear_val() {
  val_.ClearToEmpty();
}
inline const std::string& Bytes::val() const {
  // @@protoc_insertion_point(field_get:magma.orc8r.Bytes.val)
  return _internal_val();
}
inline void Bytes::set_val(const std::string& value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:magma.orc8r.Bytes.val)
}
inline std::string* Bytes::mutable_val() {
  // @@protoc_insertion_point(field_mutable:magma.orc8r.Bytes.val)
  return _internal_mutable_val();
}
inline const std::string& Bytes::_internal_val() const {
  return val_.Get();
}
inline void Bytes::_internal_set_val(const std::string& value) {
  val_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void Bytes::set_val(std::string&& value) {
  val_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.orc8r.Bytes.val)
}
inline void Bytes::set_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  val_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.orc8r.Bytes.val)
}
inline void Bytes::set_val(const void* value, size_t size) {
  val_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.orc8r.Bytes.val)
}
inline std::string* Bytes::_internal_mutable_val() {
  return val_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* Bytes::release_val() {
  // @@protoc_insertion_point(field_release:magma.orc8r.Bytes.val)
  return val_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Bytes::set_allocated_val(std::string* val) {
  if (val != nullptr) {
  } else {
  }
  val_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), val,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.orc8r.Bytes.val)
}

// -------------------------------------------------------------------

// NetworkID

// string id = 1;
inline void NetworkID::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& NetworkID::id() const {
  // @@protoc_insertion_point(field_get:magma.orc8r.NetworkID.id)
  return _internal_id();
}
inline void NetworkID::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:magma.orc8r.NetworkID.id)
}
inline std::string* NetworkID::mutable_id() {
  // @@protoc_insertion_point(field_mutable:magma.orc8r.NetworkID.id)
  return _internal_mutable_id();
}
inline const std::string& NetworkID::_internal_id() const {
  return id_.Get();
}
inline void NetworkID::_internal_set_id(const std::string& value) {
  id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void NetworkID::set_id(std::string&& value) {
  id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.orc8r.NetworkID.id)
}
inline void NetworkID::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.orc8r.NetworkID.id)
}
inline void NetworkID::set_id(const char* value, size_t size) {
  id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.orc8r.NetworkID.id)
}
inline std::string* NetworkID::_internal_mutable_id() {
  return id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* NetworkID::release_id() {
  // @@protoc_insertion_point(field_release:magma.orc8r.NetworkID.id)
  return id_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NetworkID::set_allocated_id(std::string* id) {
  if (id != nullptr) {
  } else {
  }
  id_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.orc8r.NetworkID.id)
}

// -------------------------------------------------------------------

// IDList

// repeated string ids = 1;
inline int IDList::_internal_ids_size() const {
  return ids_.size();
}
inline int IDList::ids_size() const {
  return _internal_ids_size();
}
inline void IDList::clear_ids() {
  ids_.Clear();
}
inline std::string* IDList::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:magma.orc8r.IDList.ids)
  return _internal_add_ids();
}
inline const std::string& IDList::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& IDList::ids(int index) const {
  // @@protoc_insertion_point(field_get:magma.orc8r.IDList.ids)
  return _internal_ids(index);
}
inline std::string* IDList::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:magma.orc8r.IDList.ids)
  return ids_.Mutable(index);
}
inline void IDList::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:magma.orc8r.IDList.ids)
  ids_.Mutable(index)->assign(value);
}
inline void IDList::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:magma.orc8r.IDList.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void IDList::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:magma.orc8r.IDList.ids)
}
inline void IDList::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:magma.orc8r.IDList.ids)
}
inline std::string* IDList::_internal_add_ids() {
  return ids_.Add();
}
inline void IDList::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:magma.orc8r.IDList.ids)
}
inline void IDList::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:magma.orc8r.IDList.ids)
}
inline void IDList::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:magma.orc8r.IDList.ids)
}
inline void IDList::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:magma.orc8r.IDList.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IDList::ids() const {
  // @@protoc_insertion_point(field_list:magma.orc8r.IDList.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IDList::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:magma.orc8r.IDList.ids)
  return &ids_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

}  // namespace orc8r
}  // namespace magma

PROTOBUF_NAMESPACE_OPEN

template<>
struct is_proto_enum<::magma::orc8r::LogLevel> : ::std::true_type {};
template<>
inline const EnumDescriptor* GetEnumDescriptor<::magma::orc8r::LogLevel>() {
  return ::magma::orc8r::LogLevel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_orc8r_2fprotos_2fcommon_2eproto
