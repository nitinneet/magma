// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lte/protos/mconfig/mconfigs.proto

#include "lte/protos/mconfig/mconfigs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_lte_2fprotos_2fmconfig_2fmconfigs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnodebD_EnbConfigsBySerialEntry_DoNotUse_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lte_2fprotos_2fmconfig_2fmconfigs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnodebD_EnodebConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lte_2fprotos_2fmconfig_2fmconfigs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnodebD_FDDConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lte_2fprotos_2fmconfig_2fmconfigs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnodebD_TDDConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lte_2fprotos_2fmconfig_2fmconfigs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FederatedModeMap_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lte_2fprotos_2fmconfig_2fmconfigs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GatewayDNSConfigRecordsItems_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lte_2fprotos_2fmconfig_2fmconfigs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MME_ApnCorrectionMap_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lte_2fprotos_2fmconfig_2fmconfigs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MME_ImeiConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lte_2fprotos_2fmconfig_2fmconfigs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MME_PlmnConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lte_2fprotos_2fmconfig_2fmconfigs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MME_ServiceAreaMapsEntry_DoNotUse_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lte_2fprotos_2fmconfig_2fmconfigs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MME_TacList_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lte_2fprotos_2fmconfig_2fmconfigs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModeMapItem_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lte_2fprotos_2fmconfig_2fmconfigs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NProbeTask_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lte_2fprotos_2fmconfig_2fmconfigs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PipelineD_AllowedGrePeer_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lte_2fprotos_2fmconfig_2fmconfigs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PipelineD_HEConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lte_2fprotos_2fmconfig_2fmconfigs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PipelineD_IPDRExportDst_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lte_2fprotos_2fmconfig_2fmconfigs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PipelineD_LiUes_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lte_2fprotos_2fmconfig_2fmconfigs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SentryConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lte_2fprotos_2fmconfig_2fmconfigs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscriberDB_SubProfilesEntry_DoNotUse_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lte_2fprotos_2fmconfig_2fmconfigs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscriberDB_SubscriptionProfile_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lte_2fprotos_2fmconfig_2fmconfigs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WalletExhaustDetection_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
namespace magma {
namespace mconfig {
class SentryConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SentryConfig> _instance;
} _SentryConfig_default_instance_;
class EnodebD_FDDConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnodebD_FDDConfig> _instance;
} _EnodebD_FDDConfig_default_instance_;
class EnodebD_TDDConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnodebD_TDDConfig> _instance;
} _EnodebD_TDDConfig_default_instance_;
class EnodebD_EnodebConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnodebD_EnodebConfig> _instance;
} _EnodebD_EnodebConfig_default_instance_;
class EnodebD_EnbConfigsBySerialEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnodebD_EnbConfigsBySerialEntry_DoNotUse> _instance;
} _EnodebD_EnbConfigsBySerialEntry_DoNotUse_default_instance_;
class EnodebDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnodebD> _instance;
} _EnodebD_default_instance_;
class PipelineD_AllowedGrePeerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PipelineD_AllowedGrePeer> _instance;
} _PipelineD_AllowedGrePeer_default_instance_;
class PipelineD_IPDRExportDstDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PipelineD_IPDRExportDst> _instance;
} _PipelineD_IPDRExportDst_default_instance_;
class PipelineD_LiUesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PipelineD_LiUes> _instance;
} _PipelineD_LiUes_default_instance_;
class PipelineD_HEConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PipelineD_HEConfig> _instance;
} _PipelineD_HEConfig_default_instance_;
class PipelineDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PipelineD> _instance;
} _PipelineD_default_instance_;
class SessionDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionD> _instance;
} _SessionD_default_instance_;
class WalletExhaustDetectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WalletExhaustDetection> _instance;
} _WalletExhaustDetection_default_instance_;
class PolicyDBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PolicyDB> _instance;
} _PolicyDB_default_instance_;
class RedirectDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedirectD> _instance;
} _RedirectD_default_instance_;
class MobilityDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MobilityD> _instance;
} _MobilityD_default_instance_;
class MME_ApnCorrectionMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MME_ApnCorrectionMap> _instance;
} _MME_ApnCorrectionMap_default_instance_;
class MME_PlmnConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MME_PlmnConfig> _instance;
} _MME_PlmnConfig_default_instance_;
class MME_TacListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MME_TacList> _instance;
} _MME_TacList_default_instance_;
class MME_ServiceAreaMapsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MME_ServiceAreaMapsEntry_DoNotUse> _instance;
} _MME_ServiceAreaMapsEntry_DoNotUse_default_instance_;
class MME_ImeiConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MME_ImeiConfig> _instance;
} _MME_ImeiConfig_default_instance_;
class MMEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MME> _instance;
} _MME_default_instance_;
class FederatedModeMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FederatedModeMap> _instance;
} _FederatedModeMap_default_instance_;
class ModeMapItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModeMapItem> _instance;
} _ModeMapItem_default_instance_;
class SubscriberDB_SubscriptionProfileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscriberDB_SubscriptionProfile> _instance;
} _SubscriberDB_SubscriptionProfile_default_instance_;
class SubscriberDB_SubProfilesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscriberDB_SubProfilesEntry_DoNotUse> _instance;
} _SubscriberDB_SubProfilesEntry_DoNotUse_default_instance_;
class SubscriberDBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscriberDB> _instance;
} _SubscriberDB_default_instance_;
class LighttpDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LighttpD> _instance;
} _LighttpD_default_instance_;
class MonitorDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MonitorD> _instance;
} _MonitorD_default_instance_;
class DPIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DPID> _instance;
} _DPID_default_instance_;
class ConnectionDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectionD> _instance;
} _ConnectionD_default_instance_;
class LIAgentDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LIAgentD> _instance;
} _LIAgentD_default_instance_;
class NProbeTaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NProbeTask> _instance;
} _NProbeTask_default_instance_;
class DnsDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DnsD> _instance;
} _DnsD_default_instance_;
class GatewayDNSConfigRecordsItemsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GatewayDNSConfigRecordsItems> _instance;
} _GatewayDNSConfigRecordsItems_default_instance_;
}  // namespace mconfig
}  // namespace magma
static void InitDefaultsscc_info_ConnectionD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_ConnectionD_default_instance_;
    new (ptr) ::magma::mconfig::ConnectionD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnectionD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConnectionD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {}};

static void InitDefaultsscc_info_DPID_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_DPID_default_instance_;
    new (ptr) ::magma::mconfig::DPID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DPID_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DPID_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {}};

static void InitDefaultsscc_info_DnsD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_DnsD_default_instance_;
    new (ptr) ::magma::mconfig::DnsD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DnsD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DnsD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {
      &scc_info_GatewayDNSConfigRecordsItems_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,}};

static void InitDefaultsscc_info_EnodebD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_EnodebD_default_instance_;
    new (ptr) ::magma::mconfig::EnodebD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_EnodebD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_EnodebD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {
      &scc_info_EnodebD_TDDConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
      &scc_info_EnodebD_FDDConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
      &scc_info_EnodebD_EnbConfigsBySerialEntry_DoNotUse_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,}};

static void InitDefaultsscc_info_EnodebD_EnbConfigsBySerialEntry_DoNotUse_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_EnodebD_EnbConfigsBySerialEntry_DoNotUse_default_instance_;
    new (ptr) ::magma::mconfig::EnodebD_EnbConfigsBySerialEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnodebD_EnbConfigsBySerialEntry_DoNotUse_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EnodebD_EnbConfigsBySerialEntry_DoNotUse_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {
      &scc_info_EnodebD_EnodebConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,}};

static void InitDefaultsscc_info_EnodebD_EnodebConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_EnodebD_EnodebConfig_default_instance_;
    new (ptr) ::magma::mconfig::EnodebD_EnodebConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnodebD_EnodebConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnodebD_EnodebConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {}};

static void InitDefaultsscc_info_EnodebD_FDDConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_EnodebD_FDDConfig_default_instance_;
    new (ptr) ::magma::mconfig::EnodebD_FDDConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnodebD_FDDConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnodebD_FDDConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {}};

static void InitDefaultsscc_info_EnodebD_TDDConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_EnodebD_TDDConfig_default_instance_;
    new (ptr) ::magma::mconfig::EnodebD_TDDConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnodebD_TDDConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnodebD_TDDConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {}};

static void InitDefaultsscc_info_FederatedModeMap_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_FederatedModeMap_default_instance_;
    new (ptr) ::magma::mconfig::FederatedModeMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FederatedModeMap_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FederatedModeMap_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {
      &scc_info_ModeMapItem_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,}};

static void InitDefaultsscc_info_GatewayDNSConfigRecordsItems_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_GatewayDNSConfigRecordsItems_default_instance_;
    new (ptr) ::magma::mconfig::GatewayDNSConfigRecordsItems();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GatewayDNSConfigRecordsItems_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GatewayDNSConfigRecordsItems_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {}};

static void InitDefaultsscc_info_LIAgentD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_LIAgentD_default_instance_;
    new (ptr) ::magma::mconfig::LIAgentD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LIAgentD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LIAgentD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {
      &scc_info_NProbeTask_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,}};

static void InitDefaultsscc_info_LighttpD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_LighttpD_default_instance_;
    new (ptr) ::magma::mconfig::LighttpD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LighttpD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LighttpD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {}};

static void InitDefaultsscc_info_MME_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_MME_default_instance_;
    new (ptr) ::magma::mconfig::MME();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_MME_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_MME_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {
      &scc_info_MME_ApnCorrectionMap_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
      &scc_info_MME_PlmnConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
      &scc_info_MME_ServiceAreaMapsEntry_DoNotUse_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
      &scc_info_FederatedModeMap_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
      &scc_info_MME_ImeiConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
      &scc_info_SentryConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,}};

static void InitDefaultsscc_info_MME_ApnCorrectionMap_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_MME_ApnCorrectionMap_default_instance_;
    new (ptr) ::magma::mconfig::MME_ApnCorrectionMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MME_ApnCorrectionMap_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MME_ApnCorrectionMap_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {}};

static void InitDefaultsscc_info_MME_ImeiConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_MME_ImeiConfig_default_instance_;
    new (ptr) ::magma::mconfig::MME_ImeiConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MME_ImeiConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MME_ImeiConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {}};

static void InitDefaultsscc_info_MME_PlmnConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_MME_PlmnConfig_default_instance_;
    new (ptr) ::magma::mconfig::MME_PlmnConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MME_PlmnConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MME_PlmnConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {}};

static void InitDefaultsscc_info_MME_ServiceAreaMapsEntry_DoNotUse_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_MME_ServiceAreaMapsEntry_DoNotUse_default_instance_;
    new (ptr) ::magma::mconfig::MME_ServiceAreaMapsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MME_ServiceAreaMapsEntry_DoNotUse_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MME_ServiceAreaMapsEntry_DoNotUse_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {
      &scc_info_MME_TacList_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,}};

static void InitDefaultsscc_info_MME_TacList_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_MME_TacList_default_instance_;
    new (ptr) ::magma::mconfig::MME_TacList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MME_TacList_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MME_TacList_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {}};

static void InitDefaultsscc_info_MobilityD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_MobilityD_default_instance_;
    new (ptr) ::magma::mconfig::MobilityD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MobilityD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MobilityD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {}};

static void InitDefaultsscc_info_ModeMapItem_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_ModeMapItem_default_instance_;
    new (ptr) ::magma::mconfig::ModeMapItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModeMapItem_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModeMapItem_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {}};

static void InitDefaultsscc_info_MonitorD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_MonitorD_default_instance_;
    new (ptr) ::magma::mconfig::MonitorD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MonitorD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MonitorD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {}};

static void InitDefaultsscc_info_NProbeTask_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_NProbeTask_default_instance_;
    new (ptr) ::magma::mconfig::NProbeTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NProbeTask_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NProbeTask_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {}};

static void InitDefaultsscc_info_PipelineD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_PipelineD_default_instance_;
    new (ptr) ::magma::mconfig::PipelineD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PipelineD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_PipelineD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {
      &scc_info_PipelineD_AllowedGrePeer_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
      &scc_info_PipelineD_IPDRExportDst_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
      &scc_info_PipelineD_LiUes_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
      &scc_info_PipelineD_HEConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,}};

static void InitDefaultsscc_info_PipelineD_AllowedGrePeer_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_PipelineD_AllowedGrePeer_default_instance_;
    new (ptr) ::magma::mconfig::PipelineD_AllowedGrePeer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PipelineD_AllowedGrePeer_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PipelineD_AllowedGrePeer_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {}};

static void InitDefaultsscc_info_PipelineD_HEConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_PipelineD_HEConfig_default_instance_;
    new (ptr) ::magma::mconfig::PipelineD_HEConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PipelineD_HEConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PipelineD_HEConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {}};

static void InitDefaultsscc_info_PipelineD_IPDRExportDst_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_PipelineD_IPDRExportDst_default_instance_;
    new (ptr) ::magma::mconfig::PipelineD_IPDRExportDst();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PipelineD_IPDRExportDst_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PipelineD_IPDRExportDst_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {}};

static void InitDefaultsscc_info_PipelineD_LiUes_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_PipelineD_LiUes_default_instance_;
    new (ptr) ::magma::mconfig::PipelineD_LiUes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PipelineD_LiUes_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PipelineD_LiUes_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {}};

static void InitDefaultsscc_info_PolicyDB_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_PolicyDB_default_instance_;
    new (ptr) ::magma::mconfig::PolicyDB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PolicyDB_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PolicyDB_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {}};

static void InitDefaultsscc_info_RedirectD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_RedirectD_default_instance_;
    new (ptr) ::magma::mconfig::RedirectD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedirectD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RedirectD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {}};

static void InitDefaultsscc_info_SentryConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_SentryConfig_default_instance_;
    new (ptr) ::magma::mconfig::SentryConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SentryConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SentryConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {}};

static void InitDefaultsscc_info_SessionD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_SessionD_default_instance_;
    new (ptr) ::magma::mconfig::SessionD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SessionD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SessionD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {
      &scc_info_WalletExhaustDetection_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
      &scc_info_SentryConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,}};

static void InitDefaultsscc_info_SubscriberDB_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_SubscriberDB_default_instance_;
    new (ptr) ::magma::mconfig::SubscriberDB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscriberDB_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubscriberDB_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {
      &scc_info_SubscriberDB_SubProfilesEntry_DoNotUse_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,}};

static void InitDefaultsscc_info_SubscriberDB_SubProfilesEntry_DoNotUse_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_SubscriberDB_SubProfilesEntry_DoNotUse_default_instance_;
    new (ptr) ::magma::mconfig::SubscriberDB_SubProfilesEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscriberDB_SubProfilesEntry_DoNotUse_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubscriberDB_SubProfilesEntry_DoNotUse_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {
      &scc_info_SubscriberDB_SubscriptionProfile_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,}};

static void InitDefaultsscc_info_SubscriberDB_SubscriptionProfile_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_SubscriberDB_SubscriptionProfile_default_instance_;
    new (ptr) ::magma::mconfig::SubscriberDB_SubscriptionProfile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscriberDB_SubscriptionProfile_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscriberDB_SubscriptionProfile_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {}};

static void InitDefaultsscc_info_WalletExhaustDetection_lte_2fprotos_2fmconfig_2fmconfigs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magma::mconfig::_WalletExhaustDetection_default_instance_;
    new (ptr) ::magma::mconfig::WalletExhaustDetection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WalletExhaustDetection_lte_2fprotos_2fmconfig_2fmconfigs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WalletExhaustDetection_lte_2fprotos_2fmconfig_2fmconfigs_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lte_2fprotos_2fmconfig_2fmconfigs_2eproto[35];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_lte_2fprotos_2fmconfig_2fmconfigs_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lte_2fprotos_2fmconfig_2fmconfigs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::SentryConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::SentryConfig, url_python_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::SentryConfig, url_native_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::SentryConfig, upload_mme_log_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::SentryConfig, sample_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD_FDDConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD_FDDConfig, earfcndl_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD_FDDConfig, earfcnul_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD_TDDConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD_TDDConfig, earfcndl_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD_TDDConfig, subframe_assignment_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD_TDDConfig, special_subframe_pattern_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD_EnodebConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD_EnodebConfig, earfcndl_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD_EnodebConfig, subframe_assignment_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD_EnodebConfig, special_subframe_pattern_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD_EnodebConfig, pci_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD_EnodebConfig, transmit_enabled_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD_EnodebConfig, device_class_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD_EnodebConfig, bandwidth_mhz_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD_EnodebConfig, tac_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD_EnodebConfig, cell_id_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD_EnodebConfig, ip_address_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD_EnbConfigsBySerialEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD_EnbConfigsBySerialEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD_EnbConfigsBySerialEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD_EnbConfigsBySerialEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD, log_level_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD, pci_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD, earfcndl_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD, bandwidth_mhz_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD, plmnid_list_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD, subframe_assignment_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD, special_subframe_pattern_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD, allow_enodeb_transmit_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD, tac_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD, csfb_rat_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD, arfcn_2g_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD, tdd_config_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD, fdd_config_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::EnodebD, enb_configs_by_serial_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD_AllowedGrePeer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD_AllowedGrePeer, ip_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD_AllowedGrePeer, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD_IPDRExportDst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD_IPDRExportDst, ip_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD_IPDRExportDst, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD_LiUes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD_LiUes, imsis_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD_LiUes, msisdns_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD_LiUes, macs_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD_LiUes, ips_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD_LiUes, imeis_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD_HEConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD_HEConfig, enable_header_enrichment_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD_HEConfig, enable_encryption_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD_HEConfig, encryptionalgorithm_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD_HEConfig, hashfunction_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD_HEConfig, encodingtype_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD_HEConfig, encryption_key_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD_HEConfig, hmac_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD, log_level_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD, ue_ip_block_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD, nat_enabled_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD, default_rule_id_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD, services_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD, allowed_gre_peers_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD, ipdr_export_dst_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD, li_ues_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD, sgi_management_iface_vlan_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD, sgi_management_iface_ip_addr_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD, sgi_management_iface_gw_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PipelineD, he_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::SessionD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::SessionD, log_level_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::SessionD, relay_enabled_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::SessionD, wallet_exhaust_detection_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::SessionD, gx_gy_relay_enabled_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::SessionD, sentry_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::WalletExhaustDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::WalletExhaustDetection, terminate_on_exhaust_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::WalletExhaustDetection, method_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::WalletExhaustDetection, timeout_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PolicyDB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::PolicyDB, log_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::RedirectD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::RedirectD, log_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MobilityD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MobilityD, log_level_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MobilityD, ip_block_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MobilityD, ip_allocator_type_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MobilityD, static_ip_enabled_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MobilityD, multi_apn_ip_alloc_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MobilityD, ipv6_block_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MobilityD, ipv6_prefix_allocation_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME_ApnCorrectionMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME_ApnCorrectionMap, imsi_prefix_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME_ApnCorrectionMap, apn_override_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME_PlmnConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME_PlmnConfig, mcc_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME_PlmnConfig, mnc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME_TacList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME_TacList, tac_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME_ServiceAreaMapsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME_ServiceAreaMapsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME_ServiceAreaMapsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME_ServiceAreaMapsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME_ImeiConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME_ImeiConfig, tac_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME_ImeiConfig, snr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, log_level_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, mcc_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, mnc_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, tac_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, mme_gid_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, mme_code_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, enable_dns_caching_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, relay_enabled_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, non_eps_service_control_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, csfb_mcc_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, csfb_mnc_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, lac_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, cloud_subscriberdb_enabled_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, attached_enodeb_tacs_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, mme_relative_capacity_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, dns_primary_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, dns_secondary_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, nat_enabled_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, hss_relay_enabled_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, enable_apn_correction_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, apn_correction_map_list_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, ipv4_p_cscf_address_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, ipv6_p_cscf_address_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, ipv6_dns_address_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, ipv4_sgw_s1u_addr_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, restricted_plmns_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, service_area_maps_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, federated_mode_map_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, restricted_imeis_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, congestion_control_enabled_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, sentry_config_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MME, enable_converged_core_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::FederatedModeMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::FederatedModeMap, enabled_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::FederatedModeMap, mapping_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::ModeMapItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::ModeMapItem, mode_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::ModeMapItem, plmn_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::ModeMapItem, imsi_range_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::ModeMapItem, apn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::SubscriberDB_SubscriptionProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::SubscriberDB_SubscriptionProfile, max_ul_bit_rate_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::SubscriberDB_SubscriptionProfile, max_dl_bit_rate_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::SubscriberDB_SubProfilesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::SubscriberDB_SubProfilesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::SubscriberDB_SubProfilesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::SubscriberDB_SubProfilesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::SubscriberDB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::SubscriberDB, log_level_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::SubscriberDB, lte_auth_op_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::SubscriberDB, lte_auth_amf_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::SubscriberDB, sub_profiles_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::SubscriberDB, relay_enabled_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::SubscriberDB, hss_relay_enabled_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::SubscriberDB, sync_interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::LighttpD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::LighttpD, log_level_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::LighttpD, enable_caching_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MonitorD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MonitorD, log_level_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::MonitorD, polling_interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::DPID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::DPID, log_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::ConnectionD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::ConnectionD, log_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::LIAgentD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::LIAgentD, log_level_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::LIAgentD, nprobe_tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::NProbeTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::NProbeTask, task_id_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::NProbeTask, target_id_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::NProbeTask, target_type_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::NProbeTask, delivery_type_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::NProbeTask, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::NProbeTask, domain_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::DnsD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::DnsD, log_level_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::DnsD, enable_caching_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::DnsD, localttl_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::DnsD, records_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::DnsD, dhcp_server_enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::GatewayDNSConfigRecordsItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::GatewayDNSConfigRecordsItems, a_record_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::GatewayDNSConfigRecordsItems, aaaa_record_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::GatewayDNSConfigRecordsItems, cname_record_),
  PROTOBUF_FIELD_OFFSET(::magma::mconfig::GatewayDNSConfigRecordsItems, domain_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::magma::mconfig::SentryConfig)},
  { 9, -1, sizeof(::magma::mconfig::EnodebD_FDDConfig)},
  { 16, -1, sizeof(::magma::mconfig::EnodebD_TDDConfig)},
  { 24, -1, sizeof(::magma::mconfig::EnodebD_EnodebConfig)},
  { 39, 46, sizeof(::magma::mconfig::EnodebD_EnbConfigsBySerialEntry_DoNotUse)},
  { 48, -1, sizeof(::magma::mconfig::EnodebD)},
  { 67, -1, sizeof(::magma::mconfig::PipelineD_AllowedGrePeer)},
  { 74, -1, sizeof(::magma::mconfig::PipelineD_IPDRExportDst)},
  { 81, -1, sizeof(::magma::mconfig::PipelineD_LiUes)},
  { 91, -1, sizeof(::magma::mconfig::PipelineD_HEConfig)},
  { 103, -1, sizeof(::magma::mconfig::PipelineD)},
  { 120, -1, sizeof(::magma::mconfig::SessionD)},
  { 130, -1, sizeof(::magma::mconfig::WalletExhaustDetection)},
  { 138, -1, sizeof(::magma::mconfig::PolicyDB)},
  { 144, -1, sizeof(::magma::mconfig::RedirectD)},
  { 150, -1, sizeof(::magma::mconfig::MobilityD)},
  { 162, -1, sizeof(::magma::mconfig::MME_ApnCorrectionMap)},
  { 169, -1, sizeof(::magma::mconfig::MME_PlmnConfig)},
  { 176, -1, sizeof(::magma::mconfig::MME_TacList)},
  { 182, 189, sizeof(::magma::mconfig::MME_ServiceAreaMapsEntry_DoNotUse)},
  { 191, -1, sizeof(::magma::mconfig::MME_ImeiConfig)},
  { 198, -1, sizeof(::magma::mconfig::MME)},
  { 235, -1, sizeof(::magma::mconfig::FederatedModeMap)},
  { 242, -1, sizeof(::magma::mconfig::ModeMapItem)},
  { 251, -1, sizeof(::magma::mconfig::SubscriberDB_SubscriptionProfile)},
  { 258, 265, sizeof(::magma::mconfig::SubscriberDB_SubProfilesEntry_DoNotUse)},
  { 267, -1, sizeof(::magma::mconfig::SubscriberDB)},
  { 279, -1, sizeof(::magma::mconfig::LighttpD)},
  { 286, -1, sizeof(::magma::mconfig::MonitorD)},
  { 293, -1, sizeof(::magma::mconfig::DPID)},
  { 299, -1, sizeof(::magma::mconfig::ConnectionD)},
  { 305, -1, sizeof(::magma::mconfig::LIAgentD)},
  { 312, -1, sizeof(::magma::mconfig::NProbeTask)},
  { 323, -1, sizeof(::magma::mconfig::DnsD)},
  { 333, -1, sizeof(::magma::mconfig::GatewayDNSConfigRecordsItems)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_SentryConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_EnodebD_FDDConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_EnodebD_TDDConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_EnodebD_EnodebConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_EnodebD_EnbConfigsBySerialEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_EnodebD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_PipelineD_AllowedGrePeer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_PipelineD_IPDRExportDst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_PipelineD_LiUes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_PipelineD_HEConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_PipelineD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_SessionD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_WalletExhaustDetection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_PolicyDB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_RedirectD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_MobilityD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_MME_ApnCorrectionMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_MME_PlmnConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_MME_TacList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_MME_ServiceAreaMapsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_MME_ImeiConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_MME_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_FederatedModeMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_ModeMapItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_SubscriberDB_SubscriptionProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_SubscriberDB_SubProfilesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_SubscriberDB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_LighttpD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_MonitorD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_DPID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_ConnectionD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_LIAgentD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_NProbeTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_DnsD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magma::mconfig::_GatewayDNSConfigRecordsItems_default_instance_),
};

const char descriptor_table_protodef_lte_2fprotos_2fmconfig_2fmconfigs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!lte/protos/mconfig/mconfigs.proto\022\rmag"
  "ma.mconfig\032\031orc8r/protos/common.proto\"c\n"
  "\014SentryConfig\022\022\n\nurl_python\030\001 \001(\t\022\022\n\nurl"
  "_native\030\002 \001(\t\022\026\n\016upload_mme_log\030\003 \001(\010\022\023\n"
  "\013sample_rate\030\004 \001(\002\"\352\007\n\007EnodebD\022(\n\tlog_le"
  "vel\030\001 \001(\0162\025.magma.orc8r.LogLevel\022\013\n\003pci\030"
  "\002 \001(\005\022\020\n\010earfcndl\030\003 \001(\005\022\025\n\rbandwidth_mhz"
  "\030\004 \001(\005\022\023\n\013plmnid_list\030\005 \001(\t\022\033\n\023subframe_"
  "assignment\030\006 \001(\005\022 \n\030special_subframe_pat"
  "tern\030\007 \001(\005\022\035\n\025allow_enodeb_transmit\030\010 \001("
  "\010\022\013\n\003tac\030\t \001(\005\0220\n\010csfb_rat\030\n \001(\0162\036.magma"
  ".mconfig.EnodebD.CSFBRat\022\020\n\010arfcn_2g\030\013 \003"
  "(\005\0224\n\ntdd_config\030\014 \001(\0132 .magma.mconfig.E"
  "nodebD.TDDConfig\0224\n\nfdd_config\030\r \001(\0132 .m"
  "agma.mconfig.EnodebD.FDDConfig\022M\n\025enb_co"
  "nfigs_by_serial\030\016 \003(\0132..magma.mconfig.En"
  "odebD.EnbConfigsBySerialEntry\032/\n\tFDDConf"
  "ig\022\020\n\010earfcndl\030\001 \001(\005\022\020\n\010earfcnul\030\002 \001(\005\032\\"
  "\n\tTDDConfig\022\020\n\010earfcndl\030\001 \001(\005\022\033\n\023subfram"
  "e_assignment\030\002 \001(\005\022 \n\030special_subframe_p"
  "attern\030\003 \001(\005\032\345\001\n\014EnodebConfig\022\020\n\010earfcnd"
  "l\030\001 \001(\005\022\033\n\023subframe_assignment\030\002 \001(\005\022 \n\030"
  "special_subframe_pattern\030\003 \001(\005\022\013\n\003pci\030\004 "
  "\001(\005\022\030\n\020transmit_enabled\030\005 \001(\010\022\024\n\014device_"
  "class\030\006 \001(\t\022\025\n\rbandwidth_mhz\030\007 \001(\005\022\013\n\003ta"
  "c\030\010 \001(\005\022\017\n\007cell_id\030\t \001(\005\022\022\n\nip_address\030\n"
  " \001(\t\032^\n\027EnbConfigsBySerialEntry\022\013\n\003key\030\001"
  " \001(\t\0222\n\005value\030\002 \001(\0132#.magma.mconfig.Enod"
  "ebD.EnodebConfig:\0028\001\")\n\007CSFBRat\022\016\n\nCSFBR"
  "AT_2G\020\000\022\016\n\nCSFBRAT_3G\020\001\"\227\n\n\tPipelineD\022(\n"
  "\tlog_level\030\001 \001(\0162\025.magma.orc8r.LogLevel\022"
  "\023\n\013ue_ip_block\030\002 \001(\t\022\023\n\013nat_enabled\030\003 \001("
  "\010\022\027\n\017default_rule_id\030\006 \001(\t\022:\n\010services\030\010"
  " \003(\0162(.magma.mconfig.PipelineD.NetworkSe"
  "rvices\022B\n\021allowed_gre_peers\030\t \003(\0132\'.magm"
  "a.mconfig.PipelineD.AllowedGrePeer\022\?\n\017ip"
  "dr_export_dst\030\n \001(\0132&.magma.mconfig.Pipe"
  "lineD.IPDRExportDst\022.\n\006li_ues\030\014 \001(\0132\036.ma"
  "gma.mconfig.PipelineD.LiUes\022!\n\031sgi_manag"
  "ement_iface_vlan\030\r \001(\t\022$\n\034sgi_management"
  "_iface_ip_addr\030\016 \001(\t\022\037\n\027sgi_management_i"
  "face_gw\030\017 \001(\t\0224\n\the_config\030\021 \001(\0132!.magma"
  ".mconfig.PipelineD.HEConfig\032)\n\016AllowedGr"
  "ePeer\022\n\n\002ip\030\001 \001(\t\022\013\n\003key\030\002 \001(\r\032)\n\rIPDREx"
  "portDst\022\n\n\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\032Q\n\005LiU"
  "es\022\r\n\005imsis\030\001 \003(\t\022\017\n\007msisdns\030\002 \003(\t\022\014\n\004ma"
  "cs\030\003 \003(\t\022\013\n\003ips\030\004 \003(\t\022\r\n\005imeis\030\005 \003(\t\032\227\004\n"
  "\010HEConfig\022 \n\030enable_header_enrichment\030\001 "
  "\001(\010\022\031\n\021enable_encryption\030\002 \001(\010\022R\n\023encryp"
  "tionAlgorithm\030\003 \001(\01625.magma.mconfig.Pipe"
  "lineD.HEConfig.EncryptionAlgorithm\022D\n\014ha"
  "shFunction\030\004 \001(\0162..magma.mconfig.Pipelin"
  "eD.HEConfig.HashFunction\022D\n\014encodingType"
  "\030\005 \001(\0162..magma.mconfig.PipelineD.HEConfi"
  "g.EncodingType\022\026\n\016encryption_key\030\006 \001(\t\022\020"
  "\n\010hmac_key\030\007 \001(\t\"m\n\023EncryptionAlgorithm\022"
  "\007\n\003RC4\020\000\022\027\n\023AES256_CBC_HMAC_MD5\020\001\022\027\n\023AES"
  "256_ECB_HMAC_MD5\020\002\022\033\n\027GZIPPED_AES256_ECB"
  "_SHA1\020\003\",\n\014HashFunction\022\007\n\003MD5\020\000\022\007\n\003HEX\020"
  "\001\022\n\n\006SHA256\020\002\"\'\n\014EncodingType\022\n\n\006BASE64\020"
  "\000\022\013\n\007HEX2BIN\020\001\"=\n\017NetworkServices\022\020\n\010MET"
  "ERING\020\000\032\002\010\001\022\007\n\003DPI\020\001\022\017\n\013ENFORCEMENT\020\002J\004\010"
  "\004\020\005J\004\010\013\020\014\"\351\001\n\010SessionD\022(\n\tlog_level\030\001 \001("
  "\0162\025.magma.orc8r.LogLevel\022\031\n\rrelay_enable"
  "d\030\002 \001(\010B\002\030\001\022G\n\030wallet_exhaust_detection\030"
  "\003 \001(\0132%.magma.mconfig.WalletExhaustDetec"
  "tion\022\033\n\023gx_gy_relay_enabled\030\004 \001(\010\0222\n\rsen"
  "try_config\030\005 \001(\0132\033.magma.mconfig.SentryC"
  "onfig\"\246\001\n\026WalletExhaustDetection\022\034\n\024term"
  "inate_on_exhaust\030\001 \001(\010\022<\n\006method\030\002 \001(\0162,"
  ".magma.mconfig.WalletExhaustDetection.Me"
  "thod\022\022\n\ntimeout_ms\030\003 \001(\r\"\034\n\006Method\022\022\n\016Gx"
  "TrackedRules\020\000\"4\n\010PolicyDB\022(\n\tlog_level\030"
  "\001 \001(\0162\025.magma.orc8r.LogLevel\"5\n\tRedirect"
  "D\022(\n\tlog_level\030\001 \001(\0162\025.magma.orc8r.LogLe"
  "vel\"\246\002\n\tMobilityD\022(\n\tlog_level\030\001 \001(\0162\025.m"
  "agma.orc8r.LogLevel\022\020\n\010ip_block\030\002 \001(\t\022C\n"
  "\021ip_allocator_type\030\003 \001(\0162(.magma.mconfig"
  ".MobilityD.IpAllocatorType\022\031\n\021static_ip_"
  "enabled\030\004 \001(\010\022\032\n\022multi_apn_ip_alloc\030\005 \001("
  "\010\022\022\n\nipv6_block\030\n \001(\t\022#\n\033ipv6_prefix_all"
  "ocation_type\030\013 \001(\t\"(\n\017IpAllocatorType\022\013\n"
  "\007IP_POOL\020\000\022\010\n\004DHCP\020\001\"\305\013\n\003MME\022(\n\tlog_leve"
  "l\030\001 \001(\0162\025.magma.orc8r.LogLevel\022\013\n\003mcc\030\002 "
  "\001(\t\022\013\n\003mnc\030\003 \001(\t\022\013\n\003tac\030\004 \001(\005\022\017\n\007mme_gid"
  "\030\005 \001(\005\022\020\n\010mme_code\030\006 \001(\005\022\032\n\022enable_dns_c"
  "aching\030\007 \001(\010\022\025\n\rrelay_enabled\030\010 \001(\010\022H\n\027n"
  "on_eps_service_control\030\t \001(\0162\'.magma.mco"
  "nfig.MME.NonEPSServiceControl\022\020\n\010csfb_mc"
  "c\030\n \001(\t\022\020\n\010csfb_mnc\030\013 \001(\t\022\013\n\003lac\030\014 \001(\005\022\""
  "\n\032cloud_subscriberdb_enabled\030\016 \001(\010\022\034\n\024at"
  "tached_enodeb_tacs\030\017 \003(\005\022\035\n\025mme_relative"
  "_capacity\030\020 \001(\005\022\023\n\013dns_primary\030\024 \001(\t\022\025\n\r"
  "dns_secondary\030\025 \001(\t\022\023\n\013nat_enabled\030\026 \001(\010"
  "\022\031\n\021hss_relay_enabled\030\027 \001(\010\022\035\n\025enable_ap"
  "n_correction\030\030 \001(\010\022D\n\027apn_correction_map"
  "_list\030\031 \003(\0132#.magma.mconfig.MME.ApnCorre"
  "ctionMap\022\033\n\023ipv4_p_cscf_address\030\032 \001(\t\022\033\n"
  "\023ipv6_p_cscf_address\030\033 \001(\t\022\030\n\020ipv6_dns_a"
  "ddress\030\036 \001(\t\022\031\n\021ipv4_sgw_s1u_addr\030\037 \001(\t\022"
  "7\n\020restricted_plmns\030  \003(\0132\035.magma.mconfi"
  "g.MME.PlmnConfig\022B\n\021service_area_maps\030! "
  "\003(\0132\'.magma.mconfig.MME.ServiceAreaMapsE"
  "ntry\022;\n\022federated_mode_map\030\" \001(\0132\037.magma"
  ".mconfig.FederatedModeMap\0227\n\020restricted_"
  "imeis\030# \003(\0132\035.magma.mconfig.MME.ImeiConf"
  "ig\022\"\n\032congestion_control_enabled\030( \001(\010\0222"
  "\n\rsentry_config\030- \001(\0132\033.magma.mconfig.Se"
  "ntryConfig\022\035\n\025enable_converged_core\030. \001("
  "\010\032=\n\020ApnCorrectionMap\022\023\n\013imsi_prefix\030\001 \001"
  "(\t\022\024\n\014apn_override\030\002 \001(\t\032&\n\nPlmnConfig\022\013"
  "\n\003mcc\030\001 \001(\t\022\013\n\003mnc\030\002 \001(\t\032\026\n\007TacList\022\013\n\003t"
  "ac\030\001 \003(\r\032R\n\024ServiceAreaMapsEntry\022\013\n\003key\030"
  "\001 \001(\t\022)\n\005value\030\002 \001(\0132\032.magma.mconfig.MME"
  ".TacList:\0028\001\032&\n\nImeiConfig\022\013\n\003tac\030\001 \001(\t\022"
  "\013\n\003snr\030\002 \001(\t\"\245\001\n\024NonEPSServiceControl\022\037\n"
  "\033NON_EPS_SERVICE_CONTROL_OFF\020\000\022$\n NON_EP"
  "S_SERVICE_CONTROL_CSFB_SMS\020\001\022\037\n\033NON_EPS_"
  "SERVICE_CONTROL_SMS\020\002\022%\n!NON_EPS_SERVICE"
  "_CONTROL_SMS_ORC8R\020\003\"P\n\020FederatedModeMap"
  "\022\017\n\007enabled\030\001 \001(\010\022+\n\007mapping\030\002 \003(\0132\032.mag"
  "ma.mconfig.ModeMapItem\"\303\001\n\013ModeMapItem\0226"
  "\n\004mode\030\001 \001(\0162(.magma.mconfig.ModeMapItem"
  ".FederatedMode\022\014\n\004plmn\030\002 \001(\t\022\022\n\nimsi_ran"
  "ge\030\003 \001(\t\022\013\n\003apn\030\004 \001(\t\"M\n\rFederatedMode\022\023"
  "\n\017SPGW_SUBSCRIBER\020\000\022\024\n\020LOCAL_SUBSCRIBER\020"
  "\001\022\021\n\rS8_SUBSCRIBER\020\002\"\236\003\n\014SubscriberDB\022(\n"
  "\tlog_level\030\001 \001(\0162\025.magma.orc8r.LogLevel\022"
  "\023\n\013lte_auth_op\030\002 \001(\014\022\024\n\014lte_auth_amf\030\003 \001"
  "(\014\022B\n\014sub_profiles\030\004 \003(\0132,.magma.mconfig"
  ".SubscriberDB.SubProfilesEntry\022\025\n\rrelay_"
  "enabled\030\005 \001(\010\022\031\n\021hss_relay_enabled\030\006 \001(\010"
  "\022\025\n\rsync_interval\030\007 \001(\r\032G\n\023SubscriptionP"
  "rofile\022\027\n\017max_ul_bit_rate\030\001 \001(\004\022\027\n\017max_d"
  "l_bit_rate\030\002 \001(\004\032c\n\020SubProfilesEntry\022\013\n\003"
  "key\030\001 \001(\t\022>\n\005value\030\002 \001(\0132/.magma.mconfig"
  ".SubscriberDB.SubscriptionProfile:\0028\001\"L\n"
  "\010LighttpD\022(\n\tlog_level\030\001 \001(\0162\025.magma.orc"
  "8r.LogLevel\022\026\n\016enable_caching\030\002 \001(\010\"N\n\010M"
  "onitorD\022(\n\tlog_level\030\001 \001(\0162\025.magma.orc8r"
  ".LogLevel\022\030\n\020polling_interval\030< \001(\005\"0\n\004D"
  "PID\022(\n\tlog_level\030\001 \001(\0162\025.magma.orc8r.Log"
  "Level\"7\n\013ConnectionD\022(\n\tlog_level\030\001 \001(\0162"
  "\025.magma.orc8r.LogLevel\"e\n\010LIAgentD\022(\n\tlo"
  "g_level\030\001 \001(\0162\025.magma.orc8r.LogLevel\022/\n\014"
  "nprobe_tasks\030\002 \003(\0132\031.magma.mconfig.NProb"
  "eTask\"\207\001\n\nNProbeTask\022\017\n\007task_id\030\001 \001(\t\022\021\n"
  "\ttarget_id\030\002 \001(\t\022\023\n\013target_type\030\003 \001(\t\022\025\n"
  "\rdelivery_type\030\004 \001(\t\022\026\n\016correlation_id\030\005"
  " \001(\004\022\021\n\tdomain_id\030\006 \001(\t\"\265\001\n\004DnsD\022(\n\tlog_"
  "level\030\001 \001(\0162\025.magma.orc8r.LogLevel\022\026\n\016en"
  "able_caching\030\002 \001(\010\022\020\n\010localTTL\030\003 \001(\005\022<\n\007"
  "records\030\004 \003(\0132+.magma.mconfig.GatewayDNS"
  "ConfigRecordsItems\022\033\n\023dhcp_server_enable"
  "d\030\005 \001(\010\"k\n\034GatewayDNSConfigRecordsItems\022"
  "\020\n\010a_record\030\001 \003(\t\022\023\n\013aaaa_record\030\002 \003(\t\022\024"
  "\n\014cname_record\030\003 \003(\t\022\016\n\006domain\030\004 \001(\tB#Z!"
  "magma/lte/cloud/go/protos/mconfigb\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto_deps[1] = {
  &::descriptor_table_orc8r_2fprotos_2fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto_sccs[35] = {
  &scc_info_ConnectionD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_DPID_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_DnsD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_EnodebD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_EnodebD_EnbConfigsBySerialEntry_DoNotUse_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_EnodebD_EnodebConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_EnodebD_FDDConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_EnodebD_TDDConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_FederatedModeMap_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_GatewayDNSConfigRecordsItems_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_LIAgentD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_LighttpD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_MME_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_MME_ApnCorrectionMap_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_MME_ImeiConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_MME_PlmnConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_MME_ServiceAreaMapsEntry_DoNotUse_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_MME_TacList_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_MobilityD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_ModeMapItem_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_MonitorD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_NProbeTask_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_PipelineD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_PipelineD_AllowedGrePeer_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_PipelineD_HEConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_PipelineD_IPDRExportDst_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_PipelineD_LiUes_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_PolicyDB_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_RedirectD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_SentryConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_SessionD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_SubscriberDB_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_SubscriberDB_SubProfilesEntry_DoNotUse_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_SubscriberDB_SubscriptionProfile_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
  &scc_info_WalletExhaustDetection_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto = {
  false, false, descriptor_table_protodef_lte_2fprotos_2fmconfig_2fmconfigs_2eproto, "lte/protos/mconfig/mconfigs.proto", 6321,
  &descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto_once, descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto_sccs, descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto_deps, 35, 1,
  schemas, file_default_instances, TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto::offsets,
  file_level_metadata_lte_2fprotos_2fmconfig_2fmconfigs_2eproto, 35, file_level_enum_descriptors_lte_2fprotos_2fmconfig_2fmconfigs_2eproto, file_level_service_descriptors_lte_2fprotos_2fmconfig_2fmconfigs_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lte_2fprotos_2fmconfig_2fmconfigs_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto)), true);
namespace magma {
namespace mconfig {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnodebD_CSFBRat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
  return file_level_enum_descriptors_lte_2fprotos_2fmconfig_2fmconfigs_2eproto[0];
}
bool EnodebD_CSFBRat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EnodebD_CSFBRat EnodebD::CSFBRAT_2G;
constexpr EnodebD_CSFBRat EnodebD::CSFBRAT_3G;
constexpr EnodebD_CSFBRat EnodebD::CSFBRat_MIN;
constexpr EnodebD_CSFBRat EnodebD::CSFBRat_MAX;
constexpr int EnodebD::CSFBRat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PipelineD_HEConfig_EncryptionAlgorithm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
  return file_level_enum_descriptors_lte_2fprotos_2fmconfig_2fmconfigs_2eproto[1];
}
bool PipelineD_HEConfig_EncryptionAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PipelineD_HEConfig_EncryptionAlgorithm PipelineD_HEConfig::RC4;
constexpr PipelineD_HEConfig_EncryptionAlgorithm PipelineD_HEConfig::AES256_CBC_HMAC_MD5;
constexpr PipelineD_HEConfig_EncryptionAlgorithm PipelineD_HEConfig::AES256_ECB_HMAC_MD5;
constexpr PipelineD_HEConfig_EncryptionAlgorithm PipelineD_HEConfig::GZIPPED_AES256_ECB_SHA1;
constexpr PipelineD_HEConfig_EncryptionAlgorithm PipelineD_HEConfig::EncryptionAlgorithm_MIN;
constexpr PipelineD_HEConfig_EncryptionAlgorithm PipelineD_HEConfig::EncryptionAlgorithm_MAX;
constexpr int PipelineD_HEConfig::EncryptionAlgorithm_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PipelineD_HEConfig_HashFunction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
  return file_level_enum_descriptors_lte_2fprotos_2fmconfig_2fmconfigs_2eproto[2];
}
bool PipelineD_HEConfig_HashFunction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PipelineD_HEConfig_HashFunction PipelineD_HEConfig::MD5;
constexpr PipelineD_HEConfig_HashFunction PipelineD_HEConfig::HEX;
constexpr PipelineD_HEConfig_HashFunction PipelineD_HEConfig::SHA256;
constexpr PipelineD_HEConfig_HashFunction PipelineD_HEConfig::HashFunction_MIN;
constexpr PipelineD_HEConfig_HashFunction PipelineD_HEConfig::HashFunction_MAX;
constexpr int PipelineD_HEConfig::HashFunction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PipelineD_HEConfig_EncodingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
  return file_level_enum_descriptors_lte_2fprotos_2fmconfig_2fmconfigs_2eproto[3];
}
bool PipelineD_HEConfig_EncodingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PipelineD_HEConfig_EncodingType PipelineD_HEConfig::BASE64;
constexpr PipelineD_HEConfig_EncodingType PipelineD_HEConfig::HEX2BIN;
constexpr PipelineD_HEConfig_EncodingType PipelineD_HEConfig::EncodingType_MIN;
constexpr PipelineD_HEConfig_EncodingType PipelineD_HEConfig::EncodingType_MAX;
constexpr int PipelineD_HEConfig::EncodingType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PipelineD_NetworkServices_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
  return file_level_enum_descriptors_lte_2fprotos_2fmconfig_2fmconfigs_2eproto[4];
}
bool PipelineD_NetworkServices_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PipelineD_NetworkServices PipelineD::METERING;
constexpr PipelineD_NetworkServices PipelineD::DPI;
constexpr PipelineD_NetworkServices PipelineD::ENFORCEMENT;
constexpr PipelineD_NetworkServices PipelineD::NetworkServices_MIN;
constexpr PipelineD_NetworkServices PipelineD::NetworkServices_MAX;
constexpr int PipelineD::NetworkServices_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WalletExhaustDetection_Method_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
  return file_level_enum_descriptors_lte_2fprotos_2fmconfig_2fmconfigs_2eproto[5];
}
bool WalletExhaustDetection_Method_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WalletExhaustDetection_Method WalletExhaustDetection::GxTrackedRules;
constexpr WalletExhaustDetection_Method WalletExhaustDetection::Method_MIN;
constexpr WalletExhaustDetection_Method WalletExhaustDetection::Method_MAX;
constexpr int WalletExhaustDetection::Method_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MobilityD_IpAllocatorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
  return file_level_enum_descriptors_lte_2fprotos_2fmconfig_2fmconfigs_2eproto[6];
}
bool MobilityD_IpAllocatorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MobilityD_IpAllocatorType MobilityD::IP_POOL;
constexpr MobilityD_IpAllocatorType MobilityD::DHCP;
constexpr MobilityD_IpAllocatorType MobilityD::IpAllocatorType_MIN;
constexpr MobilityD_IpAllocatorType MobilityD::IpAllocatorType_MAX;
constexpr int MobilityD::IpAllocatorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MME_NonEPSServiceControl_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
  return file_level_enum_descriptors_lte_2fprotos_2fmconfig_2fmconfigs_2eproto[7];
}
bool MME_NonEPSServiceControl_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MME_NonEPSServiceControl MME::NON_EPS_SERVICE_CONTROL_OFF;
constexpr MME_NonEPSServiceControl MME::NON_EPS_SERVICE_CONTROL_CSFB_SMS;
constexpr MME_NonEPSServiceControl MME::NON_EPS_SERVICE_CONTROL_SMS;
constexpr MME_NonEPSServiceControl MME::NON_EPS_SERVICE_CONTROL_SMS_ORC8R;
constexpr MME_NonEPSServiceControl MME::NonEPSServiceControl_MIN;
constexpr MME_NonEPSServiceControl MME::NonEPSServiceControl_MAX;
constexpr int MME::NonEPSServiceControl_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModeMapItem_FederatedMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
  return file_level_enum_descriptors_lte_2fprotos_2fmconfig_2fmconfigs_2eproto[8];
}
bool ModeMapItem_FederatedMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ModeMapItem_FederatedMode ModeMapItem::SPGW_SUBSCRIBER;
constexpr ModeMapItem_FederatedMode ModeMapItem::LOCAL_SUBSCRIBER;
constexpr ModeMapItem_FederatedMode ModeMapItem::S8_SUBSCRIBER;
constexpr ModeMapItem_FederatedMode ModeMapItem::FederatedMode_MIN;
constexpr ModeMapItem_FederatedMode ModeMapItem::FederatedMode_MAX;
constexpr int ModeMapItem::FederatedMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class SentryConfig::_Internal {
 public:
};

SentryConfig::SentryConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.SentryConfig)
}
SentryConfig::SentryConfig(const SentryConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_python_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url_python().empty()) {
    url_python_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url_python(), 
      GetArena());
  }
  url_native_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url_native().empty()) {
    url_native_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url_native(), 
      GetArena());
  }
  ::memcpy(&upload_mme_log_, &from.upload_mme_log_,
    static_cast<size_t>(reinterpret_cast<char*>(&sample_rate_) -
    reinterpret_cast<char*>(&upload_mme_log_)) + sizeof(sample_rate_));
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.SentryConfig)
}

void SentryConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SentryConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  url_python_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_native_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&upload_mme_log_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sample_rate_) -
      reinterpret_cast<char*>(&upload_mme_log_)) + sizeof(sample_rate_));
}

SentryConfig::~SentryConfig() {
  // @@protoc_insertion_point(destructor:magma.mconfig.SentryConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SentryConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_python_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_native_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SentryConfig::ArenaDtor(void* object) {
  SentryConfig* _this = reinterpret_cast< SentryConfig* >(object);
  (void)_this;
}
void SentryConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SentryConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SentryConfig& SentryConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SentryConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void SentryConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.SentryConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_python_.ClearToEmpty();
  url_native_.ClearToEmpty();
  ::memset(&upload_mme_log_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_rate_) -
      reinterpret_cast<char*>(&upload_mme_log_)) + sizeof(sample_rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SentryConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string url_python = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_url_python();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.SentryConfig.url_python"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url_native = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url_native();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.SentryConfig.url_native"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool upload_mme_log = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          upload_mme_log_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float sample_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SentryConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.SentryConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url_python = 1;
  if (this->url_python().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url_python().data(), static_cast<int>(this->_internal_url_python().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.SentryConfig.url_python");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url_python(), target);
  }

  // string url_native = 2;
  if (this->url_native().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url_native().data(), static_cast<int>(this->_internal_url_native().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.SentryConfig.url_native");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url_native(), target);
  }

  // bool upload_mme_log = 3;
  if (this->upload_mme_log() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_upload_mme_log(), target);
  }

  // float sample_rate = 4;
  if (!(this->sample_rate() <= 0 && this->sample_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_sample_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.SentryConfig)
  return target;
}

size_t SentryConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.SentryConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url_python = 1;
  if (this->url_python().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url_python());
  }

  // string url_native = 2;
  if (this->url_native().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url_native());
  }

  // bool upload_mme_log = 3;
  if (this->upload_mme_log() != 0) {
    total_size += 1 + 1;
  }

  // float sample_rate = 4;
  if (!(this->sample_rate() <= 0 && this->sample_rate() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SentryConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.SentryConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SentryConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SentryConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.SentryConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.SentryConfig)
    MergeFrom(*source);
  }
}

void SentryConfig::MergeFrom(const SentryConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.SentryConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url_python().size() > 0) {
    _internal_set_url_python(from._internal_url_python());
  }
  if (from.url_native().size() > 0) {
    _internal_set_url_native(from._internal_url_native());
  }
  if (from.upload_mme_log() != 0) {
    _internal_set_upload_mme_log(from._internal_upload_mme_log());
  }
  if (!(from.sample_rate() <= 0 && from.sample_rate() >= 0)) {
    _internal_set_sample_rate(from._internal_sample_rate());
  }
}

void SentryConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.SentryConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SentryConfig::CopyFrom(const SentryConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.SentryConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SentryConfig::IsInitialized() const {
  return true;
}

void SentryConfig::InternalSwap(SentryConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  url_python_.Swap(&other->url_python_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  url_native_.Swap(&other->url_native_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SentryConfig, sample_rate_)
      + sizeof(SentryConfig::sample_rate_)
      - PROTOBUF_FIELD_OFFSET(SentryConfig, upload_mme_log_)>(
          reinterpret_cast<char*>(&upload_mme_log_),
          reinterpret_cast<char*>(&other->upload_mme_log_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SentryConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EnodebD_FDDConfig::_Internal {
 public:
};

EnodebD_FDDConfig::EnodebD_FDDConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.EnodebD.FDDConfig)
}
EnodebD_FDDConfig::EnodebD_FDDConfig(const EnodebD_FDDConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&earfcndl_, &from.earfcndl_,
    static_cast<size_t>(reinterpret_cast<char*>(&earfcnul_) -
    reinterpret_cast<char*>(&earfcndl_)) + sizeof(earfcnul_));
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.EnodebD.FDDConfig)
}

void EnodebD_FDDConfig::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&earfcndl_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&earfcnul_) -
      reinterpret_cast<char*>(&earfcndl_)) + sizeof(earfcnul_));
}

EnodebD_FDDConfig::~EnodebD_FDDConfig() {
  // @@protoc_insertion_point(destructor:magma.mconfig.EnodebD.FDDConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnodebD_FDDConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnodebD_FDDConfig::ArenaDtor(void* object) {
  EnodebD_FDDConfig* _this = reinterpret_cast< EnodebD_FDDConfig* >(object);
  (void)_this;
}
void EnodebD_FDDConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnodebD_FDDConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnodebD_FDDConfig& EnodebD_FDDConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnodebD_FDDConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void EnodebD_FDDConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.EnodebD.FDDConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&earfcndl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&earfcnul_) -
      reinterpret_cast<char*>(&earfcndl_)) + sizeof(earfcnul_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnodebD_FDDConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 earfcndl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          earfcndl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 earfcnul = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          earfcnul_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnodebD_FDDConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.EnodebD.FDDConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 earfcndl = 1;
  if (this->earfcndl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_earfcndl(), target);
  }

  // int32 earfcnul = 2;
  if (this->earfcnul() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_earfcnul(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.EnodebD.FDDConfig)
  return target;
}

size_t EnodebD_FDDConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.EnodebD.FDDConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 earfcndl = 1;
  if (this->earfcndl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_earfcndl());
  }

  // int32 earfcnul = 2;
  if (this->earfcnul() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_earfcnul());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnodebD_FDDConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.EnodebD.FDDConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const EnodebD_FDDConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnodebD_FDDConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.EnodebD.FDDConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.EnodebD.FDDConfig)
    MergeFrom(*source);
  }
}

void EnodebD_FDDConfig::MergeFrom(const EnodebD_FDDConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.EnodebD.FDDConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.earfcndl() != 0) {
    _internal_set_earfcndl(from._internal_earfcndl());
  }
  if (from.earfcnul() != 0) {
    _internal_set_earfcnul(from._internal_earfcnul());
  }
}

void EnodebD_FDDConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.EnodebD.FDDConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnodebD_FDDConfig::CopyFrom(const EnodebD_FDDConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.EnodebD.FDDConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnodebD_FDDConfig::IsInitialized() const {
  return true;
}

void EnodebD_FDDConfig::InternalSwap(EnodebD_FDDConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnodebD_FDDConfig, earfcnul_)
      + sizeof(EnodebD_FDDConfig::earfcnul_)
      - PROTOBUF_FIELD_OFFSET(EnodebD_FDDConfig, earfcndl_)>(
          reinterpret_cast<char*>(&earfcndl_),
          reinterpret_cast<char*>(&other->earfcndl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnodebD_FDDConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EnodebD_TDDConfig::_Internal {
 public:
};

EnodebD_TDDConfig::EnodebD_TDDConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.EnodebD.TDDConfig)
}
EnodebD_TDDConfig::EnodebD_TDDConfig(const EnodebD_TDDConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&earfcndl_, &from.earfcndl_,
    static_cast<size_t>(reinterpret_cast<char*>(&special_subframe_pattern_) -
    reinterpret_cast<char*>(&earfcndl_)) + sizeof(special_subframe_pattern_));
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.EnodebD.TDDConfig)
}

void EnodebD_TDDConfig::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&earfcndl_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&special_subframe_pattern_) -
      reinterpret_cast<char*>(&earfcndl_)) + sizeof(special_subframe_pattern_));
}

EnodebD_TDDConfig::~EnodebD_TDDConfig() {
  // @@protoc_insertion_point(destructor:magma.mconfig.EnodebD.TDDConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnodebD_TDDConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnodebD_TDDConfig::ArenaDtor(void* object) {
  EnodebD_TDDConfig* _this = reinterpret_cast< EnodebD_TDDConfig* >(object);
  (void)_this;
}
void EnodebD_TDDConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnodebD_TDDConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnodebD_TDDConfig& EnodebD_TDDConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnodebD_TDDConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void EnodebD_TDDConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.EnodebD.TDDConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&earfcndl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&special_subframe_pattern_) -
      reinterpret_cast<char*>(&earfcndl_)) + sizeof(special_subframe_pattern_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnodebD_TDDConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 earfcndl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          earfcndl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 subframe_assignment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          subframe_assignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 special_subframe_pattern = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          special_subframe_pattern_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnodebD_TDDConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.EnodebD.TDDConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 earfcndl = 1;
  if (this->earfcndl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_earfcndl(), target);
  }

  // int32 subframe_assignment = 2;
  if (this->subframe_assignment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_subframe_assignment(), target);
  }

  // int32 special_subframe_pattern = 3;
  if (this->special_subframe_pattern() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_special_subframe_pattern(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.EnodebD.TDDConfig)
  return target;
}

size_t EnodebD_TDDConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.EnodebD.TDDConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 earfcndl = 1;
  if (this->earfcndl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_earfcndl());
  }

  // int32 subframe_assignment = 2;
  if (this->subframe_assignment() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_subframe_assignment());
  }

  // int32 special_subframe_pattern = 3;
  if (this->special_subframe_pattern() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_special_subframe_pattern());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnodebD_TDDConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.EnodebD.TDDConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const EnodebD_TDDConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnodebD_TDDConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.EnodebD.TDDConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.EnodebD.TDDConfig)
    MergeFrom(*source);
  }
}

void EnodebD_TDDConfig::MergeFrom(const EnodebD_TDDConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.EnodebD.TDDConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.earfcndl() != 0) {
    _internal_set_earfcndl(from._internal_earfcndl());
  }
  if (from.subframe_assignment() != 0) {
    _internal_set_subframe_assignment(from._internal_subframe_assignment());
  }
  if (from.special_subframe_pattern() != 0) {
    _internal_set_special_subframe_pattern(from._internal_special_subframe_pattern());
  }
}

void EnodebD_TDDConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.EnodebD.TDDConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnodebD_TDDConfig::CopyFrom(const EnodebD_TDDConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.EnodebD.TDDConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnodebD_TDDConfig::IsInitialized() const {
  return true;
}

void EnodebD_TDDConfig::InternalSwap(EnodebD_TDDConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnodebD_TDDConfig, special_subframe_pattern_)
      + sizeof(EnodebD_TDDConfig::special_subframe_pattern_)
      - PROTOBUF_FIELD_OFFSET(EnodebD_TDDConfig, earfcndl_)>(
          reinterpret_cast<char*>(&earfcndl_),
          reinterpret_cast<char*>(&other->earfcndl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnodebD_TDDConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EnodebD_EnodebConfig::_Internal {
 public:
};

EnodebD_EnodebConfig::EnodebD_EnodebConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.EnodebD.EnodebConfig)
}
EnodebD_EnodebConfig::EnodebD_EnodebConfig(const EnodebD_EnodebConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_class().empty()) {
    device_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_class(), 
      GetArena());
  }
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_address().empty()) {
    ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip_address(), 
      GetArena());
  }
  ::memcpy(&earfcndl_, &from.earfcndl_,
    static_cast<size_t>(reinterpret_cast<char*>(&cell_id_) -
    reinterpret_cast<char*>(&earfcndl_)) + sizeof(cell_id_));
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.EnodebD.EnodebConfig)
}

void EnodebD_EnodebConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnodebD_EnodebConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  device_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&earfcndl_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cell_id_) -
      reinterpret_cast<char*>(&earfcndl_)) + sizeof(cell_id_));
}

EnodebD_EnodebConfig::~EnodebD_EnodebConfig() {
  // @@protoc_insertion_point(destructor:magma.mconfig.EnodebD.EnodebConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnodebD_EnodebConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_class_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnodebD_EnodebConfig::ArenaDtor(void* object) {
  EnodebD_EnodebConfig* _this = reinterpret_cast< EnodebD_EnodebConfig* >(object);
  (void)_this;
}
void EnodebD_EnodebConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnodebD_EnodebConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnodebD_EnodebConfig& EnodebD_EnodebConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnodebD_EnodebConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void EnodebD_EnodebConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.EnodebD.EnodebConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_class_.ClearToEmpty();
  ip_address_.ClearToEmpty();
  ::memset(&earfcndl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cell_id_) -
      reinterpret_cast<char*>(&earfcndl_)) + sizeof(cell_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnodebD_EnodebConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 earfcndl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          earfcndl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 subframe_assignment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          subframe_assignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 special_subframe_pattern = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          special_subframe_pattern_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pci = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pci_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool transmit_enabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          transmit_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_class = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_device_class();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.EnodebD.EnodebConfig.device_class"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bandwidth_mhz = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          bandwidth_mhz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tac = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          tac_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cell_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip_address = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.EnodebD.EnodebConfig.ip_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnodebD_EnodebConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.EnodebD.EnodebConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 earfcndl = 1;
  if (this->earfcndl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_earfcndl(), target);
  }

  // int32 subframe_assignment = 2;
  if (this->subframe_assignment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_subframe_assignment(), target);
  }

  // int32 special_subframe_pattern = 3;
  if (this->special_subframe_pattern() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_special_subframe_pattern(), target);
  }

  // int32 pci = 4;
  if (this->pci() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_pci(), target);
  }

  // bool transmit_enabled = 5;
  if (this->transmit_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_transmit_enabled(), target);
  }

  // string device_class = 6;
  if (this->device_class().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_class().data(), static_cast<int>(this->_internal_device_class().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.EnodebD.EnodebConfig.device_class");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_device_class(), target);
  }

  // int32 bandwidth_mhz = 7;
  if (this->bandwidth_mhz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_bandwidth_mhz(), target);
  }

  // int32 tac = 8;
  if (this->tac() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_tac(), target);
  }

  // int32 cell_id = 9;
  if (this->cell_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_cell_id(), target);
  }

  // string ip_address = 10;
  if (this->ip_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.EnodebD.EnodebConfig.ip_address");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_ip_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.EnodebD.EnodebConfig)
  return target;
}

size_t EnodebD_EnodebConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.EnodebD.EnodebConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_class = 6;
  if (this->device_class().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_class());
  }

  // string ip_address = 10;
  if (this->ip_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  // int32 earfcndl = 1;
  if (this->earfcndl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_earfcndl());
  }

  // int32 subframe_assignment = 2;
  if (this->subframe_assignment() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_subframe_assignment());
  }

  // int32 special_subframe_pattern = 3;
  if (this->special_subframe_pattern() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_special_subframe_pattern());
  }

  // int32 pci = 4;
  if (this->pci() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pci());
  }

  // bool transmit_enabled = 5;
  if (this->transmit_enabled() != 0) {
    total_size += 1 + 1;
  }

  // int32 bandwidth_mhz = 7;
  if (this->bandwidth_mhz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bandwidth_mhz());
  }

  // int32 tac = 8;
  if (this->tac() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tac());
  }

  // int32 cell_id = 9;
  if (this->cell_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cell_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnodebD_EnodebConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.EnodebD.EnodebConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const EnodebD_EnodebConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnodebD_EnodebConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.EnodebD.EnodebConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.EnodebD.EnodebConfig)
    MergeFrom(*source);
  }
}

void EnodebD_EnodebConfig::MergeFrom(const EnodebD_EnodebConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.EnodebD.EnodebConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_class().size() > 0) {
    _internal_set_device_class(from._internal_device_class());
  }
  if (from.ip_address().size() > 0) {
    _internal_set_ip_address(from._internal_ip_address());
  }
  if (from.earfcndl() != 0) {
    _internal_set_earfcndl(from._internal_earfcndl());
  }
  if (from.subframe_assignment() != 0) {
    _internal_set_subframe_assignment(from._internal_subframe_assignment());
  }
  if (from.special_subframe_pattern() != 0) {
    _internal_set_special_subframe_pattern(from._internal_special_subframe_pattern());
  }
  if (from.pci() != 0) {
    _internal_set_pci(from._internal_pci());
  }
  if (from.transmit_enabled() != 0) {
    _internal_set_transmit_enabled(from._internal_transmit_enabled());
  }
  if (from.bandwidth_mhz() != 0) {
    _internal_set_bandwidth_mhz(from._internal_bandwidth_mhz());
  }
  if (from.tac() != 0) {
    _internal_set_tac(from._internal_tac());
  }
  if (from.cell_id() != 0) {
    _internal_set_cell_id(from._internal_cell_id());
  }
}

void EnodebD_EnodebConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.EnodebD.EnodebConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnodebD_EnodebConfig::CopyFrom(const EnodebD_EnodebConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.EnodebD.EnodebConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnodebD_EnodebConfig::IsInitialized() const {
  return true;
}

void EnodebD_EnodebConfig::InternalSwap(EnodebD_EnodebConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_class_.Swap(&other->device_class_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_address_.Swap(&other->ip_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnodebD_EnodebConfig, cell_id_)
      + sizeof(EnodebD_EnodebConfig::cell_id_)
      - PROTOBUF_FIELD_OFFSET(EnodebD_EnodebConfig, earfcndl_)>(
          reinterpret_cast<char*>(&earfcndl_),
          reinterpret_cast<char*>(&other->earfcndl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnodebD_EnodebConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

EnodebD_EnbConfigsBySerialEntry_DoNotUse::EnodebD_EnbConfigsBySerialEntry_DoNotUse() {}
EnodebD_EnbConfigsBySerialEntry_DoNotUse::EnodebD_EnbConfigsBySerialEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void EnodebD_EnbConfigsBySerialEntry_DoNotUse::MergeFrom(const EnodebD_EnbConfigsBySerialEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata EnodebD_EnbConfigsBySerialEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void EnodebD_EnbConfigsBySerialEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class EnodebD::_Internal {
 public:
  static const ::magma::mconfig::EnodebD_TDDConfig& tdd_config(const EnodebD* msg);
  static const ::magma::mconfig::EnodebD_FDDConfig& fdd_config(const EnodebD* msg);
};

const ::magma::mconfig::EnodebD_TDDConfig&
EnodebD::_Internal::tdd_config(const EnodebD* msg) {
  return *msg->tdd_config_;
}
const ::magma::mconfig::EnodebD_FDDConfig&
EnodebD::_Internal::fdd_config(const EnodebD* msg) {
  return *msg->fdd_config_;
}
EnodebD::EnodebD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arfcn_2g_(arena),
  enb_configs_by_serial_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.EnodebD)
}
EnodebD::EnodebD(const EnodebD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arfcn_2g_(from.arfcn_2g_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enb_configs_by_serial_.MergeFrom(from.enb_configs_by_serial_);
  plmnid_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_plmnid_list().empty()) {
    plmnid_list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_plmnid_list(), 
      GetArena());
  }
  if (from._internal_has_tdd_config()) {
    tdd_config_ = new ::magma::mconfig::EnodebD_TDDConfig(*from.tdd_config_);
  } else {
    tdd_config_ = nullptr;
  }
  if (from._internal_has_fdd_config()) {
    fdd_config_ = new ::magma::mconfig::EnodebD_FDDConfig(*from.fdd_config_);
  } else {
    fdd_config_ = nullptr;
  }
  ::memcpy(&log_level_, &from.log_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&csfb_rat_) -
    reinterpret_cast<char*>(&log_level_)) + sizeof(csfb_rat_));
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.EnodebD)
}

void EnodebD::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnodebD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  plmnid_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&tdd_config_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&csfb_rat_) -
      reinterpret_cast<char*>(&tdd_config_)) + sizeof(csfb_rat_));
}

EnodebD::~EnodebD() {
  // @@protoc_insertion_point(destructor:magma.mconfig.EnodebD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnodebD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  plmnid_list_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tdd_config_;
  if (this != internal_default_instance()) delete fdd_config_;
}

void EnodebD::ArenaDtor(void* object) {
  EnodebD* _this = reinterpret_cast< EnodebD* >(object);
  (void)_this;
}
void EnodebD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnodebD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnodebD& EnodebD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnodebD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void EnodebD::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.EnodebD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arfcn_2g_.Clear();
  enb_configs_by_serial_.Clear();
  plmnid_list_.ClearToEmpty();
  if (GetArena() == nullptr && tdd_config_ != nullptr) {
    delete tdd_config_;
  }
  tdd_config_ = nullptr;
  if (GetArena() == nullptr && fdd_config_ != nullptr) {
    delete fdd_config_;
  }
  fdd_config_ = nullptr;
  ::memset(&log_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&csfb_rat_) -
      reinterpret_cast<char*>(&log_level_)) + sizeof(csfb_rat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnodebD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .magma.orc8r.LogLevel log_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_log_level(static_cast<::magma::orc8r::LogLevel>(val));
        } else goto handle_unusual;
        continue;
      // int32 pci = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pci_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 earfcndl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          earfcndl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bandwidth_mhz = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bandwidth_mhz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string plmnid_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_plmnid_list();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.EnodebD.plmnid_list"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 subframe_assignment = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          subframe_assignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 special_subframe_pattern = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          special_subframe_pattern_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool allow_enodeb_transmit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          allow_enodeb_transmit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tac = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          tac_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .magma.mconfig.EnodebD.CSFBRat csfb_rat = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_csfb_rat(static_cast<::magma::mconfig::EnodebD_CSFBRat>(val));
        } else goto handle_unusual;
        continue;
      // repeated int32 arfcn_2g = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_arfcn_2g(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          _internal_add_arfcn_2g(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .magma.mconfig.EnodebD.TDDConfig tdd_config = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tdd_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .magma.mconfig.EnodebD.FDDConfig fdd_config = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_fdd_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .magma.mconfig.EnodebD.EnodebConfig> enb_configs_by_serial = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&enb_configs_by_serial_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnodebD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.EnodebD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .magma.orc8r.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_log_level(), target);
  }

  // int32 pci = 2;
  if (this->pci() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pci(), target);
  }

  // int32 earfcndl = 3;
  if (this->earfcndl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_earfcndl(), target);
  }

  // int32 bandwidth_mhz = 4;
  if (this->bandwidth_mhz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bandwidth_mhz(), target);
  }

  // string plmnid_list = 5;
  if (this->plmnid_list().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_plmnid_list().data(), static_cast<int>(this->_internal_plmnid_list().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.EnodebD.plmnid_list");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_plmnid_list(), target);
  }

  // int32 subframe_assignment = 6;
  if (this->subframe_assignment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_subframe_assignment(), target);
  }

  // int32 special_subframe_pattern = 7;
  if (this->special_subframe_pattern() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_special_subframe_pattern(), target);
  }

  // bool allow_enodeb_transmit = 8;
  if (this->allow_enodeb_transmit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_allow_enodeb_transmit(), target);
  }

  // int32 tac = 9;
  if (this->tac() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_tac(), target);
  }

  // .magma.mconfig.EnodebD.CSFBRat csfb_rat = 10;
  if (this->csfb_rat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_csfb_rat(), target);
  }

  // repeated int32 arfcn_2g = 11;
  {
    int byte_size = _arfcn_2g_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          11, _internal_arfcn_2g(), byte_size, target);
    }
  }

  // .magma.mconfig.EnodebD.TDDConfig tdd_config = 12;
  if (this->has_tdd_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::tdd_config(this), target, stream);
  }

  // .magma.mconfig.EnodebD.FDDConfig fdd_config = 13;
  if (this->has_fdd_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::fdd_config(this), target, stream);
  }

  // map<string, .magma.mconfig.EnodebD.EnodebConfig> enb_configs_by_serial = 14;
  if (!this->_internal_enb_configs_by_serial().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::magma::mconfig::EnodebD_EnodebConfig >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "magma.mconfig.EnodebD.EnbConfigsBySerialEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_enb_configs_by_serial().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_enb_configs_by_serial().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::magma::mconfig::EnodebD_EnodebConfig >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::magma::mconfig::EnodebD_EnodebConfig >::const_iterator
          it = this->_internal_enb_configs_by_serial().begin();
          it != this->_internal_enb_configs_by_serial().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = EnodebD_EnbConfigsBySerialEntry_DoNotUse::Funcs::InternalSerialize(14, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::magma::mconfig::EnodebD_EnodebConfig >::const_iterator
          it = this->_internal_enb_configs_by_serial().begin();
          it != this->_internal_enb_configs_by_serial().end(); ++it) {
        target = EnodebD_EnbConfigsBySerialEntry_DoNotUse::Funcs::InternalSerialize(14, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.EnodebD)
  return target;
}

size_t EnodebD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.EnodebD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 arfcn_2g = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->arfcn_2g_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arfcn_2g_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, .magma.mconfig.EnodebD.EnodebConfig> enb_configs_by_serial = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_enb_configs_by_serial_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::magma::mconfig::EnodebD_EnodebConfig >::const_iterator
      it = this->_internal_enb_configs_by_serial().begin();
      it != this->_internal_enb_configs_by_serial().end(); ++it) {
    total_size += EnodebD_EnbConfigsBySerialEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string plmnid_list = 5;
  if (this->plmnid_list().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plmnid_list());
  }

  // .magma.mconfig.EnodebD.TDDConfig tdd_config = 12;
  if (this->has_tdd_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tdd_config_);
  }

  // .magma.mconfig.EnodebD.FDDConfig fdd_config = 13;
  if (this->has_fdd_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fdd_config_);
  }

  // .magma.orc8r.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_log_level());
  }

  // int32 pci = 2;
  if (this->pci() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pci());
  }

  // int32 earfcndl = 3;
  if (this->earfcndl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_earfcndl());
  }

  // int32 bandwidth_mhz = 4;
  if (this->bandwidth_mhz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bandwidth_mhz());
  }

  // int32 subframe_assignment = 6;
  if (this->subframe_assignment() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_subframe_assignment());
  }

  // int32 special_subframe_pattern = 7;
  if (this->special_subframe_pattern() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_special_subframe_pattern());
  }

  // bool allow_enodeb_transmit = 8;
  if (this->allow_enodeb_transmit() != 0) {
    total_size += 1 + 1;
  }

  // int32 tac = 9;
  if (this->tac() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tac());
  }

  // .magma.mconfig.EnodebD.CSFBRat csfb_rat = 10;
  if (this->csfb_rat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_csfb_rat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnodebD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.EnodebD)
  GOOGLE_DCHECK_NE(&from, this);
  const EnodebD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnodebD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.EnodebD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.EnodebD)
    MergeFrom(*source);
  }
}

void EnodebD::MergeFrom(const EnodebD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.EnodebD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arfcn_2g_.MergeFrom(from.arfcn_2g_);
  enb_configs_by_serial_.MergeFrom(from.enb_configs_by_serial_);
  if (from.plmnid_list().size() > 0) {
    _internal_set_plmnid_list(from._internal_plmnid_list());
  }
  if (from.has_tdd_config()) {
    _internal_mutable_tdd_config()->::magma::mconfig::EnodebD_TDDConfig::MergeFrom(from._internal_tdd_config());
  }
  if (from.has_fdd_config()) {
    _internal_mutable_fdd_config()->::magma::mconfig::EnodebD_FDDConfig::MergeFrom(from._internal_fdd_config());
  }
  if (from.log_level() != 0) {
    _internal_set_log_level(from._internal_log_level());
  }
  if (from.pci() != 0) {
    _internal_set_pci(from._internal_pci());
  }
  if (from.earfcndl() != 0) {
    _internal_set_earfcndl(from._internal_earfcndl());
  }
  if (from.bandwidth_mhz() != 0) {
    _internal_set_bandwidth_mhz(from._internal_bandwidth_mhz());
  }
  if (from.subframe_assignment() != 0) {
    _internal_set_subframe_assignment(from._internal_subframe_assignment());
  }
  if (from.special_subframe_pattern() != 0) {
    _internal_set_special_subframe_pattern(from._internal_special_subframe_pattern());
  }
  if (from.allow_enodeb_transmit() != 0) {
    _internal_set_allow_enodeb_transmit(from._internal_allow_enodeb_transmit());
  }
  if (from.tac() != 0) {
    _internal_set_tac(from._internal_tac());
  }
  if (from.csfb_rat() != 0) {
    _internal_set_csfb_rat(from._internal_csfb_rat());
  }
}

void EnodebD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.EnodebD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnodebD::CopyFrom(const EnodebD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.EnodebD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnodebD::IsInitialized() const {
  return true;
}

void EnodebD::InternalSwap(EnodebD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arfcn_2g_.InternalSwap(&other->arfcn_2g_);
  enb_configs_by_serial_.Swap(&other->enb_configs_by_serial_);
  plmnid_list_.Swap(&other->plmnid_list_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnodebD, csfb_rat_)
      + sizeof(EnodebD::csfb_rat_)
      - PROTOBUF_FIELD_OFFSET(EnodebD, tdd_config_)>(
          reinterpret_cast<char*>(&tdd_config_),
          reinterpret_cast<char*>(&other->tdd_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnodebD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PipelineD_AllowedGrePeer::_Internal {
 public:
};

PipelineD_AllowedGrePeer::PipelineD_AllowedGrePeer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.PipelineD.AllowedGrePeer)
}
PipelineD_AllowedGrePeer::PipelineD_AllowedGrePeer(const PipelineD_AllowedGrePeer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArena());
  }
  key_ = from.key_;
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.PipelineD.AllowedGrePeer)
}

void PipelineD_AllowedGrePeer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PipelineD_AllowedGrePeer_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_ = 0u;
}

PipelineD_AllowedGrePeer::~PipelineD_AllowedGrePeer() {
  // @@protoc_insertion_point(destructor:magma.mconfig.PipelineD.AllowedGrePeer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PipelineD_AllowedGrePeer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PipelineD_AllowedGrePeer::ArenaDtor(void* object) {
  PipelineD_AllowedGrePeer* _this = reinterpret_cast< PipelineD_AllowedGrePeer* >(object);
  (void)_this;
}
void PipelineD_AllowedGrePeer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PipelineD_AllowedGrePeer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PipelineD_AllowedGrePeer& PipelineD_AllowedGrePeer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PipelineD_AllowedGrePeer_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void PipelineD_AllowedGrePeer::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.PipelineD.AllowedGrePeer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty();
  key_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PipelineD_AllowedGrePeer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.PipelineD.AllowedGrePeer.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PipelineD_AllowedGrePeer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.PipelineD.AllowedGrePeer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.PipelineD.AllowedGrePeer.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // uint32 key = 2;
  if (this->key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.PipelineD.AllowedGrePeer)
  return target;
}

size_t PipelineD_AllowedGrePeer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.PipelineD.AllowedGrePeer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // uint32 key = 2;
  if (this->key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PipelineD_AllowedGrePeer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.PipelineD.AllowedGrePeer)
  GOOGLE_DCHECK_NE(&from, this);
  const PipelineD_AllowedGrePeer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PipelineD_AllowedGrePeer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.PipelineD.AllowedGrePeer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.PipelineD.AllowedGrePeer)
    MergeFrom(*source);
  }
}

void PipelineD_AllowedGrePeer::MergeFrom(const PipelineD_AllowedGrePeer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.PipelineD.AllowedGrePeer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.key() != 0) {
    _internal_set_key(from._internal_key());
  }
}

void PipelineD_AllowedGrePeer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.PipelineD.AllowedGrePeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PipelineD_AllowedGrePeer::CopyFrom(const PipelineD_AllowedGrePeer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.PipelineD.AllowedGrePeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PipelineD_AllowedGrePeer::IsInitialized() const {
  return true;
}

void PipelineD_AllowedGrePeer::InternalSwap(PipelineD_AllowedGrePeer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(key_, other->key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PipelineD_AllowedGrePeer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PipelineD_IPDRExportDst::_Internal {
 public:
};

PipelineD_IPDRExportDst::PipelineD_IPDRExportDst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.PipelineD.IPDRExportDst)
}
PipelineD_IPDRExportDst::PipelineD_IPDRExportDst(const PipelineD_IPDRExportDst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.PipelineD.IPDRExportDst)
}

void PipelineD_IPDRExportDst::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PipelineD_IPDRExportDst_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

PipelineD_IPDRExportDst::~PipelineD_IPDRExportDst() {
  // @@protoc_insertion_point(destructor:magma.mconfig.PipelineD.IPDRExportDst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PipelineD_IPDRExportDst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PipelineD_IPDRExportDst::ArenaDtor(void* object) {
  PipelineD_IPDRExportDst* _this = reinterpret_cast< PipelineD_IPDRExportDst* >(object);
  (void)_this;
}
void PipelineD_IPDRExportDst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PipelineD_IPDRExportDst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PipelineD_IPDRExportDst& PipelineD_IPDRExportDst::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PipelineD_IPDRExportDst_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void PipelineD_IPDRExportDst::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.PipelineD.IPDRExportDst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty();
  port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PipelineD_IPDRExportDst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.PipelineD.IPDRExportDst.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PipelineD_IPDRExportDst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.PipelineD.IPDRExportDst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.PipelineD.IPDRExportDst.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.PipelineD.IPDRExportDst)
  return target;
}

size_t PipelineD_IPDRExportDst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.PipelineD.IPDRExportDst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PipelineD_IPDRExportDst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.PipelineD.IPDRExportDst)
  GOOGLE_DCHECK_NE(&from, this);
  const PipelineD_IPDRExportDst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PipelineD_IPDRExportDst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.PipelineD.IPDRExportDst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.PipelineD.IPDRExportDst)
    MergeFrom(*source);
  }
}

void PipelineD_IPDRExportDst::MergeFrom(const PipelineD_IPDRExportDst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.PipelineD.IPDRExportDst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void PipelineD_IPDRExportDst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.PipelineD.IPDRExportDst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PipelineD_IPDRExportDst::CopyFrom(const PipelineD_IPDRExportDst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.PipelineD.IPDRExportDst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PipelineD_IPDRExportDst::IsInitialized() const {
  return true;
}

void PipelineD_IPDRExportDst::InternalSwap(PipelineD_IPDRExportDst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PipelineD_IPDRExportDst::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PipelineD_LiUes::_Internal {
 public:
};

PipelineD_LiUes::PipelineD_LiUes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  imsis_(arena),
  msisdns_(arena),
  macs_(arena),
  ips_(arena),
  imeis_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.PipelineD.LiUes)
}
PipelineD_LiUes::PipelineD_LiUes(const PipelineD_LiUes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      imsis_(from.imsis_),
      msisdns_(from.msisdns_),
      macs_(from.macs_),
      ips_(from.ips_),
      imeis_(from.imeis_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.PipelineD.LiUes)
}

void PipelineD_LiUes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PipelineD_LiUes_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
}

PipelineD_LiUes::~PipelineD_LiUes() {
  // @@protoc_insertion_point(destructor:magma.mconfig.PipelineD.LiUes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PipelineD_LiUes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PipelineD_LiUes::ArenaDtor(void* object) {
  PipelineD_LiUes* _this = reinterpret_cast< PipelineD_LiUes* >(object);
  (void)_this;
}
void PipelineD_LiUes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PipelineD_LiUes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PipelineD_LiUes& PipelineD_LiUes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PipelineD_LiUes_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void PipelineD_LiUes::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.PipelineD.LiUes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imsis_.Clear();
  msisdns_.Clear();
  macs_.Clear();
  ips_.Clear();
  imeis_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PipelineD_LiUes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string imsis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_imsis();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.PipelineD.LiUes.imsis"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string msisdns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_msisdns();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.PipelineD.LiUes.msisdns"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string macs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_macs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.PipelineD.LiUes.macs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string ips = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ips();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.PipelineD.LiUes.ips"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string imeis = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_imeis();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.PipelineD.LiUes.imeis"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PipelineD_LiUes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.PipelineD.LiUes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string imsis = 1;
  for (int i = 0, n = this->_internal_imsis_size(); i < n; i++) {
    const auto& s = this->_internal_imsis(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.PipelineD.LiUes.imsis");
    target = stream->WriteString(1, s, target);
  }

  // repeated string msisdns = 2;
  for (int i = 0, n = this->_internal_msisdns_size(); i < n; i++) {
    const auto& s = this->_internal_msisdns(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.PipelineD.LiUes.msisdns");
    target = stream->WriteString(2, s, target);
  }

  // repeated string macs = 3;
  for (int i = 0, n = this->_internal_macs_size(); i < n; i++) {
    const auto& s = this->_internal_macs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.PipelineD.LiUes.macs");
    target = stream->WriteString(3, s, target);
  }

  // repeated string ips = 4;
  for (int i = 0, n = this->_internal_ips_size(); i < n; i++) {
    const auto& s = this->_internal_ips(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.PipelineD.LiUes.ips");
    target = stream->WriteString(4, s, target);
  }

  // repeated string imeis = 5;
  for (int i = 0, n = this->_internal_imeis_size(); i < n; i++) {
    const auto& s = this->_internal_imeis(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.PipelineD.LiUes.imeis");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.PipelineD.LiUes)
  return target;
}

size_t PipelineD_LiUes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.PipelineD.LiUes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string imsis = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(imsis_.size());
  for (int i = 0, n = imsis_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      imsis_.Get(i));
  }

  // repeated string msisdns = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(msisdns_.size());
  for (int i = 0, n = msisdns_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      msisdns_.Get(i));
  }

  // repeated string macs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(macs_.size());
  for (int i = 0, n = macs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      macs_.Get(i));
  }

  // repeated string ips = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ips_.size());
  for (int i = 0, n = ips_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ips_.Get(i));
  }

  // repeated string imeis = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(imeis_.size());
  for (int i = 0, n = imeis_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      imeis_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PipelineD_LiUes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.PipelineD.LiUes)
  GOOGLE_DCHECK_NE(&from, this);
  const PipelineD_LiUes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PipelineD_LiUes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.PipelineD.LiUes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.PipelineD.LiUes)
    MergeFrom(*source);
  }
}

void PipelineD_LiUes::MergeFrom(const PipelineD_LiUes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.PipelineD.LiUes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  imsis_.MergeFrom(from.imsis_);
  msisdns_.MergeFrom(from.msisdns_);
  macs_.MergeFrom(from.macs_);
  ips_.MergeFrom(from.ips_);
  imeis_.MergeFrom(from.imeis_);
}

void PipelineD_LiUes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.PipelineD.LiUes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PipelineD_LiUes::CopyFrom(const PipelineD_LiUes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.PipelineD.LiUes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PipelineD_LiUes::IsInitialized() const {
  return true;
}

void PipelineD_LiUes::InternalSwap(PipelineD_LiUes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  imsis_.InternalSwap(&other->imsis_);
  msisdns_.InternalSwap(&other->msisdns_);
  macs_.InternalSwap(&other->macs_);
  ips_.InternalSwap(&other->ips_);
  imeis_.InternalSwap(&other->imeis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PipelineD_LiUes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PipelineD_HEConfig::_Internal {
 public:
};

PipelineD_HEConfig::PipelineD_HEConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.PipelineD.HEConfig)
}
PipelineD_HEConfig::PipelineD_HEConfig(const PipelineD_HEConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encryption_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encryption_key().empty()) {
    encryption_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encryption_key(), 
      GetArena());
  }
  hmac_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hmac_key().empty()) {
    hmac_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hmac_key(), 
      GetArena());
  }
  ::memcpy(&enable_header_enrichment_, &from.enable_header_enrichment_,
    static_cast<size_t>(reinterpret_cast<char*>(&encodingtype_) -
    reinterpret_cast<char*>(&enable_header_enrichment_)) + sizeof(encodingtype_));
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.PipelineD.HEConfig)
}

void PipelineD_HEConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PipelineD_HEConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  encryption_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hmac_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&enable_header_enrichment_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&encodingtype_) -
      reinterpret_cast<char*>(&enable_header_enrichment_)) + sizeof(encodingtype_));
}

PipelineD_HEConfig::~PipelineD_HEConfig() {
  // @@protoc_insertion_point(destructor:magma.mconfig.PipelineD.HEConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PipelineD_HEConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encryption_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hmac_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PipelineD_HEConfig::ArenaDtor(void* object) {
  PipelineD_HEConfig* _this = reinterpret_cast< PipelineD_HEConfig* >(object);
  (void)_this;
}
void PipelineD_HEConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PipelineD_HEConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PipelineD_HEConfig& PipelineD_HEConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PipelineD_HEConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void PipelineD_HEConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.PipelineD.HEConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encryption_key_.ClearToEmpty();
  hmac_key_.ClearToEmpty();
  ::memset(&enable_header_enrichment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encodingtype_) -
      reinterpret_cast<char*>(&enable_header_enrichment_)) + sizeof(encodingtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PipelineD_HEConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable_header_enrichment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_header_enrichment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_encryption = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enable_encryption_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .magma.mconfig.PipelineD.HEConfig.EncryptionAlgorithm encryptionAlgorithm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encryptionalgorithm(static_cast<::magma::mconfig::PipelineD_HEConfig_EncryptionAlgorithm>(val));
        } else goto handle_unusual;
        continue;
      // .magma.mconfig.PipelineD.HEConfig.HashFunction hashFunction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_hashfunction(static_cast<::magma::mconfig::PipelineD_HEConfig_HashFunction>(val));
        } else goto handle_unusual;
        continue;
      // .magma.mconfig.PipelineD.HEConfig.EncodingType encodingType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encodingtype(static_cast<::magma::mconfig::PipelineD_HEConfig_EncodingType>(val));
        } else goto handle_unusual;
        continue;
      // string encryption_key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_encryption_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.PipelineD.HEConfig.encryption_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hmac_key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_hmac_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.PipelineD.HEConfig.hmac_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PipelineD_HEConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.PipelineD.HEConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable_header_enrichment = 1;
  if (this->enable_header_enrichment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_header_enrichment(), target);
  }

  // bool enable_encryption = 2;
  if (this->enable_encryption() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_encryption(), target);
  }

  // .magma.mconfig.PipelineD.HEConfig.EncryptionAlgorithm encryptionAlgorithm = 3;
  if (this->encryptionalgorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_encryptionalgorithm(), target);
  }

  // .magma.mconfig.PipelineD.HEConfig.HashFunction hashFunction = 4;
  if (this->hashfunction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_hashfunction(), target);
  }

  // .magma.mconfig.PipelineD.HEConfig.EncodingType encodingType = 5;
  if (this->encodingtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_encodingtype(), target);
  }

  // string encryption_key = 6;
  if (this->encryption_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encryption_key().data(), static_cast<int>(this->_internal_encryption_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.PipelineD.HEConfig.encryption_key");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_encryption_key(), target);
  }

  // string hmac_key = 7;
  if (this->hmac_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hmac_key().data(), static_cast<int>(this->_internal_hmac_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.PipelineD.HEConfig.hmac_key");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_hmac_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.PipelineD.HEConfig)
  return target;
}

size_t PipelineD_HEConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.PipelineD.HEConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string encryption_key = 6;
  if (this->encryption_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encryption_key());
  }

  // string hmac_key = 7;
  if (this->hmac_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hmac_key());
  }

  // bool enable_header_enrichment = 1;
  if (this->enable_header_enrichment() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_encryption = 2;
  if (this->enable_encryption() != 0) {
    total_size += 1 + 1;
  }

  // .magma.mconfig.PipelineD.HEConfig.EncryptionAlgorithm encryptionAlgorithm = 3;
  if (this->encryptionalgorithm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_encryptionalgorithm());
  }

  // .magma.mconfig.PipelineD.HEConfig.HashFunction hashFunction = 4;
  if (this->hashfunction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_hashfunction());
  }

  // .magma.mconfig.PipelineD.HEConfig.EncodingType encodingType = 5;
  if (this->encodingtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_encodingtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PipelineD_HEConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.PipelineD.HEConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PipelineD_HEConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PipelineD_HEConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.PipelineD.HEConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.PipelineD.HEConfig)
    MergeFrom(*source);
  }
}

void PipelineD_HEConfig::MergeFrom(const PipelineD_HEConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.PipelineD.HEConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.encryption_key().size() > 0) {
    _internal_set_encryption_key(from._internal_encryption_key());
  }
  if (from.hmac_key().size() > 0) {
    _internal_set_hmac_key(from._internal_hmac_key());
  }
  if (from.enable_header_enrichment() != 0) {
    _internal_set_enable_header_enrichment(from._internal_enable_header_enrichment());
  }
  if (from.enable_encryption() != 0) {
    _internal_set_enable_encryption(from._internal_enable_encryption());
  }
  if (from.encryptionalgorithm() != 0) {
    _internal_set_encryptionalgorithm(from._internal_encryptionalgorithm());
  }
  if (from.hashfunction() != 0) {
    _internal_set_hashfunction(from._internal_hashfunction());
  }
  if (from.encodingtype() != 0) {
    _internal_set_encodingtype(from._internal_encodingtype());
  }
}

void PipelineD_HEConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.PipelineD.HEConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PipelineD_HEConfig::CopyFrom(const PipelineD_HEConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.PipelineD.HEConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PipelineD_HEConfig::IsInitialized() const {
  return true;
}

void PipelineD_HEConfig::InternalSwap(PipelineD_HEConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  encryption_key_.Swap(&other->encryption_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hmac_key_.Swap(&other->hmac_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PipelineD_HEConfig, encodingtype_)
      + sizeof(PipelineD_HEConfig::encodingtype_)
      - PROTOBUF_FIELD_OFFSET(PipelineD_HEConfig, enable_header_enrichment_)>(
          reinterpret_cast<char*>(&enable_header_enrichment_),
          reinterpret_cast<char*>(&other->enable_header_enrichment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PipelineD_HEConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PipelineD::_Internal {
 public:
  static const ::magma::mconfig::PipelineD_IPDRExportDst& ipdr_export_dst(const PipelineD* msg);
  static const ::magma::mconfig::PipelineD_LiUes& li_ues(const PipelineD* msg);
  static const ::magma::mconfig::PipelineD_HEConfig& he_config(const PipelineD* msg);
};

const ::magma::mconfig::PipelineD_IPDRExportDst&
PipelineD::_Internal::ipdr_export_dst(const PipelineD* msg) {
  return *msg->ipdr_export_dst_;
}
const ::magma::mconfig::PipelineD_LiUes&
PipelineD::_Internal::li_ues(const PipelineD* msg) {
  return *msg->li_ues_;
}
const ::magma::mconfig::PipelineD_HEConfig&
PipelineD::_Internal::he_config(const PipelineD* msg) {
  return *msg->he_config_;
}
PipelineD::PipelineD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  services_(arena),
  allowed_gre_peers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.PipelineD)
}
PipelineD::PipelineD(const PipelineD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      services_(from.services_),
      allowed_gre_peers_(from.allowed_gre_peers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ue_ip_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ue_ip_block().empty()) {
    ue_ip_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ue_ip_block(), 
      GetArena());
  }
  default_rule_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_default_rule_id().empty()) {
    default_rule_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_default_rule_id(), 
      GetArena());
  }
  sgi_management_iface_vlan_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sgi_management_iface_vlan().empty()) {
    sgi_management_iface_vlan_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sgi_management_iface_vlan(), 
      GetArena());
  }
  sgi_management_iface_ip_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sgi_management_iface_ip_addr().empty()) {
    sgi_management_iface_ip_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sgi_management_iface_ip_addr(), 
      GetArena());
  }
  sgi_management_iface_gw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sgi_management_iface_gw().empty()) {
    sgi_management_iface_gw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sgi_management_iface_gw(), 
      GetArena());
  }
  if (from._internal_has_ipdr_export_dst()) {
    ipdr_export_dst_ = new ::magma::mconfig::PipelineD_IPDRExportDst(*from.ipdr_export_dst_);
  } else {
    ipdr_export_dst_ = nullptr;
  }
  if (from._internal_has_li_ues()) {
    li_ues_ = new ::magma::mconfig::PipelineD_LiUes(*from.li_ues_);
  } else {
    li_ues_ = nullptr;
  }
  if (from._internal_has_he_config()) {
    he_config_ = new ::magma::mconfig::PipelineD_HEConfig(*from.he_config_);
  } else {
    he_config_ = nullptr;
  }
  ::memcpy(&log_level_, &from.log_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&nat_enabled_) -
    reinterpret_cast<char*>(&log_level_)) + sizeof(nat_enabled_));
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.PipelineD)
}

void PipelineD::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PipelineD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  ue_ip_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default_rule_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sgi_management_iface_vlan_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sgi_management_iface_ip_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sgi_management_iface_gw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ipdr_export_dst_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&nat_enabled_) -
      reinterpret_cast<char*>(&ipdr_export_dst_)) + sizeof(nat_enabled_));
}

PipelineD::~PipelineD() {
  // @@protoc_insertion_point(destructor:magma.mconfig.PipelineD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PipelineD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ue_ip_block_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default_rule_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sgi_management_iface_vlan_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sgi_management_iface_ip_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sgi_management_iface_gw_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ipdr_export_dst_;
  if (this != internal_default_instance()) delete li_ues_;
  if (this != internal_default_instance()) delete he_config_;
}

void PipelineD::ArenaDtor(void* object) {
  PipelineD* _this = reinterpret_cast< PipelineD* >(object);
  (void)_this;
}
void PipelineD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PipelineD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PipelineD& PipelineD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PipelineD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void PipelineD::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.PipelineD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  services_.Clear();
  allowed_gre_peers_.Clear();
  ue_ip_block_.ClearToEmpty();
  default_rule_id_.ClearToEmpty();
  sgi_management_iface_vlan_.ClearToEmpty();
  sgi_management_iface_ip_addr_.ClearToEmpty();
  sgi_management_iface_gw_.ClearToEmpty();
  if (GetArena() == nullptr && ipdr_export_dst_ != nullptr) {
    delete ipdr_export_dst_;
  }
  ipdr_export_dst_ = nullptr;
  if (GetArena() == nullptr && li_ues_ != nullptr) {
    delete li_ues_;
  }
  li_ues_ = nullptr;
  if (GetArena() == nullptr && he_config_ != nullptr) {
    delete he_config_;
  }
  he_config_ = nullptr;
  ::memset(&log_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nat_enabled_) -
      reinterpret_cast<char*>(&log_level_)) + sizeof(nat_enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PipelineD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .magma.orc8r.LogLevel log_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_log_level(static_cast<::magma::orc8r::LogLevel>(val));
        } else goto handle_unusual;
        continue;
      // string ue_ip_block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ue_ip_block();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.PipelineD.ue_ip_block"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool nat_enabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          nat_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string default_rule_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_default_rule_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.PipelineD.default_rule_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .magma.mconfig.PipelineD.NetworkServices services = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_services(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_services(static_cast<::magma::mconfig::PipelineD_NetworkServices>(val));
        } else goto handle_unusual;
        continue;
      // repeated .magma.mconfig.PipelineD.AllowedGrePeer allowed_gre_peers = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_allowed_gre_peers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // .magma.mconfig.PipelineD.IPDRExportDst ipdr_export_dst = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipdr_export_dst(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .magma.mconfig.PipelineD.LiUes li_ues = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_li_ues(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sgi_management_iface_vlan = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_sgi_management_iface_vlan();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.PipelineD.sgi_management_iface_vlan"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sgi_management_iface_ip_addr = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_sgi_management_iface_ip_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.PipelineD.sgi_management_iface_ip_addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sgi_management_iface_gw = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_sgi_management_iface_gw();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.PipelineD.sgi_management_iface_gw"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .magma.mconfig.PipelineD.HEConfig he_config = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_he_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PipelineD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.PipelineD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .magma.orc8r.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_log_level(), target);
  }

  // string ue_ip_block = 2;
  if (this->ue_ip_block().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ue_ip_block().data(), static_cast<int>(this->_internal_ue_ip_block().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.PipelineD.ue_ip_block");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ue_ip_block(), target);
  }

  // bool nat_enabled = 3;
  if (this->nat_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_nat_enabled(), target);
  }

  // string default_rule_id = 6;
  if (this->default_rule_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_default_rule_id().data(), static_cast<int>(this->_internal_default_rule_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.PipelineD.default_rule_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_default_rule_id(), target);
  }

  // repeated .magma.mconfig.PipelineD.NetworkServices services = 8;
  {
    int byte_size = _services_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          8, services_, byte_size, target);
    }
  }

  // repeated .magma.mconfig.PipelineD.AllowedGrePeer allowed_gre_peers = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_allowed_gre_peers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_allowed_gre_peers(i), target, stream);
  }

  // .magma.mconfig.PipelineD.IPDRExportDst ipdr_export_dst = 10;
  if (this->has_ipdr_export_dst()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::ipdr_export_dst(this), target, stream);
  }

  // .magma.mconfig.PipelineD.LiUes li_ues = 12;
  if (this->has_li_ues()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::li_ues(this), target, stream);
  }

  // string sgi_management_iface_vlan = 13;
  if (this->sgi_management_iface_vlan().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sgi_management_iface_vlan().data(), static_cast<int>(this->_internal_sgi_management_iface_vlan().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.PipelineD.sgi_management_iface_vlan");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_sgi_management_iface_vlan(), target);
  }

  // string sgi_management_iface_ip_addr = 14;
  if (this->sgi_management_iface_ip_addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sgi_management_iface_ip_addr().data(), static_cast<int>(this->_internal_sgi_management_iface_ip_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.PipelineD.sgi_management_iface_ip_addr");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_sgi_management_iface_ip_addr(), target);
  }

  // string sgi_management_iface_gw = 15;
  if (this->sgi_management_iface_gw().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sgi_management_iface_gw().data(), static_cast<int>(this->_internal_sgi_management_iface_gw().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.PipelineD.sgi_management_iface_gw");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_sgi_management_iface_gw(), target);
  }

  // .magma.mconfig.PipelineD.HEConfig he_config = 17;
  if (this->has_he_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::he_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.PipelineD)
  return target;
}

size_t PipelineD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.PipelineD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .magma.mconfig.PipelineD.NetworkServices services = 8;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_services_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_services(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _services_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .magma.mconfig.PipelineD.AllowedGrePeer allowed_gre_peers = 9;
  total_size += 1UL * this->_internal_allowed_gre_peers_size();
  for (const auto& msg : this->allowed_gre_peers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ue_ip_block = 2;
  if (this->ue_ip_block().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ue_ip_block());
  }

  // string default_rule_id = 6;
  if (this->default_rule_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_default_rule_id());
  }

  // string sgi_management_iface_vlan = 13;
  if (this->sgi_management_iface_vlan().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sgi_management_iface_vlan());
  }

  // string sgi_management_iface_ip_addr = 14;
  if (this->sgi_management_iface_ip_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sgi_management_iface_ip_addr());
  }

  // string sgi_management_iface_gw = 15;
  if (this->sgi_management_iface_gw().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sgi_management_iface_gw());
  }

  // .magma.mconfig.PipelineD.IPDRExportDst ipdr_export_dst = 10;
  if (this->has_ipdr_export_dst()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ipdr_export_dst_);
  }

  // .magma.mconfig.PipelineD.LiUes li_ues = 12;
  if (this->has_li_ues()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *li_ues_);
  }

  // .magma.mconfig.PipelineD.HEConfig he_config = 17;
  if (this->has_he_config()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *he_config_);
  }

  // .magma.orc8r.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_log_level());
  }

  // bool nat_enabled = 3;
  if (this->nat_enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PipelineD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.PipelineD)
  GOOGLE_DCHECK_NE(&from, this);
  const PipelineD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PipelineD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.PipelineD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.PipelineD)
    MergeFrom(*source);
  }
}

void PipelineD::MergeFrom(const PipelineD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.PipelineD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  services_.MergeFrom(from.services_);
  allowed_gre_peers_.MergeFrom(from.allowed_gre_peers_);
  if (from.ue_ip_block().size() > 0) {
    _internal_set_ue_ip_block(from._internal_ue_ip_block());
  }
  if (from.default_rule_id().size() > 0) {
    _internal_set_default_rule_id(from._internal_default_rule_id());
  }
  if (from.sgi_management_iface_vlan().size() > 0) {
    _internal_set_sgi_management_iface_vlan(from._internal_sgi_management_iface_vlan());
  }
  if (from.sgi_management_iface_ip_addr().size() > 0) {
    _internal_set_sgi_management_iface_ip_addr(from._internal_sgi_management_iface_ip_addr());
  }
  if (from.sgi_management_iface_gw().size() > 0) {
    _internal_set_sgi_management_iface_gw(from._internal_sgi_management_iface_gw());
  }
  if (from.has_ipdr_export_dst()) {
    _internal_mutable_ipdr_export_dst()->::magma::mconfig::PipelineD_IPDRExportDst::MergeFrom(from._internal_ipdr_export_dst());
  }
  if (from.has_li_ues()) {
    _internal_mutable_li_ues()->::magma::mconfig::PipelineD_LiUes::MergeFrom(from._internal_li_ues());
  }
  if (from.has_he_config()) {
    _internal_mutable_he_config()->::magma::mconfig::PipelineD_HEConfig::MergeFrom(from._internal_he_config());
  }
  if (from.log_level() != 0) {
    _internal_set_log_level(from._internal_log_level());
  }
  if (from.nat_enabled() != 0) {
    _internal_set_nat_enabled(from._internal_nat_enabled());
  }
}

void PipelineD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.PipelineD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PipelineD::CopyFrom(const PipelineD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.PipelineD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PipelineD::IsInitialized() const {
  return true;
}

void PipelineD::InternalSwap(PipelineD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  services_.InternalSwap(&other->services_);
  allowed_gre_peers_.InternalSwap(&other->allowed_gre_peers_);
  ue_ip_block_.Swap(&other->ue_ip_block_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  default_rule_id_.Swap(&other->default_rule_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sgi_management_iface_vlan_.Swap(&other->sgi_management_iface_vlan_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sgi_management_iface_ip_addr_.Swap(&other->sgi_management_iface_ip_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sgi_management_iface_gw_.Swap(&other->sgi_management_iface_gw_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PipelineD, nat_enabled_)
      + sizeof(PipelineD::nat_enabled_)
      - PROTOBUF_FIELD_OFFSET(PipelineD, ipdr_export_dst_)>(
          reinterpret_cast<char*>(&ipdr_export_dst_),
          reinterpret_cast<char*>(&other->ipdr_export_dst_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PipelineD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SessionD::_Internal {
 public:
  static const ::magma::mconfig::WalletExhaustDetection& wallet_exhaust_detection(const SessionD* msg);
  static const ::magma::mconfig::SentryConfig& sentry_config(const SessionD* msg);
};

const ::magma::mconfig::WalletExhaustDetection&
SessionD::_Internal::wallet_exhaust_detection(const SessionD* msg) {
  return *msg->wallet_exhaust_detection_;
}
const ::magma::mconfig::SentryConfig&
SessionD::_Internal::sentry_config(const SessionD* msg) {
  return *msg->sentry_config_;
}
SessionD::SessionD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.SessionD)
}
SessionD::SessionD(const SessionD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_wallet_exhaust_detection()) {
    wallet_exhaust_detection_ = new ::magma::mconfig::WalletExhaustDetection(*from.wallet_exhaust_detection_);
  } else {
    wallet_exhaust_detection_ = nullptr;
  }
  if (from._internal_has_sentry_config()) {
    sentry_config_ = new ::magma::mconfig::SentryConfig(*from.sentry_config_);
  } else {
    sentry_config_ = nullptr;
  }
  ::memcpy(&log_level_, &from.log_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&gx_gy_relay_enabled_) -
    reinterpret_cast<char*>(&log_level_)) + sizeof(gx_gy_relay_enabled_));
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.SessionD)
}

void SessionD::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SessionD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&wallet_exhaust_detection_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&gx_gy_relay_enabled_) -
      reinterpret_cast<char*>(&wallet_exhaust_detection_)) + sizeof(gx_gy_relay_enabled_));
}

SessionD::~SessionD() {
  // @@protoc_insertion_point(destructor:magma.mconfig.SessionD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete wallet_exhaust_detection_;
  if (this != internal_default_instance()) delete sentry_config_;
}

void SessionD::ArenaDtor(void* object) {
  SessionD* _this = reinterpret_cast< SessionD* >(object);
  (void)_this;
}
void SessionD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionD& SessionD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void SessionD::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.SessionD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && wallet_exhaust_detection_ != nullptr) {
    delete wallet_exhaust_detection_;
  }
  wallet_exhaust_detection_ = nullptr;
  if (GetArena() == nullptr && sentry_config_ != nullptr) {
    delete sentry_config_;
  }
  sentry_config_ = nullptr;
  ::memset(&log_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gx_gy_relay_enabled_) -
      reinterpret_cast<char*>(&log_level_)) + sizeof(gx_gy_relay_enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .magma.orc8r.LogLevel log_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_log_level(static_cast<::magma::orc8r::LogLevel>(val));
        } else goto handle_unusual;
        continue;
      // bool relay_enabled = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          relay_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .magma.mconfig.WalletExhaustDetection wallet_exhaust_detection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_wallet_exhaust_detection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool gx_gy_relay_enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          gx_gy_relay_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .magma.mconfig.SentryConfig sentry_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sentry_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.SessionD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .magma.orc8r.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_log_level(), target);
  }

  // bool relay_enabled = 2 [deprecated = true];
  if (this->relay_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_relay_enabled(), target);
  }

  // .magma.mconfig.WalletExhaustDetection wallet_exhaust_detection = 3;
  if (this->has_wallet_exhaust_detection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::wallet_exhaust_detection(this), target, stream);
  }

  // bool gx_gy_relay_enabled = 4;
  if (this->gx_gy_relay_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_gx_gy_relay_enabled(), target);
  }

  // .magma.mconfig.SentryConfig sentry_config = 5;
  if (this->has_sentry_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sentry_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.SessionD)
  return target;
}

size_t SessionD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.SessionD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .magma.mconfig.WalletExhaustDetection wallet_exhaust_detection = 3;
  if (this->has_wallet_exhaust_detection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wallet_exhaust_detection_);
  }

  // .magma.mconfig.SentryConfig sentry_config = 5;
  if (this->has_sentry_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sentry_config_);
  }

  // .magma.orc8r.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_log_level());
  }

  // bool relay_enabled = 2 [deprecated = true];
  if (this->relay_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool gx_gy_relay_enabled = 4;
  if (this->gx_gy_relay_enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.SessionD)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.SessionD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.SessionD)
    MergeFrom(*source);
  }
}

void SessionD::MergeFrom(const SessionD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.SessionD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_wallet_exhaust_detection()) {
    _internal_mutable_wallet_exhaust_detection()->::magma::mconfig::WalletExhaustDetection::MergeFrom(from._internal_wallet_exhaust_detection());
  }
  if (from.has_sentry_config()) {
    _internal_mutable_sentry_config()->::magma::mconfig::SentryConfig::MergeFrom(from._internal_sentry_config());
  }
  if (from.log_level() != 0) {
    _internal_set_log_level(from._internal_log_level());
  }
  if (from.relay_enabled() != 0) {
    _internal_set_relay_enabled(from._internal_relay_enabled());
  }
  if (from.gx_gy_relay_enabled() != 0) {
    _internal_set_gx_gy_relay_enabled(from._internal_gx_gy_relay_enabled());
  }
}

void SessionD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.SessionD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionD::CopyFrom(const SessionD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.SessionD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionD::IsInitialized() const {
  return true;
}

void SessionD::InternalSwap(SessionD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionD, gx_gy_relay_enabled_)
      + sizeof(SessionD::gx_gy_relay_enabled_)
      - PROTOBUF_FIELD_OFFSET(SessionD, wallet_exhaust_detection_)>(
          reinterpret_cast<char*>(&wallet_exhaust_detection_),
          reinterpret_cast<char*>(&other->wallet_exhaust_detection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WalletExhaustDetection::_Internal {
 public:
};

WalletExhaustDetection::WalletExhaustDetection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.WalletExhaustDetection)
}
WalletExhaustDetection::WalletExhaustDetection(const WalletExhaustDetection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&terminate_on_exhaust_, &from.terminate_on_exhaust_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_ms_) -
    reinterpret_cast<char*>(&terminate_on_exhaust_)) + sizeof(timeout_ms_));
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.WalletExhaustDetection)
}

void WalletExhaustDetection::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&terminate_on_exhaust_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&timeout_ms_) -
      reinterpret_cast<char*>(&terminate_on_exhaust_)) + sizeof(timeout_ms_));
}

WalletExhaustDetection::~WalletExhaustDetection() {
  // @@protoc_insertion_point(destructor:magma.mconfig.WalletExhaustDetection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WalletExhaustDetection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WalletExhaustDetection::ArenaDtor(void* object) {
  WalletExhaustDetection* _this = reinterpret_cast< WalletExhaustDetection* >(object);
  (void)_this;
}
void WalletExhaustDetection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WalletExhaustDetection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WalletExhaustDetection& WalletExhaustDetection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WalletExhaustDetection_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void WalletExhaustDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.WalletExhaustDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&terminate_on_exhaust_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_ms_) -
      reinterpret_cast<char*>(&terminate_on_exhaust_)) + sizeof(timeout_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WalletExhaustDetection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool terminate_on_exhaust = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          terminate_on_exhaust_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .magma.mconfig.WalletExhaustDetection.Method method = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_method(static_cast<::magma::mconfig::WalletExhaustDetection_Method>(val));
        } else goto handle_unusual;
        continue;
      // uint32 timeout_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WalletExhaustDetection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.WalletExhaustDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool terminate_on_exhaust = 1;
  if (this->terminate_on_exhaust() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_terminate_on_exhaust(), target);
  }

  // .magma.mconfig.WalletExhaustDetection.Method method = 2;
  if (this->method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_method(), target);
  }

  // uint32 timeout_ms = 3;
  if (this->timeout_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_timeout_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.WalletExhaustDetection)
  return target;
}

size_t WalletExhaustDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.WalletExhaustDetection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool terminate_on_exhaust = 1;
  if (this->terminate_on_exhaust() != 0) {
    total_size += 1 + 1;
  }

  // .magma.mconfig.WalletExhaustDetection.Method method = 2;
  if (this->method() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_method());
  }

  // uint32 timeout_ms = 3;
  if (this->timeout_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout_ms());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WalletExhaustDetection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.WalletExhaustDetection)
  GOOGLE_DCHECK_NE(&from, this);
  const WalletExhaustDetection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WalletExhaustDetection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.WalletExhaustDetection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.WalletExhaustDetection)
    MergeFrom(*source);
  }
}

void WalletExhaustDetection::MergeFrom(const WalletExhaustDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.WalletExhaustDetection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.terminate_on_exhaust() != 0) {
    _internal_set_terminate_on_exhaust(from._internal_terminate_on_exhaust());
  }
  if (from.method() != 0) {
    _internal_set_method(from._internal_method());
  }
  if (from.timeout_ms() != 0) {
    _internal_set_timeout_ms(from._internal_timeout_ms());
  }
}

void WalletExhaustDetection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.WalletExhaustDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WalletExhaustDetection::CopyFrom(const WalletExhaustDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.WalletExhaustDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalletExhaustDetection::IsInitialized() const {
  return true;
}

void WalletExhaustDetection::InternalSwap(WalletExhaustDetection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WalletExhaustDetection, timeout_ms_)
      + sizeof(WalletExhaustDetection::timeout_ms_)
      - PROTOBUF_FIELD_OFFSET(WalletExhaustDetection, terminate_on_exhaust_)>(
          reinterpret_cast<char*>(&terminate_on_exhaust_),
          reinterpret_cast<char*>(&other->terminate_on_exhaust_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WalletExhaustDetection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PolicyDB::_Internal {
 public:
};

PolicyDB::PolicyDB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.PolicyDB)
}
PolicyDB::PolicyDB(const PolicyDB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  log_level_ = from.log_level_;
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.PolicyDB)
}

void PolicyDB::SharedCtor() {
  log_level_ = 0;
}

PolicyDB::~PolicyDB() {
  // @@protoc_insertion_point(destructor:magma.mconfig.PolicyDB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PolicyDB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PolicyDB::ArenaDtor(void* object) {
  PolicyDB* _this = reinterpret_cast< PolicyDB* >(object);
  (void)_this;
}
void PolicyDB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PolicyDB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PolicyDB& PolicyDB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PolicyDB_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void PolicyDB::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.PolicyDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolicyDB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .magma.orc8r.LogLevel log_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_log_level(static_cast<::magma::orc8r::LogLevel>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PolicyDB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.PolicyDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .magma.orc8r.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_log_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.PolicyDB)
  return target;
}

size_t PolicyDB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.PolicyDB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .magma.orc8r.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_log_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolicyDB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.PolicyDB)
  GOOGLE_DCHECK_NE(&from, this);
  const PolicyDB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PolicyDB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.PolicyDB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.PolicyDB)
    MergeFrom(*source);
  }
}

void PolicyDB::MergeFrom(const PolicyDB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.PolicyDB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.log_level() != 0) {
    _internal_set_log_level(from._internal_log_level());
  }
}

void PolicyDB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.PolicyDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolicyDB::CopyFrom(const PolicyDB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.PolicyDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyDB::IsInitialized() const {
  return true;
}

void PolicyDB::InternalSwap(PolicyDB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(log_level_, other->log_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PolicyDB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RedirectD::_Internal {
 public:
};

RedirectD::RedirectD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.RedirectD)
}
RedirectD::RedirectD(const RedirectD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  log_level_ = from.log_level_;
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.RedirectD)
}

void RedirectD::SharedCtor() {
  log_level_ = 0;
}

RedirectD::~RedirectD() {
  // @@protoc_insertion_point(destructor:magma.mconfig.RedirectD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RedirectD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RedirectD::ArenaDtor(void* object) {
  RedirectD* _this = reinterpret_cast< RedirectD* >(object);
  (void)_this;
}
void RedirectD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedirectD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedirectD& RedirectD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedirectD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void RedirectD::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.RedirectD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RedirectD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .magma.orc8r.LogLevel log_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_log_level(static_cast<::magma::orc8r::LogLevel>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedirectD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.RedirectD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .magma.orc8r.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_log_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.RedirectD)
  return target;
}

size_t RedirectD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.RedirectD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .magma.orc8r.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_log_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.RedirectD)
  GOOGLE_DCHECK_NE(&from, this);
  const RedirectD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RedirectD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.RedirectD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.RedirectD)
    MergeFrom(*source);
  }
}

void RedirectD::MergeFrom(const RedirectD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.RedirectD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.log_level() != 0) {
    _internal_set_log_level(from._internal_log_level());
  }
}

void RedirectD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.RedirectD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedirectD::CopyFrom(const RedirectD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.RedirectD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectD::IsInitialized() const {
  return true;
}

void RedirectD::InternalSwap(RedirectD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(log_level_, other->log_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RedirectD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MobilityD::_Internal {
 public:
};

MobilityD::MobilityD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.MobilityD)
}
MobilityD::MobilityD(const MobilityD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_block().empty()) {
    ip_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip_block(), 
      GetArena());
  }
  ipv6_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ipv6_block().empty()) {
    ipv6_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ipv6_block(), 
      GetArena());
  }
  ipv6_prefix_allocation_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ipv6_prefix_allocation_type().empty()) {
    ipv6_prefix_allocation_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ipv6_prefix_allocation_type(), 
      GetArena());
  }
  ::memcpy(&log_level_, &from.log_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&multi_apn_ip_alloc_) -
    reinterpret_cast<char*>(&log_level_)) + sizeof(multi_apn_ip_alloc_));
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.MobilityD)
}

void MobilityD::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MobilityD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  ip_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv6_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv6_prefix_allocation_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&log_level_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&multi_apn_ip_alloc_) -
      reinterpret_cast<char*>(&log_level_)) + sizeof(multi_apn_ip_alloc_));
}

MobilityD::~MobilityD() {
  // @@protoc_insertion_point(destructor:magma.mconfig.MobilityD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MobilityD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_block_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv6_block_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv6_prefix_allocation_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MobilityD::ArenaDtor(void* object) {
  MobilityD* _this = reinterpret_cast< MobilityD* >(object);
  (void)_this;
}
void MobilityD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MobilityD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MobilityD& MobilityD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MobilityD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void MobilityD::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.MobilityD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_block_.ClearToEmpty();
  ipv6_block_.ClearToEmpty();
  ipv6_prefix_allocation_type_.ClearToEmpty();
  ::memset(&log_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multi_apn_ip_alloc_) -
      reinterpret_cast<char*>(&log_level_)) + sizeof(multi_apn_ip_alloc_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MobilityD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .magma.orc8r.LogLevel log_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_log_level(static_cast<::magma::orc8r::LogLevel>(val));
        } else goto handle_unusual;
        continue;
      // string ip_block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip_block();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.MobilityD.ip_block"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .magma.mconfig.MobilityD.IpAllocatorType ip_allocator_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ip_allocator_type(static_cast<::magma::mconfig::MobilityD_IpAllocatorType>(val));
        } else goto handle_unusual;
        continue;
      // bool static_ip_enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          static_ip_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool multi_apn_ip_alloc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          multi_apn_ip_alloc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ipv6_block = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_ipv6_block();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.MobilityD.ipv6_block"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ipv6_prefix_allocation_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_ipv6_prefix_allocation_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.MobilityD.ipv6_prefix_allocation_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MobilityD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.MobilityD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .magma.orc8r.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_log_level(), target);
  }

  // string ip_block = 2;
  if (this->ip_block().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_block().data(), static_cast<int>(this->_internal_ip_block().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.MobilityD.ip_block");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip_block(), target);
  }

  // .magma.mconfig.MobilityD.IpAllocatorType ip_allocator_type = 3;
  if (this->ip_allocator_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_ip_allocator_type(), target);
  }

  // bool static_ip_enabled = 4;
  if (this->static_ip_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_static_ip_enabled(), target);
  }

  // bool multi_apn_ip_alloc = 5;
  if (this->multi_apn_ip_alloc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_multi_apn_ip_alloc(), target);
  }

  // string ipv6_block = 10;
  if (this->ipv6_block().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipv6_block().data(), static_cast<int>(this->_internal_ipv6_block().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.MobilityD.ipv6_block");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_ipv6_block(), target);
  }

  // string ipv6_prefix_allocation_type = 11;
  if (this->ipv6_prefix_allocation_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipv6_prefix_allocation_type().data(), static_cast<int>(this->_internal_ipv6_prefix_allocation_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.MobilityD.ipv6_prefix_allocation_type");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_ipv6_prefix_allocation_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.MobilityD)
  return target;
}

size_t MobilityD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.MobilityD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip_block = 2;
  if (this->ip_block().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_block());
  }

  // string ipv6_block = 10;
  if (this->ipv6_block().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipv6_block());
  }

  // string ipv6_prefix_allocation_type = 11;
  if (this->ipv6_prefix_allocation_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipv6_prefix_allocation_type());
  }

  // .magma.orc8r.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_log_level());
  }

  // .magma.mconfig.MobilityD.IpAllocatorType ip_allocator_type = 3;
  if (this->ip_allocator_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ip_allocator_type());
  }

  // bool static_ip_enabled = 4;
  if (this->static_ip_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool multi_apn_ip_alloc = 5;
  if (this->multi_apn_ip_alloc() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MobilityD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.MobilityD)
  GOOGLE_DCHECK_NE(&from, this);
  const MobilityD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MobilityD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.MobilityD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.MobilityD)
    MergeFrom(*source);
  }
}

void MobilityD::MergeFrom(const MobilityD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.MobilityD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip_block().size() > 0) {
    _internal_set_ip_block(from._internal_ip_block());
  }
  if (from.ipv6_block().size() > 0) {
    _internal_set_ipv6_block(from._internal_ipv6_block());
  }
  if (from.ipv6_prefix_allocation_type().size() > 0) {
    _internal_set_ipv6_prefix_allocation_type(from._internal_ipv6_prefix_allocation_type());
  }
  if (from.log_level() != 0) {
    _internal_set_log_level(from._internal_log_level());
  }
  if (from.ip_allocator_type() != 0) {
    _internal_set_ip_allocator_type(from._internal_ip_allocator_type());
  }
  if (from.static_ip_enabled() != 0) {
    _internal_set_static_ip_enabled(from._internal_static_ip_enabled());
  }
  if (from.multi_apn_ip_alloc() != 0) {
    _internal_set_multi_apn_ip_alloc(from._internal_multi_apn_ip_alloc());
  }
}

void MobilityD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.MobilityD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MobilityD::CopyFrom(const MobilityD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.MobilityD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MobilityD::IsInitialized() const {
  return true;
}

void MobilityD::InternalSwap(MobilityD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_block_.Swap(&other->ip_block_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ipv6_block_.Swap(&other->ipv6_block_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ipv6_prefix_allocation_type_.Swap(&other->ipv6_prefix_allocation_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MobilityD, multi_apn_ip_alloc_)
      + sizeof(MobilityD::multi_apn_ip_alloc_)
      - PROTOBUF_FIELD_OFFSET(MobilityD, log_level_)>(
          reinterpret_cast<char*>(&log_level_),
          reinterpret_cast<char*>(&other->log_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MobilityD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MME_ApnCorrectionMap::_Internal {
 public:
};

MME_ApnCorrectionMap::MME_ApnCorrectionMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.MME.ApnCorrectionMap)
}
MME_ApnCorrectionMap::MME_ApnCorrectionMap(const MME_ApnCorrectionMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  imsi_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imsi_prefix().empty()) {
    imsi_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_imsi_prefix(), 
      GetArena());
  }
  apn_override_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_apn_override().empty()) {
    apn_override_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_apn_override(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.MME.ApnCorrectionMap)
}

void MME_ApnCorrectionMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MME_ApnCorrectionMap_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  imsi_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  apn_override_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MME_ApnCorrectionMap::~MME_ApnCorrectionMap() {
  // @@protoc_insertion_point(destructor:magma.mconfig.MME.ApnCorrectionMap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MME_ApnCorrectionMap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  imsi_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  apn_override_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MME_ApnCorrectionMap::ArenaDtor(void* object) {
  MME_ApnCorrectionMap* _this = reinterpret_cast< MME_ApnCorrectionMap* >(object);
  (void)_this;
}
void MME_ApnCorrectionMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MME_ApnCorrectionMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MME_ApnCorrectionMap& MME_ApnCorrectionMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MME_ApnCorrectionMap_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void MME_ApnCorrectionMap::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.MME.ApnCorrectionMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imsi_prefix_.ClearToEmpty();
  apn_override_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MME_ApnCorrectionMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string imsi_prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_imsi_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.MME.ApnCorrectionMap.imsi_prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string apn_override = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_apn_override();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.MME.ApnCorrectionMap.apn_override"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MME_ApnCorrectionMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.MME.ApnCorrectionMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string imsi_prefix = 1;
  if (this->imsi_prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imsi_prefix().data(), static_cast<int>(this->_internal_imsi_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.MME.ApnCorrectionMap.imsi_prefix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_imsi_prefix(), target);
  }

  // string apn_override = 2;
  if (this->apn_override().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_apn_override().data(), static_cast<int>(this->_internal_apn_override().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.MME.ApnCorrectionMap.apn_override");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_apn_override(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.MME.ApnCorrectionMap)
  return target;
}

size_t MME_ApnCorrectionMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.MME.ApnCorrectionMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string imsi_prefix = 1;
  if (this->imsi_prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imsi_prefix());
  }

  // string apn_override = 2;
  if (this->apn_override().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_apn_override());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MME_ApnCorrectionMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.MME.ApnCorrectionMap)
  GOOGLE_DCHECK_NE(&from, this);
  const MME_ApnCorrectionMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MME_ApnCorrectionMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.MME.ApnCorrectionMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.MME.ApnCorrectionMap)
    MergeFrom(*source);
  }
}

void MME_ApnCorrectionMap::MergeFrom(const MME_ApnCorrectionMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.MME.ApnCorrectionMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.imsi_prefix().size() > 0) {
    _internal_set_imsi_prefix(from._internal_imsi_prefix());
  }
  if (from.apn_override().size() > 0) {
    _internal_set_apn_override(from._internal_apn_override());
  }
}

void MME_ApnCorrectionMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.MME.ApnCorrectionMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MME_ApnCorrectionMap::CopyFrom(const MME_ApnCorrectionMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.MME.ApnCorrectionMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MME_ApnCorrectionMap::IsInitialized() const {
  return true;
}

void MME_ApnCorrectionMap::InternalSwap(MME_ApnCorrectionMap* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  imsi_prefix_.Swap(&other->imsi_prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  apn_override_.Swap(&other->apn_override_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MME_ApnCorrectionMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MME_PlmnConfig::_Internal {
 public:
};

MME_PlmnConfig::MME_PlmnConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.MME.PlmnConfig)
}
MME_PlmnConfig::MME_PlmnConfig(const MME_PlmnConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mcc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mcc().empty()) {
    mcc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mcc(), 
      GetArena());
  }
  mnc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mnc().empty()) {
    mnc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mnc(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.MME.PlmnConfig)
}

void MME_PlmnConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MME_PlmnConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  mcc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mnc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MME_PlmnConfig::~MME_PlmnConfig() {
  // @@protoc_insertion_point(destructor:magma.mconfig.MME.PlmnConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MME_PlmnConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mcc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mnc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MME_PlmnConfig::ArenaDtor(void* object) {
  MME_PlmnConfig* _this = reinterpret_cast< MME_PlmnConfig* >(object);
  (void)_this;
}
void MME_PlmnConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MME_PlmnConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MME_PlmnConfig& MME_PlmnConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MME_PlmnConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void MME_PlmnConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.MME.PlmnConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mcc_.ClearToEmpty();
  mnc_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MME_PlmnConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string mcc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mcc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.MME.PlmnConfig.mcc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mnc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mnc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.MME.PlmnConfig.mnc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MME_PlmnConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.MME.PlmnConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mcc = 1;
  if (this->mcc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mcc().data(), static_cast<int>(this->_internal_mcc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.MME.PlmnConfig.mcc");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mcc(), target);
  }

  // string mnc = 2;
  if (this->mnc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mnc().data(), static_cast<int>(this->_internal_mnc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.MME.PlmnConfig.mnc");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mnc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.MME.PlmnConfig)
  return target;
}

size_t MME_PlmnConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.MME.PlmnConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mcc = 1;
  if (this->mcc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mcc());
  }

  // string mnc = 2;
  if (this->mnc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mnc());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MME_PlmnConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.MME.PlmnConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MME_PlmnConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MME_PlmnConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.MME.PlmnConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.MME.PlmnConfig)
    MergeFrom(*source);
  }
}

void MME_PlmnConfig::MergeFrom(const MME_PlmnConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.MME.PlmnConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mcc().size() > 0) {
    _internal_set_mcc(from._internal_mcc());
  }
  if (from.mnc().size() > 0) {
    _internal_set_mnc(from._internal_mnc());
  }
}

void MME_PlmnConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.MME.PlmnConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MME_PlmnConfig::CopyFrom(const MME_PlmnConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.MME.PlmnConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MME_PlmnConfig::IsInitialized() const {
  return true;
}

void MME_PlmnConfig::InternalSwap(MME_PlmnConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mcc_.Swap(&other->mcc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mnc_.Swap(&other->mnc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MME_PlmnConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MME_TacList::_Internal {
 public:
};

MME_TacList::MME_TacList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tac_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.MME.TacList)
}
MME_TacList::MME_TacList(const MME_TacList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tac_(from.tac_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.MME.TacList)
}

void MME_TacList::SharedCtor() {
}

MME_TacList::~MME_TacList() {
  // @@protoc_insertion_point(destructor:magma.mconfig.MME.TacList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MME_TacList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MME_TacList::ArenaDtor(void* object) {
  MME_TacList* _this = reinterpret_cast< MME_TacList* >(object);
  (void)_this;
}
void MME_TacList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MME_TacList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MME_TacList& MME_TacList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MME_TacList_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void MME_TacList::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.MME.TacList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tac_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MME_TacList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 tac = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_tac(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_tac(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MME_TacList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.MME.TacList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 tac = 1;
  {
    int byte_size = _tac_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_tac(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.MME.TacList)
  return target;
}

size_t MME_TacList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.MME.TacList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 tac = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->tac_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tac_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MME_TacList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.MME.TacList)
  GOOGLE_DCHECK_NE(&from, this);
  const MME_TacList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MME_TacList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.MME.TacList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.MME.TacList)
    MergeFrom(*source);
  }
}

void MME_TacList::MergeFrom(const MME_TacList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.MME.TacList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tac_.MergeFrom(from.tac_);
}

void MME_TacList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.MME.TacList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MME_TacList::CopyFrom(const MME_TacList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.MME.TacList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MME_TacList::IsInitialized() const {
  return true;
}

void MME_TacList::InternalSwap(MME_TacList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tac_.InternalSwap(&other->tac_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MME_TacList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

MME_ServiceAreaMapsEntry_DoNotUse::MME_ServiceAreaMapsEntry_DoNotUse() {}
MME_ServiceAreaMapsEntry_DoNotUse::MME_ServiceAreaMapsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MME_ServiceAreaMapsEntry_DoNotUse::MergeFrom(const MME_ServiceAreaMapsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MME_ServiceAreaMapsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MME_ServiceAreaMapsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class MME_ImeiConfig::_Internal {
 public:
};

MME_ImeiConfig::MME_ImeiConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.MME.ImeiConfig)
}
MME_ImeiConfig::MME_ImeiConfig(const MME_ImeiConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tac().empty()) {
    tac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tac(), 
      GetArena());
  }
  snr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_snr().empty()) {
    snr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_snr(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.MME.ImeiConfig)
}

void MME_ImeiConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MME_ImeiConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  tac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MME_ImeiConfig::~MME_ImeiConfig() {
  // @@protoc_insertion_point(destructor:magma.mconfig.MME.ImeiConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MME_ImeiConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MME_ImeiConfig::ArenaDtor(void* object) {
  MME_ImeiConfig* _this = reinterpret_cast< MME_ImeiConfig* >(object);
  (void)_this;
}
void MME_ImeiConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MME_ImeiConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MME_ImeiConfig& MME_ImeiConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MME_ImeiConfig_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void MME_ImeiConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.MME.ImeiConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tac_.ClearToEmpty();
  snr_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MME_ImeiConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tac = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.MME.ImeiConfig.tac"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string snr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_snr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.MME.ImeiConfig.snr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MME_ImeiConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.MME.ImeiConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tac = 1;
  if (this->tac().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tac().data(), static_cast<int>(this->_internal_tac().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.MME.ImeiConfig.tac");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tac(), target);
  }

  // string snr = 2;
  if (this->snr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_snr().data(), static_cast<int>(this->_internal_snr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.MME.ImeiConfig.snr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_snr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.MME.ImeiConfig)
  return target;
}

size_t MME_ImeiConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.MME.ImeiConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tac = 1;
  if (this->tac().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tac());
  }

  // string snr = 2;
  if (this->snr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_snr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MME_ImeiConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.MME.ImeiConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MME_ImeiConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MME_ImeiConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.MME.ImeiConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.MME.ImeiConfig)
    MergeFrom(*source);
  }
}

void MME_ImeiConfig::MergeFrom(const MME_ImeiConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.MME.ImeiConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tac().size() > 0) {
    _internal_set_tac(from._internal_tac());
  }
  if (from.snr().size() > 0) {
    _internal_set_snr(from._internal_snr());
  }
}

void MME_ImeiConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.MME.ImeiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MME_ImeiConfig::CopyFrom(const MME_ImeiConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.MME.ImeiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MME_ImeiConfig::IsInitialized() const {
  return true;
}

void MME_ImeiConfig::InternalSwap(MME_ImeiConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tac_.Swap(&other->tac_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  snr_.Swap(&other->snr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MME_ImeiConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MME::_Internal {
 public:
  static const ::magma::mconfig::FederatedModeMap& federated_mode_map(const MME* msg);
  static const ::magma::mconfig::SentryConfig& sentry_config(const MME* msg);
};

const ::magma::mconfig::FederatedModeMap&
MME::_Internal::federated_mode_map(const MME* msg) {
  return *msg->federated_mode_map_;
}
const ::magma::mconfig::SentryConfig&
MME::_Internal::sentry_config(const MME* msg) {
  return *msg->sentry_config_;
}
MME::MME(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attached_enodeb_tacs_(arena),
  apn_correction_map_list_(arena),
  restricted_plmns_(arena),
  service_area_maps_(arena),
  restricted_imeis_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.MME)
}
MME::MME(const MME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attached_enodeb_tacs_(from.attached_enodeb_tacs_),
      apn_correction_map_list_(from.apn_correction_map_list_),
      restricted_plmns_(from.restricted_plmns_),
      restricted_imeis_(from.restricted_imeis_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  service_area_maps_.MergeFrom(from.service_area_maps_);
  mcc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mcc().empty()) {
    mcc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mcc(), 
      GetArena());
  }
  mnc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mnc().empty()) {
    mnc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mnc(), 
      GetArena());
  }
  csfb_mcc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_csfb_mcc().empty()) {
    csfb_mcc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_csfb_mcc(), 
      GetArena());
  }
  csfb_mnc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_csfb_mnc().empty()) {
    csfb_mnc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_csfb_mnc(), 
      GetArena());
  }
  dns_primary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dns_primary().empty()) {
    dns_primary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dns_primary(), 
      GetArena());
  }
  dns_secondary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dns_secondary().empty()) {
    dns_secondary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dns_secondary(), 
      GetArena());
  }
  ipv4_p_cscf_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ipv4_p_cscf_address().empty()) {
    ipv4_p_cscf_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ipv4_p_cscf_address(), 
      GetArena());
  }
  ipv6_p_cscf_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ipv6_p_cscf_address().empty()) {
    ipv6_p_cscf_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ipv6_p_cscf_address(), 
      GetArena());
  }
  ipv6_dns_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ipv6_dns_address().empty()) {
    ipv6_dns_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ipv6_dns_address(), 
      GetArena());
  }
  ipv4_sgw_s1u_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ipv4_sgw_s1u_addr().empty()) {
    ipv4_sgw_s1u_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ipv4_sgw_s1u_addr(), 
      GetArena());
  }
  if (from._internal_has_federated_mode_map()) {
    federated_mode_map_ = new ::magma::mconfig::FederatedModeMap(*from.federated_mode_map_);
  } else {
    federated_mode_map_ = nullptr;
  }
  if (from._internal_has_sentry_config()) {
    sentry_config_ = new ::magma::mconfig::SentryConfig(*from.sentry_config_);
  } else {
    sentry_config_ = nullptr;
  }
  ::memcpy(&log_level_, &from.log_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_converged_core_) -
    reinterpret_cast<char*>(&log_level_)) + sizeof(enable_converged_core_));
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.MME)
}

void MME::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MME_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  mcc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mnc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  csfb_mcc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  csfb_mnc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dns_primary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dns_secondary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv4_p_cscf_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv6_p_cscf_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv6_dns_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv4_sgw_s1u_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&federated_mode_map_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&enable_converged_core_) -
      reinterpret_cast<char*>(&federated_mode_map_)) + sizeof(enable_converged_core_));
}

MME::~MME() {
  // @@protoc_insertion_point(destructor:magma.mconfig.MME)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MME::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mcc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mnc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  csfb_mcc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  csfb_mnc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dns_primary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dns_secondary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv4_p_cscf_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv6_p_cscf_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv6_dns_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv4_sgw_s1u_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete federated_mode_map_;
  if (this != internal_default_instance()) delete sentry_config_;
}

void MME::ArenaDtor(void* object) {
  MME* _this = reinterpret_cast< MME* >(object);
  (void)_this;
}
void MME::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MME::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MME& MME::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MME_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void MME::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.MME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attached_enodeb_tacs_.Clear();
  apn_correction_map_list_.Clear();
  restricted_plmns_.Clear();
  service_area_maps_.Clear();
  restricted_imeis_.Clear();
  mcc_.ClearToEmpty();
  mnc_.ClearToEmpty();
  csfb_mcc_.ClearToEmpty();
  csfb_mnc_.ClearToEmpty();
  dns_primary_.ClearToEmpty();
  dns_secondary_.ClearToEmpty();
  ipv4_p_cscf_address_.ClearToEmpty();
  ipv6_p_cscf_address_.ClearToEmpty();
  ipv6_dns_address_.ClearToEmpty();
  ipv4_sgw_s1u_addr_.ClearToEmpty();
  if (GetArena() == nullptr && federated_mode_map_ != nullptr) {
    delete federated_mode_map_;
  }
  federated_mode_map_ = nullptr;
  if (GetArena() == nullptr && sentry_config_ != nullptr) {
    delete sentry_config_;
  }
  sentry_config_ = nullptr;
  ::memset(&log_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_converged_core_) -
      reinterpret_cast<char*>(&log_level_)) + sizeof(enable_converged_core_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MME::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .magma.orc8r.LogLevel log_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_log_level(static_cast<::magma::orc8r::LogLevel>(val));
        } else goto handle_unusual;
        continue;
      // string mcc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mcc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.MME.mcc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mnc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mnc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.MME.mnc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tac = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          tac_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mme_gid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          mme_gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mme_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          mme_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_dns_caching = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          enable_dns_caching_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool relay_enabled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          relay_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .magma.mconfig.MME.NonEPSServiceControl non_eps_service_control = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_non_eps_service_control(static_cast<::magma::mconfig::MME_NonEPSServiceControl>(val));
        } else goto handle_unusual;
        continue;
      // string csfb_mcc = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_csfb_mcc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.MME.csfb_mcc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string csfb_mnc = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_csfb_mnc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.MME.csfb_mnc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lac = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          lac_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool cloud_subscriberdb_enabled = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          cloud_subscriberdb_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 attached_enodeb_tacs = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_attached_enodeb_tacs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120) {
          _internal_add_attached_enodeb_tacs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mme_relative_capacity = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          mme_relative_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dns_primary = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_dns_primary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.MME.dns_primary"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dns_secondary = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_dns_secondary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.MME.dns_secondary"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool nat_enabled = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          nat_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hss_relay_enabled = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          hss_relay_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_apn_correction = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          enable_apn_correction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .magma.mconfig.MME.ApnCorrectionMap apn_correction_map_list = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_apn_correction_map_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      // string ipv4_p_cscf_address = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_ipv4_p_cscf_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.MME.ipv4_p_cscf_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ipv6_p_cscf_address = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_ipv6_p_cscf_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.MME.ipv6_p_cscf_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ipv6_dns_address = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_ipv6_dns_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.MME.ipv6_dns_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ipv4_sgw_s1u_addr = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_ipv4_sgw_s1u_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.MME.ipv4_sgw_s1u_addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .magma.mconfig.MME.PlmnConfig restricted_plmns = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_restricted_plmns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .magma.mconfig.MME.TacList> service_area_maps = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&service_area_maps_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else goto handle_unusual;
        continue;
      // .magma.mconfig.FederatedModeMap federated_mode_map = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_federated_mode_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .magma.mconfig.MME.ImeiConfig restricted_imeis = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_restricted_imeis(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<282>(ptr));
        } else goto handle_unusual;
        continue;
      // bool congestion_control_enabled = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          congestion_control_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .magma.mconfig.SentryConfig sentry_config = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_sentry_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_converged_core = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          enable_converged_core_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MME::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.MME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .magma.orc8r.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_log_level(), target);
  }

  // string mcc = 2;
  if (this->mcc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mcc().data(), static_cast<int>(this->_internal_mcc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.MME.mcc");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mcc(), target);
  }

  // string mnc = 3;
  if (this->mnc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mnc().data(), static_cast<int>(this->_internal_mnc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.MME.mnc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mnc(), target);
  }

  // int32 tac = 4;
  if (this->tac() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_tac(), target);
  }

  // int32 mme_gid = 5;
  if (this->mme_gid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_mme_gid(), target);
  }

  // int32 mme_code = 6;
  if (this->mme_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_mme_code(), target);
  }

  // bool enable_dns_caching = 7;
  if (this->enable_dns_caching() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_enable_dns_caching(), target);
  }

  // bool relay_enabled = 8;
  if (this->relay_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_relay_enabled(), target);
  }

  // .magma.mconfig.MME.NonEPSServiceControl non_eps_service_control = 9;
  if (this->non_eps_service_control() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_non_eps_service_control(), target);
  }

  // string csfb_mcc = 10;
  if (this->csfb_mcc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_csfb_mcc().data(), static_cast<int>(this->_internal_csfb_mcc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.MME.csfb_mcc");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_csfb_mcc(), target);
  }

  // string csfb_mnc = 11;
  if (this->csfb_mnc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_csfb_mnc().data(), static_cast<int>(this->_internal_csfb_mnc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.MME.csfb_mnc");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_csfb_mnc(), target);
  }

  // int32 lac = 12;
  if (this->lac() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_lac(), target);
  }

  // bool cloud_subscriberdb_enabled = 14;
  if (this->cloud_subscriberdb_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_cloud_subscriberdb_enabled(), target);
  }

  // repeated int32 attached_enodeb_tacs = 15;
  {
    int byte_size = _attached_enodeb_tacs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          15, _internal_attached_enodeb_tacs(), byte_size, target);
    }
  }

  // int32 mme_relative_capacity = 16;
  if (this->mme_relative_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_mme_relative_capacity(), target);
  }

  // string dns_primary = 20;
  if (this->dns_primary().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dns_primary().data(), static_cast<int>(this->_internal_dns_primary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.MME.dns_primary");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_dns_primary(), target);
  }

  // string dns_secondary = 21;
  if (this->dns_secondary().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dns_secondary().data(), static_cast<int>(this->_internal_dns_secondary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.MME.dns_secondary");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_dns_secondary(), target);
  }

  // bool nat_enabled = 22;
  if (this->nat_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_nat_enabled(), target);
  }

  // bool hss_relay_enabled = 23;
  if (this->hss_relay_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_hss_relay_enabled(), target);
  }

  // bool enable_apn_correction = 24;
  if (this->enable_apn_correction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_enable_apn_correction(), target);
  }

  // repeated .magma.mconfig.MME.ApnCorrectionMap apn_correction_map_list = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_apn_correction_map_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, this->_internal_apn_correction_map_list(i), target, stream);
  }

  // string ipv4_p_cscf_address = 26;
  if (this->ipv4_p_cscf_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipv4_p_cscf_address().data(), static_cast<int>(this->_internal_ipv4_p_cscf_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.MME.ipv4_p_cscf_address");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_ipv4_p_cscf_address(), target);
  }

  // string ipv6_p_cscf_address = 27;
  if (this->ipv6_p_cscf_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipv6_p_cscf_address().data(), static_cast<int>(this->_internal_ipv6_p_cscf_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.MME.ipv6_p_cscf_address");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_ipv6_p_cscf_address(), target);
  }

  // string ipv6_dns_address = 30;
  if (this->ipv6_dns_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipv6_dns_address().data(), static_cast<int>(this->_internal_ipv6_dns_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.MME.ipv6_dns_address");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_ipv6_dns_address(), target);
  }

  // string ipv4_sgw_s1u_addr = 31;
  if (this->ipv4_sgw_s1u_addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipv4_sgw_s1u_addr().data(), static_cast<int>(this->_internal_ipv4_sgw_s1u_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.MME.ipv4_sgw_s1u_addr");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_ipv4_sgw_s1u_addr(), target);
  }

  // repeated .magma.mconfig.MME.PlmnConfig restricted_plmns = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_restricted_plmns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, this->_internal_restricted_plmns(i), target, stream);
  }

  // map<string, .magma.mconfig.MME.TacList> service_area_maps = 33;
  if (!this->_internal_service_area_maps().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::magma::mconfig::MME_TacList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "magma.mconfig.MME.ServiceAreaMapsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_service_area_maps().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_service_area_maps().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::magma::mconfig::MME_TacList >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::magma::mconfig::MME_TacList >::const_iterator
          it = this->_internal_service_area_maps().begin();
          it != this->_internal_service_area_maps().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MME_ServiceAreaMapsEntry_DoNotUse::Funcs::InternalSerialize(33, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::magma::mconfig::MME_TacList >::const_iterator
          it = this->_internal_service_area_maps().begin();
          it != this->_internal_service_area_maps().end(); ++it) {
        target = MME_ServiceAreaMapsEntry_DoNotUse::Funcs::InternalSerialize(33, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .magma.mconfig.FederatedModeMap federated_mode_map = 34;
  if (this->has_federated_mode_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::federated_mode_map(this), target, stream);
  }

  // repeated .magma.mconfig.MME.ImeiConfig restricted_imeis = 35;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_restricted_imeis_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, this->_internal_restricted_imeis(i), target, stream);
  }

  // bool congestion_control_enabled = 40;
  if (this->congestion_control_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->_internal_congestion_control_enabled(), target);
  }

  // .magma.mconfig.SentryConfig sentry_config = 45;
  if (this->has_sentry_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        45, _Internal::sentry_config(this), target, stream);
  }

  // bool enable_converged_core = 46;
  if (this->enable_converged_core() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(46, this->_internal_enable_converged_core(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.MME)
  return target;
}

size_t MME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.MME)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 attached_enodeb_tacs = 15;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->attached_enodeb_tacs_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _attached_enodeb_tacs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .magma.mconfig.MME.ApnCorrectionMap apn_correction_map_list = 25;
  total_size += 2UL * this->_internal_apn_correction_map_list_size();
  for (const auto& msg : this->apn_correction_map_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .magma.mconfig.MME.PlmnConfig restricted_plmns = 32;
  total_size += 2UL * this->_internal_restricted_plmns_size();
  for (const auto& msg : this->restricted_plmns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .magma.mconfig.MME.TacList> service_area_maps = 33;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_service_area_maps_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::magma::mconfig::MME_TacList >::const_iterator
      it = this->_internal_service_area_maps().begin();
      it != this->_internal_service_area_maps().end(); ++it) {
    total_size += MME_ServiceAreaMapsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .magma.mconfig.MME.ImeiConfig restricted_imeis = 35;
  total_size += 2UL * this->_internal_restricted_imeis_size();
  for (const auto& msg : this->restricted_imeis_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string mcc = 2;
  if (this->mcc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mcc());
  }

  // string mnc = 3;
  if (this->mnc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mnc());
  }

  // string csfb_mcc = 10;
  if (this->csfb_mcc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_csfb_mcc());
  }

  // string csfb_mnc = 11;
  if (this->csfb_mnc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_csfb_mnc());
  }

  // string dns_primary = 20;
  if (this->dns_primary().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dns_primary());
  }

  // string dns_secondary = 21;
  if (this->dns_secondary().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dns_secondary());
  }

  // string ipv4_p_cscf_address = 26;
  if (this->ipv4_p_cscf_address().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipv4_p_cscf_address());
  }

  // string ipv6_p_cscf_address = 27;
  if (this->ipv6_p_cscf_address().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipv6_p_cscf_address());
  }

  // string ipv6_dns_address = 30;
  if (this->ipv6_dns_address().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipv6_dns_address());
  }

  // string ipv4_sgw_s1u_addr = 31;
  if (this->ipv4_sgw_s1u_addr().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipv4_sgw_s1u_addr());
  }

  // .magma.mconfig.FederatedModeMap federated_mode_map = 34;
  if (this->has_federated_mode_map()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *federated_mode_map_);
  }

  // .magma.mconfig.SentryConfig sentry_config = 45;
  if (this->has_sentry_config()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sentry_config_);
  }

  // .magma.orc8r.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_log_level());
  }

  // int32 tac = 4;
  if (this->tac() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tac());
  }

  // int32 mme_gid = 5;
  if (this->mme_gid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mme_gid());
  }

  // int32 mme_code = 6;
  if (this->mme_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mme_code());
  }

  // .magma.mconfig.MME.NonEPSServiceControl non_eps_service_control = 9;
  if (this->non_eps_service_control() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_non_eps_service_control());
  }

  // int32 lac = 12;
  if (this->lac() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lac());
  }

  // bool enable_dns_caching = 7;
  if (this->enable_dns_caching() != 0) {
    total_size += 1 + 1;
  }

  // bool relay_enabled = 8;
  if (this->relay_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool cloud_subscriberdb_enabled = 14;
  if (this->cloud_subscriberdb_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool nat_enabled = 22;
  if (this->nat_enabled() != 0) {
    total_size += 2 + 1;
  }

  // int32 mme_relative_capacity = 16;
  if (this->mme_relative_capacity() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mme_relative_capacity());
  }

  // bool hss_relay_enabled = 23;
  if (this->hss_relay_enabled() != 0) {
    total_size += 2 + 1;
  }

  // bool enable_apn_correction = 24;
  if (this->enable_apn_correction() != 0) {
    total_size += 2 + 1;
  }

  // bool congestion_control_enabled = 40;
  if (this->congestion_control_enabled() != 0) {
    total_size += 2 + 1;
  }

  // bool enable_converged_core = 46;
  if (this->enable_converged_core() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MME::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.MME)
  GOOGLE_DCHECK_NE(&from, this);
  const MME* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MME>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.MME)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.MME)
    MergeFrom(*source);
  }
}

void MME::MergeFrom(const MME& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.MME)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attached_enodeb_tacs_.MergeFrom(from.attached_enodeb_tacs_);
  apn_correction_map_list_.MergeFrom(from.apn_correction_map_list_);
  restricted_plmns_.MergeFrom(from.restricted_plmns_);
  service_area_maps_.MergeFrom(from.service_area_maps_);
  restricted_imeis_.MergeFrom(from.restricted_imeis_);
  if (from.mcc().size() > 0) {
    _internal_set_mcc(from._internal_mcc());
  }
  if (from.mnc().size() > 0) {
    _internal_set_mnc(from._internal_mnc());
  }
  if (from.csfb_mcc().size() > 0) {
    _internal_set_csfb_mcc(from._internal_csfb_mcc());
  }
  if (from.csfb_mnc().size() > 0) {
    _internal_set_csfb_mnc(from._internal_csfb_mnc());
  }
  if (from.dns_primary().size() > 0) {
    _internal_set_dns_primary(from._internal_dns_primary());
  }
  if (from.dns_secondary().size() > 0) {
    _internal_set_dns_secondary(from._internal_dns_secondary());
  }
  if (from.ipv4_p_cscf_address().size() > 0) {
    _internal_set_ipv4_p_cscf_address(from._internal_ipv4_p_cscf_address());
  }
  if (from.ipv6_p_cscf_address().size() > 0) {
    _internal_set_ipv6_p_cscf_address(from._internal_ipv6_p_cscf_address());
  }
  if (from.ipv6_dns_address().size() > 0) {
    _internal_set_ipv6_dns_address(from._internal_ipv6_dns_address());
  }
  if (from.ipv4_sgw_s1u_addr().size() > 0) {
    _internal_set_ipv4_sgw_s1u_addr(from._internal_ipv4_sgw_s1u_addr());
  }
  if (from.has_federated_mode_map()) {
    _internal_mutable_federated_mode_map()->::magma::mconfig::FederatedModeMap::MergeFrom(from._internal_federated_mode_map());
  }
  if (from.has_sentry_config()) {
    _internal_mutable_sentry_config()->::magma::mconfig::SentryConfig::MergeFrom(from._internal_sentry_config());
  }
  if (from.log_level() != 0) {
    _internal_set_log_level(from._internal_log_level());
  }
  if (from.tac() != 0) {
    _internal_set_tac(from._internal_tac());
  }
  if (from.mme_gid() != 0) {
    _internal_set_mme_gid(from._internal_mme_gid());
  }
  if (from.mme_code() != 0) {
    _internal_set_mme_code(from._internal_mme_code());
  }
  if (from.non_eps_service_control() != 0) {
    _internal_set_non_eps_service_control(from._internal_non_eps_service_control());
  }
  if (from.lac() != 0) {
    _internal_set_lac(from._internal_lac());
  }
  if (from.enable_dns_caching() != 0) {
    _internal_set_enable_dns_caching(from._internal_enable_dns_caching());
  }
  if (from.relay_enabled() != 0) {
    _internal_set_relay_enabled(from._internal_relay_enabled());
  }
  if (from.cloud_subscriberdb_enabled() != 0) {
    _internal_set_cloud_subscriberdb_enabled(from._internal_cloud_subscriberdb_enabled());
  }
  if (from.nat_enabled() != 0) {
    _internal_set_nat_enabled(from._internal_nat_enabled());
  }
  if (from.mme_relative_capacity() != 0) {
    _internal_set_mme_relative_capacity(from._internal_mme_relative_capacity());
  }
  if (from.hss_relay_enabled() != 0) {
    _internal_set_hss_relay_enabled(from._internal_hss_relay_enabled());
  }
  if (from.enable_apn_correction() != 0) {
    _internal_set_enable_apn_correction(from._internal_enable_apn_correction());
  }
  if (from.congestion_control_enabled() != 0) {
    _internal_set_congestion_control_enabled(from._internal_congestion_control_enabled());
  }
  if (from.enable_converged_core() != 0) {
    _internal_set_enable_converged_core(from._internal_enable_converged_core());
  }
}

void MME::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.MME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MME::CopyFrom(const MME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.MME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MME::IsInitialized() const {
  return true;
}

void MME::InternalSwap(MME* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attached_enodeb_tacs_.InternalSwap(&other->attached_enodeb_tacs_);
  apn_correction_map_list_.InternalSwap(&other->apn_correction_map_list_);
  restricted_plmns_.InternalSwap(&other->restricted_plmns_);
  service_area_maps_.Swap(&other->service_area_maps_);
  restricted_imeis_.InternalSwap(&other->restricted_imeis_);
  mcc_.Swap(&other->mcc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mnc_.Swap(&other->mnc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  csfb_mcc_.Swap(&other->csfb_mcc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  csfb_mnc_.Swap(&other->csfb_mnc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dns_primary_.Swap(&other->dns_primary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dns_secondary_.Swap(&other->dns_secondary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ipv4_p_cscf_address_.Swap(&other->ipv4_p_cscf_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ipv6_p_cscf_address_.Swap(&other->ipv6_p_cscf_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ipv6_dns_address_.Swap(&other->ipv6_dns_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ipv4_sgw_s1u_addr_.Swap(&other->ipv4_sgw_s1u_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MME, enable_converged_core_)
      + sizeof(MME::enable_converged_core_)
      - PROTOBUF_FIELD_OFFSET(MME, federated_mode_map_)>(
          reinterpret_cast<char*>(&federated_mode_map_),
          reinterpret_cast<char*>(&other->federated_mode_map_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MME::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FederatedModeMap::_Internal {
 public:
};

FederatedModeMap::FederatedModeMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mapping_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.FederatedModeMap)
}
FederatedModeMap::FederatedModeMap(const FederatedModeMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mapping_(from.mapping_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.FederatedModeMap)
}

void FederatedModeMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FederatedModeMap_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  enabled_ = false;
}

FederatedModeMap::~FederatedModeMap() {
  // @@protoc_insertion_point(destructor:magma.mconfig.FederatedModeMap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FederatedModeMap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FederatedModeMap::ArenaDtor(void* object) {
  FederatedModeMap* _this = reinterpret_cast< FederatedModeMap* >(object);
  (void)_this;
}
void FederatedModeMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FederatedModeMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FederatedModeMap& FederatedModeMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FederatedModeMap_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void FederatedModeMap::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.FederatedModeMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mapping_.Clear();
  enabled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FederatedModeMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .magma.mconfig.ModeMapItem mapping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mapping(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FederatedModeMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.FederatedModeMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // repeated .magma.mconfig.ModeMapItem mapping = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mapping_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_mapping(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.FederatedModeMap)
  return target;
}

size_t FederatedModeMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.FederatedModeMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .magma.mconfig.ModeMapItem mapping = 2;
  total_size += 1UL * this->_internal_mapping_size();
  for (const auto& msg : this->mapping_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FederatedModeMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.FederatedModeMap)
  GOOGLE_DCHECK_NE(&from, this);
  const FederatedModeMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FederatedModeMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.FederatedModeMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.FederatedModeMap)
    MergeFrom(*source);
  }
}

void FederatedModeMap::MergeFrom(const FederatedModeMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.FederatedModeMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mapping_.MergeFrom(from.mapping_);
  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void FederatedModeMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.FederatedModeMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FederatedModeMap::CopyFrom(const FederatedModeMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.FederatedModeMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FederatedModeMap::IsInitialized() const {
  return true;
}

void FederatedModeMap::InternalSwap(FederatedModeMap* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mapping_.InternalSwap(&other->mapping_);
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FederatedModeMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModeMapItem::_Internal {
 public:
};

ModeMapItem::ModeMapItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.ModeMapItem)
}
ModeMapItem::ModeMapItem(const ModeMapItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  plmn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_plmn().empty()) {
    plmn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_plmn(), 
      GetArena());
  }
  imsi_range_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imsi_range().empty()) {
    imsi_range_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_imsi_range(), 
      GetArena());
  }
  apn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_apn().empty()) {
    apn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_apn(), 
      GetArena());
  }
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.ModeMapItem)
}

void ModeMapItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModeMapItem_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  plmn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imsi_range_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  apn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mode_ = 0;
}

ModeMapItem::~ModeMapItem() {
  // @@protoc_insertion_point(destructor:magma.mconfig.ModeMapItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModeMapItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  plmn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imsi_range_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  apn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModeMapItem::ArenaDtor(void* object) {
  ModeMapItem* _this = reinterpret_cast< ModeMapItem* >(object);
  (void)_this;
}
void ModeMapItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModeMapItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModeMapItem& ModeMapItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModeMapItem_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void ModeMapItem::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.ModeMapItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plmn_.ClearToEmpty();
  imsi_range_.ClearToEmpty();
  apn_.ClearToEmpty();
  mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModeMapItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .magma.mconfig.ModeMapItem.FederatedMode mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::magma::mconfig::ModeMapItem_FederatedMode>(val));
        } else goto handle_unusual;
        continue;
      // string plmn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_plmn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.ModeMapItem.plmn"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string imsi_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_imsi_range();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.ModeMapItem.imsi_range"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string apn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_apn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.ModeMapItem.apn"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModeMapItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.ModeMapItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .magma.mconfig.ModeMapItem.FederatedMode mode = 1;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  // string plmn = 2;
  if (this->plmn().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_plmn().data(), static_cast<int>(this->_internal_plmn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.ModeMapItem.plmn");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_plmn(), target);
  }

  // string imsi_range = 3;
  if (this->imsi_range().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imsi_range().data(), static_cast<int>(this->_internal_imsi_range().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.ModeMapItem.imsi_range");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_imsi_range(), target);
  }

  // string apn = 4;
  if (this->apn().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_apn().data(), static_cast<int>(this->_internal_apn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.ModeMapItem.apn");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_apn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.ModeMapItem)
  return target;
}

size_t ModeMapItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.ModeMapItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string plmn = 2;
  if (this->plmn().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plmn());
  }

  // string imsi_range = 3;
  if (this->imsi_range().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imsi_range());
  }

  // string apn = 4;
  if (this->apn().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_apn());
  }

  // .magma.mconfig.ModeMapItem.FederatedMode mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModeMapItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.ModeMapItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ModeMapItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModeMapItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.ModeMapItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.ModeMapItem)
    MergeFrom(*source);
  }
}

void ModeMapItem::MergeFrom(const ModeMapItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.ModeMapItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.plmn().size() > 0) {
    _internal_set_plmn(from._internal_plmn());
  }
  if (from.imsi_range().size() > 0) {
    _internal_set_imsi_range(from._internal_imsi_range());
  }
  if (from.apn().size() > 0) {
    _internal_set_apn(from._internal_apn());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
}

void ModeMapItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.ModeMapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModeMapItem::CopyFrom(const ModeMapItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.ModeMapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModeMapItem::IsInitialized() const {
  return true;
}

void ModeMapItem::InternalSwap(ModeMapItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  plmn_.Swap(&other->plmn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  imsi_range_.Swap(&other->imsi_range_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  apn_.Swap(&other->apn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModeMapItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscriberDB_SubscriptionProfile::_Internal {
 public:
};

SubscriberDB_SubscriptionProfile::SubscriberDB_SubscriptionProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.SubscriberDB.SubscriptionProfile)
}
SubscriberDB_SubscriptionProfile::SubscriberDB_SubscriptionProfile(const SubscriberDB_SubscriptionProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_ul_bit_rate_, &from.max_ul_bit_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_dl_bit_rate_) -
    reinterpret_cast<char*>(&max_ul_bit_rate_)) + sizeof(max_dl_bit_rate_));
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.SubscriberDB.SubscriptionProfile)
}

void SubscriberDB_SubscriptionProfile::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&max_ul_bit_rate_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_dl_bit_rate_) -
      reinterpret_cast<char*>(&max_ul_bit_rate_)) + sizeof(max_dl_bit_rate_));
}

SubscriberDB_SubscriptionProfile::~SubscriberDB_SubscriptionProfile() {
  // @@protoc_insertion_point(destructor:magma.mconfig.SubscriberDB.SubscriptionProfile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscriberDB_SubscriptionProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscriberDB_SubscriptionProfile::ArenaDtor(void* object) {
  SubscriberDB_SubscriptionProfile* _this = reinterpret_cast< SubscriberDB_SubscriptionProfile* >(object);
  (void)_this;
}
void SubscriberDB_SubscriptionProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscriberDB_SubscriptionProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscriberDB_SubscriptionProfile& SubscriberDB_SubscriptionProfile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscriberDB_SubscriptionProfile_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void SubscriberDB_SubscriptionProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.SubscriberDB.SubscriptionProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_ul_bit_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_dl_bit_rate_) -
      reinterpret_cast<char*>(&max_ul_bit_rate_)) + sizeof(max_dl_bit_rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriberDB_SubscriptionProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 max_ul_bit_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_ul_bit_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_dl_bit_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_dl_bit_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscriberDB_SubscriptionProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.SubscriberDB.SubscriptionProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 max_ul_bit_rate = 1;
  if (this->max_ul_bit_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_max_ul_bit_rate(), target);
  }

  // uint64 max_dl_bit_rate = 2;
  if (this->max_dl_bit_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_max_dl_bit_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.SubscriberDB.SubscriptionProfile)
  return target;
}

size_t SubscriberDB_SubscriptionProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.SubscriberDB.SubscriptionProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 max_ul_bit_rate = 1;
  if (this->max_ul_bit_rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_ul_bit_rate());
  }

  // uint64 max_dl_bit_rate = 2;
  if (this->max_dl_bit_rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_dl_bit_rate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscriberDB_SubscriptionProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.SubscriberDB.SubscriptionProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscriberDB_SubscriptionProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscriberDB_SubscriptionProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.SubscriberDB.SubscriptionProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.SubscriberDB.SubscriptionProfile)
    MergeFrom(*source);
  }
}

void SubscriberDB_SubscriptionProfile::MergeFrom(const SubscriberDB_SubscriptionProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.SubscriberDB.SubscriptionProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_ul_bit_rate() != 0) {
    _internal_set_max_ul_bit_rate(from._internal_max_ul_bit_rate());
  }
  if (from.max_dl_bit_rate() != 0) {
    _internal_set_max_dl_bit_rate(from._internal_max_dl_bit_rate());
  }
}

void SubscriberDB_SubscriptionProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.SubscriberDB.SubscriptionProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriberDB_SubscriptionProfile::CopyFrom(const SubscriberDB_SubscriptionProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.SubscriberDB.SubscriptionProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriberDB_SubscriptionProfile::IsInitialized() const {
  return true;
}

void SubscriberDB_SubscriptionProfile::InternalSwap(SubscriberDB_SubscriptionProfile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscriberDB_SubscriptionProfile, max_dl_bit_rate_)
      + sizeof(SubscriberDB_SubscriptionProfile::max_dl_bit_rate_)
      - PROTOBUF_FIELD_OFFSET(SubscriberDB_SubscriptionProfile, max_ul_bit_rate_)>(
          reinterpret_cast<char*>(&max_ul_bit_rate_),
          reinterpret_cast<char*>(&other->max_ul_bit_rate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriberDB_SubscriptionProfile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SubscriberDB_SubProfilesEntry_DoNotUse::SubscriberDB_SubProfilesEntry_DoNotUse() {}
SubscriberDB_SubProfilesEntry_DoNotUse::SubscriberDB_SubProfilesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SubscriberDB_SubProfilesEntry_DoNotUse::MergeFrom(const SubscriberDB_SubProfilesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SubscriberDB_SubProfilesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SubscriberDB_SubProfilesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class SubscriberDB::_Internal {
 public:
};

SubscriberDB::SubscriberDB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sub_profiles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.SubscriberDB)
}
SubscriberDB::SubscriberDB(const SubscriberDB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sub_profiles_.MergeFrom(from.sub_profiles_);
  lte_auth_op_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lte_auth_op().empty()) {
    lte_auth_op_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lte_auth_op(), 
      GetArena());
  }
  lte_auth_amf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lte_auth_amf().empty()) {
    lte_auth_amf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lte_auth_amf(), 
      GetArena());
  }
  ::memcpy(&log_level_, &from.log_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&sync_interval_) -
    reinterpret_cast<char*>(&log_level_)) + sizeof(sync_interval_));
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.SubscriberDB)
}

void SubscriberDB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscriberDB_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  lte_auth_op_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lte_auth_amf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&log_level_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sync_interval_) -
      reinterpret_cast<char*>(&log_level_)) + sizeof(sync_interval_));
}

SubscriberDB::~SubscriberDB() {
  // @@protoc_insertion_point(destructor:magma.mconfig.SubscriberDB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscriberDB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  lte_auth_op_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lte_auth_amf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubscriberDB::ArenaDtor(void* object) {
  SubscriberDB* _this = reinterpret_cast< SubscriberDB* >(object);
  (void)_this;
}
void SubscriberDB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscriberDB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscriberDB& SubscriberDB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscriberDB_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void SubscriberDB::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.SubscriberDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sub_profiles_.Clear();
  lte_auth_op_.ClearToEmpty();
  lte_auth_amf_.ClearToEmpty();
  ::memset(&log_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sync_interval_) -
      reinterpret_cast<char*>(&log_level_)) + sizeof(sync_interval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriberDB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .magma.orc8r.LogLevel log_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_log_level(static_cast<::magma::orc8r::LogLevel>(val));
        } else goto handle_unusual;
        continue;
      // bytes lte_auth_op = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_lte_auth_op();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes lte_auth_amf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_lte_auth_amf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .magma.mconfig.SubscriberDB.SubscriptionProfile> sub_profiles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&sub_profiles_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // bool relay_enabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          relay_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hss_relay_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          hss_relay_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sync_interval = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          sync_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscriberDB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.SubscriberDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .magma.orc8r.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_log_level(), target);
  }

  // bytes lte_auth_op = 2;
  if (this->lte_auth_op().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_lte_auth_op(), target);
  }

  // bytes lte_auth_amf = 3;
  if (this->lte_auth_amf().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_lte_auth_amf(), target);
  }

  // map<string, .magma.mconfig.SubscriberDB.SubscriptionProfile> sub_profiles = 4;
  if (!this->_internal_sub_profiles().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::magma::mconfig::SubscriberDB_SubscriptionProfile >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "magma.mconfig.SubscriberDB.SubProfilesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_sub_profiles().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_sub_profiles().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::magma::mconfig::SubscriberDB_SubscriptionProfile >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::magma::mconfig::SubscriberDB_SubscriptionProfile >::const_iterator
          it = this->_internal_sub_profiles().begin();
          it != this->_internal_sub_profiles().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SubscriberDB_SubProfilesEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::magma::mconfig::SubscriberDB_SubscriptionProfile >::const_iterator
          it = this->_internal_sub_profiles().begin();
          it != this->_internal_sub_profiles().end(); ++it) {
        target = SubscriberDB_SubProfilesEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bool relay_enabled = 5;
  if (this->relay_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_relay_enabled(), target);
  }

  // bool hss_relay_enabled = 6;
  if (this->hss_relay_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_hss_relay_enabled(), target);
  }

  // uint32 sync_interval = 7;
  if (this->sync_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_sync_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.SubscriberDB)
  return target;
}

size_t SubscriberDB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.SubscriberDB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .magma.mconfig.SubscriberDB.SubscriptionProfile> sub_profiles = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sub_profiles_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::magma::mconfig::SubscriberDB_SubscriptionProfile >::const_iterator
      it = this->_internal_sub_profiles().begin();
      it != this->_internal_sub_profiles().end(); ++it) {
    total_size += SubscriberDB_SubProfilesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes lte_auth_op = 2;
  if (this->lte_auth_op().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_lte_auth_op());
  }

  // bytes lte_auth_amf = 3;
  if (this->lte_auth_amf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_lte_auth_amf());
  }

  // .magma.orc8r.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_log_level());
  }

  // bool relay_enabled = 5;
  if (this->relay_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool hss_relay_enabled = 6;
  if (this->hss_relay_enabled() != 0) {
    total_size += 1 + 1;
  }

  // uint32 sync_interval = 7;
  if (this->sync_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sync_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscriberDB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.SubscriberDB)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscriberDB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscriberDB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.SubscriberDB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.SubscriberDB)
    MergeFrom(*source);
  }
}

void SubscriberDB::MergeFrom(const SubscriberDB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.SubscriberDB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sub_profiles_.MergeFrom(from.sub_profiles_);
  if (from.lte_auth_op().size() > 0) {
    _internal_set_lte_auth_op(from._internal_lte_auth_op());
  }
  if (from.lte_auth_amf().size() > 0) {
    _internal_set_lte_auth_amf(from._internal_lte_auth_amf());
  }
  if (from.log_level() != 0) {
    _internal_set_log_level(from._internal_log_level());
  }
  if (from.relay_enabled() != 0) {
    _internal_set_relay_enabled(from._internal_relay_enabled());
  }
  if (from.hss_relay_enabled() != 0) {
    _internal_set_hss_relay_enabled(from._internal_hss_relay_enabled());
  }
  if (from.sync_interval() != 0) {
    _internal_set_sync_interval(from._internal_sync_interval());
  }
}

void SubscriberDB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.SubscriberDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriberDB::CopyFrom(const SubscriberDB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.SubscriberDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriberDB::IsInitialized() const {
  return true;
}

void SubscriberDB::InternalSwap(SubscriberDB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sub_profiles_.Swap(&other->sub_profiles_);
  lte_auth_op_.Swap(&other->lte_auth_op_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lte_auth_amf_.Swap(&other->lte_auth_amf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscriberDB, sync_interval_)
      + sizeof(SubscriberDB::sync_interval_)
      - PROTOBUF_FIELD_OFFSET(SubscriberDB, log_level_)>(
          reinterpret_cast<char*>(&log_level_),
          reinterpret_cast<char*>(&other->log_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriberDB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LighttpD::_Internal {
 public:
};

LighttpD::LighttpD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.LighttpD)
}
LighttpD::LighttpD(const LighttpD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&log_level_, &from.log_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_caching_) -
    reinterpret_cast<char*>(&log_level_)) + sizeof(enable_caching_));
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.LighttpD)
}

void LighttpD::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&log_level_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&enable_caching_) -
      reinterpret_cast<char*>(&log_level_)) + sizeof(enable_caching_));
}

LighttpD::~LighttpD() {
  // @@protoc_insertion_point(destructor:magma.mconfig.LighttpD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LighttpD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LighttpD::ArenaDtor(void* object) {
  LighttpD* _this = reinterpret_cast< LighttpD* >(object);
  (void)_this;
}
void LighttpD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LighttpD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LighttpD& LighttpD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LighttpD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void LighttpD::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.LighttpD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&log_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_caching_) -
      reinterpret_cast<char*>(&log_level_)) + sizeof(enable_caching_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LighttpD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .magma.orc8r.LogLevel log_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_log_level(static_cast<::magma::orc8r::LogLevel>(val));
        } else goto handle_unusual;
        continue;
      // bool enable_caching = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enable_caching_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LighttpD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.LighttpD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .magma.orc8r.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_log_level(), target);
  }

  // bool enable_caching = 2;
  if (this->enable_caching() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_caching(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.LighttpD)
  return target;
}

size_t LighttpD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.LighttpD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .magma.orc8r.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_log_level());
  }

  // bool enable_caching = 2;
  if (this->enable_caching() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LighttpD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.LighttpD)
  GOOGLE_DCHECK_NE(&from, this);
  const LighttpD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LighttpD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.LighttpD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.LighttpD)
    MergeFrom(*source);
  }
}

void LighttpD::MergeFrom(const LighttpD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.LighttpD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.log_level() != 0) {
    _internal_set_log_level(from._internal_log_level());
  }
  if (from.enable_caching() != 0) {
    _internal_set_enable_caching(from._internal_enable_caching());
  }
}

void LighttpD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.LighttpD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LighttpD::CopyFrom(const LighttpD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.LighttpD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LighttpD::IsInitialized() const {
  return true;
}

void LighttpD::InternalSwap(LighttpD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LighttpD, enable_caching_)
      + sizeof(LighttpD::enable_caching_)
      - PROTOBUF_FIELD_OFFSET(LighttpD, log_level_)>(
          reinterpret_cast<char*>(&log_level_),
          reinterpret_cast<char*>(&other->log_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LighttpD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MonitorD::_Internal {
 public:
};

MonitorD::MonitorD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.MonitorD)
}
MonitorD::MonitorD(const MonitorD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&log_level_, &from.log_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&polling_interval_) -
    reinterpret_cast<char*>(&log_level_)) + sizeof(polling_interval_));
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.MonitorD)
}

void MonitorD::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&log_level_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&polling_interval_) -
      reinterpret_cast<char*>(&log_level_)) + sizeof(polling_interval_));
}

MonitorD::~MonitorD() {
  // @@protoc_insertion_point(destructor:magma.mconfig.MonitorD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MonitorD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MonitorD::ArenaDtor(void* object) {
  MonitorD* _this = reinterpret_cast< MonitorD* >(object);
  (void)_this;
}
void MonitorD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MonitorD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MonitorD& MonitorD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MonitorD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void MonitorD::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.MonitorD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&log_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&polling_interval_) -
      reinterpret_cast<char*>(&log_level_)) + sizeof(polling_interval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonitorD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .magma.orc8r.LogLevel log_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_log_level(static_cast<::magma::orc8r::LogLevel>(val));
        } else goto handle_unusual;
        continue;
      // int32 polling_interval = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          polling_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MonitorD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.MonitorD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .magma.orc8r.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_log_level(), target);
  }

  // int32 polling_interval = 60;
  if (this->polling_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(60, this->_internal_polling_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.MonitorD)
  return target;
}

size_t MonitorD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.MonitorD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .magma.orc8r.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_log_level());
  }

  // int32 polling_interval = 60;
  if (this->polling_interval() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_polling_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonitorD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.MonitorD)
  GOOGLE_DCHECK_NE(&from, this);
  const MonitorD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MonitorD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.MonitorD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.MonitorD)
    MergeFrom(*source);
  }
}

void MonitorD::MergeFrom(const MonitorD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.MonitorD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.log_level() != 0) {
    _internal_set_log_level(from._internal_log_level());
  }
  if (from.polling_interval() != 0) {
    _internal_set_polling_interval(from._internal_polling_interval());
  }
}

void MonitorD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.MonitorD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonitorD::CopyFrom(const MonitorD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.MonitorD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorD::IsInitialized() const {
  return true;
}

void MonitorD::InternalSwap(MonitorD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MonitorD, polling_interval_)
      + sizeof(MonitorD::polling_interval_)
      - PROTOBUF_FIELD_OFFSET(MonitorD, log_level_)>(
          reinterpret_cast<char*>(&log_level_),
          reinterpret_cast<char*>(&other->log_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MonitorD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DPID::_Internal {
 public:
};

DPID::DPID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.DPID)
}
DPID::DPID(const DPID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  log_level_ = from.log_level_;
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.DPID)
}

void DPID::SharedCtor() {
  log_level_ = 0;
}

DPID::~DPID() {
  // @@protoc_insertion_point(destructor:magma.mconfig.DPID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DPID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DPID::ArenaDtor(void* object) {
  DPID* _this = reinterpret_cast< DPID* >(object);
  (void)_this;
}
void DPID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DPID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DPID& DPID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DPID_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void DPID::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.DPID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DPID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .magma.orc8r.LogLevel log_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_log_level(static_cast<::magma::orc8r::LogLevel>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DPID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.DPID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .magma.orc8r.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_log_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.DPID)
  return target;
}

size_t DPID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.DPID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .magma.orc8r.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_log_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DPID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.DPID)
  GOOGLE_DCHECK_NE(&from, this);
  const DPID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DPID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.DPID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.DPID)
    MergeFrom(*source);
  }
}

void DPID::MergeFrom(const DPID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.DPID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.log_level() != 0) {
    _internal_set_log_level(from._internal_log_level());
  }
}

void DPID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.DPID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DPID::CopyFrom(const DPID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.DPID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DPID::IsInitialized() const {
  return true;
}

void DPID::InternalSwap(DPID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(log_level_, other->log_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DPID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConnectionD::_Internal {
 public:
};

ConnectionD::ConnectionD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.ConnectionD)
}
ConnectionD::ConnectionD(const ConnectionD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  log_level_ = from.log_level_;
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.ConnectionD)
}

void ConnectionD::SharedCtor() {
  log_level_ = 0;
}

ConnectionD::~ConnectionD() {
  // @@protoc_insertion_point(destructor:magma.mconfig.ConnectionD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConnectionD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ConnectionD::ArenaDtor(void* object) {
  ConnectionD* _this = reinterpret_cast< ConnectionD* >(object);
  (void)_this;
}
void ConnectionD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectionD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectionD& ConnectionD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectionD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void ConnectionD::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.ConnectionD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .magma.orc8r.LogLevel log_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_log_level(static_cast<::magma::orc8r::LogLevel>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectionD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.ConnectionD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .magma.orc8r.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_log_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.ConnectionD)
  return target;
}

size_t ConnectionD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.ConnectionD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .magma.orc8r.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_log_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectionD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.ConnectionD)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectionD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectionD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.ConnectionD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.ConnectionD)
    MergeFrom(*source);
  }
}

void ConnectionD::MergeFrom(const ConnectionD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.ConnectionD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.log_level() != 0) {
    _internal_set_log_level(from._internal_log_level());
  }
}

void ConnectionD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.ConnectionD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionD::CopyFrom(const ConnectionD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.ConnectionD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionD::IsInitialized() const {
  return true;
}

void ConnectionD::InternalSwap(ConnectionD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(log_level_, other->log_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LIAgentD::_Internal {
 public:
};

LIAgentD::LIAgentD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nprobe_tasks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.LIAgentD)
}
LIAgentD::LIAgentD(const LIAgentD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nprobe_tasks_(from.nprobe_tasks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  log_level_ = from.log_level_;
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.LIAgentD)
}

void LIAgentD::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LIAgentD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  log_level_ = 0;
}

LIAgentD::~LIAgentD() {
  // @@protoc_insertion_point(destructor:magma.mconfig.LIAgentD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LIAgentD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LIAgentD::ArenaDtor(void* object) {
  LIAgentD* _this = reinterpret_cast< LIAgentD* >(object);
  (void)_this;
}
void LIAgentD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LIAgentD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LIAgentD& LIAgentD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LIAgentD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void LIAgentD::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.LIAgentD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nprobe_tasks_.Clear();
  log_level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LIAgentD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .magma.orc8r.LogLevel log_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_log_level(static_cast<::magma::orc8r::LogLevel>(val));
        } else goto handle_unusual;
        continue;
      // repeated .magma.mconfig.NProbeTask nprobe_tasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nprobe_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LIAgentD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.LIAgentD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .magma.orc8r.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_log_level(), target);
  }

  // repeated .magma.mconfig.NProbeTask nprobe_tasks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nprobe_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_nprobe_tasks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.LIAgentD)
  return target;
}

size_t LIAgentD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.LIAgentD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .magma.mconfig.NProbeTask nprobe_tasks = 2;
  total_size += 1UL * this->_internal_nprobe_tasks_size();
  for (const auto& msg : this->nprobe_tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .magma.orc8r.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_log_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LIAgentD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.LIAgentD)
  GOOGLE_DCHECK_NE(&from, this);
  const LIAgentD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LIAgentD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.LIAgentD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.LIAgentD)
    MergeFrom(*source);
  }
}

void LIAgentD::MergeFrom(const LIAgentD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.LIAgentD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nprobe_tasks_.MergeFrom(from.nprobe_tasks_);
  if (from.log_level() != 0) {
    _internal_set_log_level(from._internal_log_level());
  }
}

void LIAgentD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.LIAgentD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LIAgentD::CopyFrom(const LIAgentD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.LIAgentD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LIAgentD::IsInitialized() const {
  return true;
}

void LIAgentD::InternalSwap(LIAgentD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nprobe_tasks_.InternalSwap(&other->nprobe_tasks_);
  swap(log_level_, other->log_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LIAgentD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NProbeTask::_Internal {
 public:
};

NProbeTask::NProbeTask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.NProbeTask)
}
NProbeTask::NProbeTask(const NProbeTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task_id().empty()) {
    task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_id(), 
      GetArena());
  }
  target_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target_id().empty()) {
    target_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target_id(), 
      GetArena());
  }
  target_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target_type().empty()) {
    target_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target_type(), 
      GetArena());
  }
  delivery_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_delivery_type().empty()) {
    delivery_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_delivery_type(), 
      GetArena());
  }
  domain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_domain_id().empty()) {
    domain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_domain_id(), 
      GetArena());
  }
  correlation_id_ = from.correlation_id_;
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.NProbeTask)
}

void NProbeTask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NProbeTask_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delivery_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  correlation_id_ = PROTOBUF_ULONGLONG(0);
}

NProbeTask::~NProbeTask() {
  // @@protoc_insertion_point(destructor:magma.mconfig.NProbeTask)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NProbeTask::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delivery_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NProbeTask::ArenaDtor(void* object) {
  NProbeTask* _this = reinterpret_cast< NProbeTask* >(object);
  (void)_this;
}
void NProbeTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NProbeTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NProbeTask& NProbeTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NProbeTask_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void NProbeTask::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.NProbeTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_id_.ClearToEmpty();
  target_id_.ClearToEmpty();
  target_type_.ClearToEmpty();
  delivery_type_.ClearToEmpty();
  domain_id_.ClearToEmpty();
  correlation_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NProbeTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.NProbeTask.task_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_target_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.NProbeTask.target_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string target_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_target_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.NProbeTask.target_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string delivery_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_delivery_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.NProbeTask.delivery_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 correlation_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string domain_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_domain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.NProbeTask.domain_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NProbeTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.NProbeTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string task_id = 1;
  if (this->task_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.NProbeTask.task_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_task_id(), target);
  }

  // string target_id = 2;
  if (this->target_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_id().data(), static_cast<int>(this->_internal_target_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.NProbeTask.target_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_target_id(), target);
  }

  // string target_type = 3;
  if (this->target_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_type().data(), static_cast<int>(this->_internal_target_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.NProbeTask.target_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_target_type(), target);
  }

  // string delivery_type = 4;
  if (this->delivery_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delivery_type().data(), static_cast<int>(this->_internal_delivery_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.NProbeTask.delivery_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_delivery_type(), target);
  }

  // uint64 correlation_id = 5;
  if (this->correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_correlation_id(), target);
  }

  // string domain_id = 6;
  if (this->domain_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_domain_id().data(), static_cast<int>(this->_internal_domain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.NProbeTask.domain_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_domain_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.NProbeTask)
  return target;
}

size_t NProbeTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.NProbeTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string task_id = 1;
  if (this->task_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // string target_id = 2;
  if (this->target_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_id());
  }

  // string target_type = 3;
  if (this->target_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_type());
  }

  // string delivery_type = 4;
  if (this->delivery_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delivery_type());
  }

  // string domain_id = 6;
  if (this->domain_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_domain_id());
  }

  // uint64 correlation_id = 5;
  if (this->correlation_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_correlation_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NProbeTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.NProbeTask)
  GOOGLE_DCHECK_NE(&from, this);
  const NProbeTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NProbeTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.NProbeTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.NProbeTask)
    MergeFrom(*source);
  }
}

void NProbeTask::MergeFrom(const NProbeTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.NProbeTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.task_id().size() > 0) {
    _internal_set_task_id(from._internal_task_id());
  }
  if (from.target_id().size() > 0) {
    _internal_set_target_id(from._internal_target_id());
  }
  if (from.target_type().size() > 0) {
    _internal_set_target_type(from._internal_target_type());
  }
  if (from.delivery_type().size() > 0) {
    _internal_set_delivery_type(from._internal_delivery_type());
  }
  if (from.domain_id().size() > 0) {
    _internal_set_domain_id(from._internal_domain_id());
  }
  if (from.correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
}

void NProbeTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.NProbeTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NProbeTask::CopyFrom(const NProbeTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.NProbeTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NProbeTask::IsInitialized() const {
  return true;
}

void NProbeTask::InternalSwap(NProbeTask* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  task_id_.Swap(&other->task_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_id_.Swap(&other->target_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_type_.Swap(&other->target_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  delivery_type_.Swap(&other->delivery_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  domain_id_.Swap(&other->domain_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(correlation_id_, other->correlation_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NProbeTask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DnsD::_Internal {
 public:
};

DnsD::DnsD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.DnsD)
}
DnsD::DnsD(const DnsD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      records_(from.records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&log_level_, &from.log_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&dhcp_server_enabled_) -
    reinterpret_cast<char*>(&log_level_)) + sizeof(dhcp_server_enabled_));
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.DnsD)
}

void DnsD::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DnsD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&log_level_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&dhcp_server_enabled_) -
      reinterpret_cast<char*>(&log_level_)) + sizeof(dhcp_server_enabled_));
}

DnsD::~DnsD() {
  // @@protoc_insertion_point(destructor:magma.mconfig.DnsD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DnsD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DnsD::ArenaDtor(void* object) {
  DnsD* _this = reinterpret_cast< DnsD* >(object);
  (void)_this;
}
void DnsD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DnsD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DnsD& DnsD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DnsD_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void DnsD::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.DnsD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  records_.Clear();
  ::memset(&log_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dhcp_server_enabled_) -
      reinterpret_cast<char*>(&log_level_)) + sizeof(dhcp_server_enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DnsD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .magma.orc8r.LogLevel log_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_log_level(static_cast<::magma::orc8r::LogLevel>(val));
        } else goto handle_unusual;
        continue;
      // bool enable_caching = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enable_caching_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 localTTL = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          localttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .magma.mconfig.GatewayDNSConfigRecordsItems records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // bool dhcp_server_enabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          dhcp_server_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DnsD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.DnsD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .magma.orc8r.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_log_level(), target);
  }

  // bool enable_caching = 2;
  if (this->enable_caching() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_caching(), target);
  }

  // int32 localTTL = 3;
  if (this->localttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_localttl(), target);
  }

  // repeated .magma.mconfig.GatewayDNSConfigRecordsItems records = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_records(i), target, stream);
  }

  // bool dhcp_server_enabled = 5;
  if (this->dhcp_server_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_dhcp_server_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.DnsD)
  return target;
}

size_t DnsD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.DnsD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .magma.mconfig.GatewayDNSConfigRecordsItems records = 4;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .magma.orc8r.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_log_level());
  }

  // int32 localTTL = 3;
  if (this->localttl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_localttl());
  }

  // bool enable_caching = 2;
  if (this->enable_caching() != 0) {
    total_size += 1 + 1;
  }

  // bool dhcp_server_enabled = 5;
  if (this->dhcp_server_enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DnsD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.DnsD)
  GOOGLE_DCHECK_NE(&from, this);
  const DnsD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DnsD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.DnsD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.DnsD)
    MergeFrom(*source);
  }
}

void DnsD::MergeFrom(const DnsD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.DnsD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
  if (from.log_level() != 0) {
    _internal_set_log_level(from._internal_log_level());
  }
  if (from.localttl() != 0) {
    _internal_set_localttl(from._internal_localttl());
  }
  if (from.enable_caching() != 0) {
    _internal_set_enable_caching(from._internal_enable_caching());
  }
  if (from.dhcp_server_enabled() != 0) {
    _internal_set_dhcp_server_enabled(from._internal_dhcp_server_enabled());
  }
}

void DnsD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.DnsD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DnsD::CopyFrom(const DnsD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.DnsD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DnsD::IsInitialized() const {
  return true;
}

void DnsD::InternalSwap(DnsD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  records_.InternalSwap(&other->records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DnsD, dhcp_server_enabled_)
      + sizeof(DnsD::dhcp_server_enabled_)
      - PROTOBUF_FIELD_OFFSET(DnsD, log_level_)>(
          reinterpret_cast<char*>(&log_level_),
          reinterpret_cast<char*>(&other->log_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DnsD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GatewayDNSConfigRecordsItems::_Internal {
 public:
};

GatewayDNSConfigRecordsItems::GatewayDNSConfigRecordsItems(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  a_record_(arena),
  aaaa_record_(arena),
  cname_record_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:magma.mconfig.GatewayDNSConfigRecordsItems)
}
GatewayDNSConfigRecordsItems::GatewayDNSConfigRecordsItems(const GatewayDNSConfigRecordsItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      a_record_(from.a_record_),
      aaaa_record_(from.aaaa_record_),
      cname_record_(from.cname_record_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_domain().empty()) {
    domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_domain(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:magma.mconfig.GatewayDNSConfigRecordsItems)
}

void GatewayDNSConfigRecordsItems::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GatewayDNSConfigRecordsItems_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GatewayDNSConfigRecordsItems::~GatewayDNSConfigRecordsItems() {
  // @@protoc_insertion_point(destructor:magma.mconfig.GatewayDNSConfigRecordsItems)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GatewayDNSConfigRecordsItems::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GatewayDNSConfigRecordsItems::ArenaDtor(void* object) {
  GatewayDNSConfigRecordsItems* _this = reinterpret_cast< GatewayDNSConfigRecordsItems* >(object);
  (void)_this;
}
void GatewayDNSConfigRecordsItems::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GatewayDNSConfigRecordsItems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GatewayDNSConfigRecordsItems& GatewayDNSConfigRecordsItems::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GatewayDNSConfigRecordsItems_lte_2fprotos_2fmconfig_2fmconfigs_2eproto.base);
  return *internal_default_instance();
}


void GatewayDNSConfigRecordsItems::Clear() {
// @@protoc_insertion_point(message_clear_start:magma.mconfig.GatewayDNSConfigRecordsItems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a_record_.Clear();
  aaaa_record_.Clear();
  cname_record_.Clear();
  domain_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GatewayDNSConfigRecordsItems::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string a_record = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_a_record();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.GatewayDNSConfigRecordsItems.a_record"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string aaaa_record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_aaaa_record();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.GatewayDNSConfigRecordsItems.aaaa_record"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string cname_record = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cname_record();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.GatewayDNSConfigRecordsItems.cname_record"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string domain = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_domain();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magma.mconfig.GatewayDNSConfigRecordsItems.domain"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GatewayDNSConfigRecordsItems::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magma.mconfig.GatewayDNSConfigRecordsItems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string a_record = 1;
  for (int i = 0, n = this->_internal_a_record_size(); i < n; i++) {
    const auto& s = this->_internal_a_record(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.GatewayDNSConfigRecordsItems.a_record");
    target = stream->WriteString(1, s, target);
  }

  // repeated string aaaa_record = 2;
  for (int i = 0, n = this->_internal_aaaa_record_size(); i < n; i++) {
    const auto& s = this->_internal_aaaa_record(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.GatewayDNSConfigRecordsItems.aaaa_record");
    target = stream->WriteString(2, s, target);
  }

  // repeated string cname_record = 3;
  for (int i = 0, n = this->_internal_cname_record_size(); i < n; i++) {
    const auto& s = this->_internal_cname_record(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.GatewayDNSConfigRecordsItems.cname_record");
    target = stream->WriteString(3, s, target);
  }

  // string domain = 4;
  if (this->domain().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "magma.mconfig.GatewayDNSConfigRecordsItems.domain");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_domain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magma.mconfig.GatewayDNSConfigRecordsItems)
  return target;
}

size_t GatewayDNSConfigRecordsItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magma.mconfig.GatewayDNSConfigRecordsItems)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string a_record = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(a_record_.size());
  for (int i = 0, n = a_record_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      a_record_.Get(i));
  }

  // repeated string aaaa_record = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(aaaa_record_.size());
  for (int i = 0, n = aaaa_record_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      aaaa_record_.Get(i));
  }

  // repeated string cname_record = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(cname_record_.size());
  for (int i = 0, n = cname_record_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      cname_record_.Get(i));
  }

  // string domain = 4;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_domain());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GatewayDNSConfigRecordsItems::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magma.mconfig.GatewayDNSConfigRecordsItems)
  GOOGLE_DCHECK_NE(&from, this);
  const GatewayDNSConfigRecordsItems* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GatewayDNSConfigRecordsItems>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magma.mconfig.GatewayDNSConfigRecordsItems)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magma.mconfig.GatewayDNSConfigRecordsItems)
    MergeFrom(*source);
  }
}

void GatewayDNSConfigRecordsItems::MergeFrom(const GatewayDNSConfigRecordsItems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magma.mconfig.GatewayDNSConfigRecordsItems)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  a_record_.MergeFrom(from.a_record_);
  aaaa_record_.MergeFrom(from.aaaa_record_);
  cname_record_.MergeFrom(from.cname_record_);
  if (from.domain().size() > 0) {
    _internal_set_domain(from._internal_domain());
  }
}

void GatewayDNSConfigRecordsItems::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magma.mconfig.GatewayDNSConfigRecordsItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GatewayDNSConfigRecordsItems::CopyFrom(const GatewayDNSConfigRecordsItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magma.mconfig.GatewayDNSConfigRecordsItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatewayDNSConfigRecordsItems::IsInitialized() const {
  return true;
}

void GatewayDNSConfigRecordsItems::InternalSwap(GatewayDNSConfigRecordsItems* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  a_record_.InternalSwap(&other->a_record_);
  aaaa_record_.InternalSwap(&other->aaaa_record_);
  cname_record_.InternalSwap(&other->cname_record_);
  domain_.Swap(&other->domain_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GatewayDNSConfigRecordsItems::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mconfig
}  // namespace magma
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::magma::mconfig::SentryConfig* Arena::CreateMaybeMessage< ::magma::mconfig::SentryConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::SentryConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::EnodebD_FDDConfig* Arena::CreateMaybeMessage< ::magma::mconfig::EnodebD_FDDConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::EnodebD_FDDConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::EnodebD_TDDConfig* Arena::CreateMaybeMessage< ::magma::mconfig::EnodebD_TDDConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::EnodebD_TDDConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::EnodebD_EnodebConfig* Arena::CreateMaybeMessage< ::magma::mconfig::EnodebD_EnodebConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::EnodebD_EnodebConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::EnodebD_EnbConfigsBySerialEntry_DoNotUse* Arena::CreateMaybeMessage< ::magma::mconfig::EnodebD_EnbConfigsBySerialEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::EnodebD_EnbConfigsBySerialEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::EnodebD* Arena::CreateMaybeMessage< ::magma::mconfig::EnodebD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::EnodebD >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::PipelineD_AllowedGrePeer* Arena::CreateMaybeMessage< ::magma::mconfig::PipelineD_AllowedGrePeer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::PipelineD_AllowedGrePeer >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::PipelineD_IPDRExportDst* Arena::CreateMaybeMessage< ::magma::mconfig::PipelineD_IPDRExportDst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::PipelineD_IPDRExportDst >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::PipelineD_LiUes* Arena::CreateMaybeMessage< ::magma::mconfig::PipelineD_LiUes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::PipelineD_LiUes >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::PipelineD_HEConfig* Arena::CreateMaybeMessage< ::magma::mconfig::PipelineD_HEConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::PipelineD_HEConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::PipelineD* Arena::CreateMaybeMessage< ::magma::mconfig::PipelineD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::PipelineD >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::SessionD* Arena::CreateMaybeMessage< ::magma::mconfig::SessionD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::SessionD >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::WalletExhaustDetection* Arena::CreateMaybeMessage< ::magma::mconfig::WalletExhaustDetection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::WalletExhaustDetection >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::PolicyDB* Arena::CreateMaybeMessage< ::magma::mconfig::PolicyDB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::PolicyDB >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::RedirectD* Arena::CreateMaybeMessage< ::magma::mconfig::RedirectD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::RedirectD >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::MobilityD* Arena::CreateMaybeMessage< ::magma::mconfig::MobilityD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::MobilityD >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::MME_ApnCorrectionMap* Arena::CreateMaybeMessage< ::magma::mconfig::MME_ApnCorrectionMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::MME_ApnCorrectionMap >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::MME_PlmnConfig* Arena::CreateMaybeMessage< ::magma::mconfig::MME_PlmnConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::MME_PlmnConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::MME_TacList* Arena::CreateMaybeMessage< ::magma::mconfig::MME_TacList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::MME_TacList >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::MME_ServiceAreaMapsEntry_DoNotUse* Arena::CreateMaybeMessage< ::magma::mconfig::MME_ServiceAreaMapsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::MME_ServiceAreaMapsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::MME_ImeiConfig* Arena::CreateMaybeMessage< ::magma::mconfig::MME_ImeiConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::MME_ImeiConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::MME* Arena::CreateMaybeMessage< ::magma::mconfig::MME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::MME >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::FederatedModeMap* Arena::CreateMaybeMessage< ::magma::mconfig::FederatedModeMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::FederatedModeMap >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::ModeMapItem* Arena::CreateMaybeMessage< ::magma::mconfig::ModeMapItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::ModeMapItem >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::SubscriberDB_SubscriptionProfile* Arena::CreateMaybeMessage< ::magma::mconfig::SubscriberDB_SubscriptionProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::SubscriberDB_SubscriptionProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::SubscriberDB_SubProfilesEntry_DoNotUse* Arena::CreateMaybeMessage< ::magma::mconfig::SubscriberDB_SubProfilesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::SubscriberDB_SubProfilesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::SubscriberDB* Arena::CreateMaybeMessage< ::magma::mconfig::SubscriberDB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::SubscriberDB >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::LighttpD* Arena::CreateMaybeMessage< ::magma::mconfig::LighttpD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::LighttpD >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::MonitorD* Arena::CreateMaybeMessage< ::magma::mconfig::MonitorD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::MonitorD >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::DPID* Arena::CreateMaybeMessage< ::magma::mconfig::DPID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::DPID >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::ConnectionD* Arena::CreateMaybeMessage< ::magma::mconfig::ConnectionD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::ConnectionD >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::LIAgentD* Arena::CreateMaybeMessage< ::magma::mconfig::LIAgentD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::LIAgentD >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::NProbeTask* Arena::CreateMaybeMessage< ::magma::mconfig::NProbeTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::NProbeTask >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::DnsD* Arena::CreateMaybeMessage< ::magma::mconfig::DnsD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::DnsD >(arena);
}
template<> PROTOBUF_NOINLINE ::magma::mconfig::GatewayDNSConfigRecordsItems* Arena::CreateMaybeMessage< ::magma::mconfig::GatewayDNSConfigRecordsItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::magma::mconfig::GatewayDNSConfigRecordsItems >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
