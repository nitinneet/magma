// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lte/protos/mconfig/mconfigs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lte_2fprotos_2fmconfig_2fmconfigs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>   // IWYU pragma: export
#include <google/protobuf/map.h>             // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "orc8r/protos/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField
      entries[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField
      aux[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable
      schema[35] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata
      field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable
      serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
namespace magma {
namespace mconfig {
class ConnectionD;
class ConnectionDDefaultTypeInternal;
extern ConnectionDDefaultTypeInternal _ConnectionD_default_instance_;
class DPID;
class DPIDDefaultTypeInternal;
extern DPIDDefaultTypeInternal _DPID_default_instance_;
class DnsD;
class DnsDDefaultTypeInternal;
extern DnsDDefaultTypeInternal _DnsD_default_instance_;
class EnodebD;
class EnodebDDefaultTypeInternal;
extern EnodebDDefaultTypeInternal _EnodebD_default_instance_;
class EnodebD_EnbConfigsBySerialEntry_DoNotUse;
class EnodebD_EnbConfigsBySerialEntry_DoNotUseDefaultTypeInternal;
extern EnodebD_EnbConfigsBySerialEntry_DoNotUseDefaultTypeInternal
    _EnodebD_EnbConfigsBySerialEntry_DoNotUse_default_instance_;
class EnodebD_EnodebConfig;
class EnodebD_EnodebConfigDefaultTypeInternal;
extern EnodebD_EnodebConfigDefaultTypeInternal
    _EnodebD_EnodebConfig_default_instance_;
class EnodebD_FDDConfig;
class EnodebD_FDDConfigDefaultTypeInternal;
extern EnodebD_FDDConfigDefaultTypeInternal
    _EnodebD_FDDConfig_default_instance_;
class EnodebD_TDDConfig;
class EnodebD_TDDConfigDefaultTypeInternal;
extern EnodebD_TDDConfigDefaultTypeInternal
    _EnodebD_TDDConfig_default_instance_;
class FederatedModeMap;
class FederatedModeMapDefaultTypeInternal;
extern FederatedModeMapDefaultTypeInternal _FederatedModeMap_default_instance_;
class GatewayDNSConfigRecordsItems;
class GatewayDNSConfigRecordsItemsDefaultTypeInternal;
extern GatewayDNSConfigRecordsItemsDefaultTypeInternal
    _GatewayDNSConfigRecordsItems_default_instance_;
class LIAgentD;
class LIAgentDDefaultTypeInternal;
extern LIAgentDDefaultTypeInternal _LIAgentD_default_instance_;
class LighttpD;
class LighttpDDefaultTypeInternal;
extern LighttpDDefaultTypeInternal _LighttpD_default_instance_;
class MME;
class MMEDefaultTypeInternal;
extern MMEDefaultTypeInternal _MME_default_instance_;
class MME_ApnCorrectionMap;
class MME_ApnCorrectionMapDefaultTypeInternal;
extern MME_ApnCorrectionMapDefaultTypeInternal
    _MME_ApnCorrectionMap_default_instance_;
class MME_ImeiConfig;
class MME_ImeiConfigDefaultTypeInternal;
extern MME_ImeiConfigDefaultTypeInternal _MME_ImeiConfig_default_instance_;
class MME_PlmnConfig;
class MME_PlmnConfigDefaultTypeInternal;
extern MME_PlmnConfigDefaultTypeInternal _MME_PlmnConfig_default_instance_;
class MME_ServiceAreaMapsEntry_DoNotUse;
class MME_ServiceAreaMapsEntry_DoNotUseDefaultTypeInternal;
extern MME_ServiceAreaMapsEntry_DoNotUseDefaultTypeInternal
    _MME_ServiceAreaMapsEntry_DoNotUse_default_instance_;
class MME_TacList;
class MME_TacListDefaultTypeInternal;
extern MME_TacListDefaultTypeInternal _MME_TacList_default_instance_;
class MobilityD;
class MobilityDDefaultTypeInternal;
extern MobilityDDefaultTypeInternal _MobilityD_default_instance_;
class ModeMapItem;
class ModeMapItemDefaultTypeInternal;
extern ModeMapItemDefaultTypeInternal _ModeMapItem_default_instance_;
class MonitorD;
class MonitorDDefaultTypeInternal;
extern MonitorDDefaultTypeInternal _MonitorD_default_instance_;
class NProbeTask;
class NProbeTaskDefaultTypeInternal;
extern NProbeTaskDefaultTypeInternal _NProbeTask_default_instance_;
class PipelineD;
class PipelineDDefaultTypeInternal;
extern PipelineDDefaultTypeInternal _PipelineD_default_instance_;
class PipelineD_AllowedGrePeer;
class PipelineD_AllowedGrePeerDefaultTypeInternal;
extern PipelineD_AllowedGrePeerDefaultTypeInternal
    _PipelineD_AllowedGrePeer_default_instance_;
class PipelineD_HEConfig;
class PipelineD_HEConfigDefaultTypeInternal;
extern PipelineD_HEConfigDefaultTypeInternal
    _PipelineD_HEConfig_default_instance_;
class PipelineD_IPDRExportDst;
class PipelineD_IPDRExportDstDefaultTypeInternal;
extern PipelineD_IPDRExportDstDefaultTypeInternal
    _PipelineD_IPDRExportDst_default_instance_;
class PipelineD_LiUes;
class PipelineD_LiUesDefaultTypeInternal;
extern PipelineD_LiUesDefaultTypeInternal _PipelineD_LiUes_default_instance_;
class PolicyDB;
class PolicyDBDefaultTypeInternal;
extern PolicyDBDefaultTypeInternal _PolicyDB_default_instance_;
class RedirectD;
class RedirectDDefaultTypeInternal;
extern RedirectDDefaultTypeInternal _RedirectD_default_instance_;
class SentryConfig;
class SentryConfigDefaultTypeInternal;
extern SentryConfigDefaultTypeInternal _SentryConfig_default_instance_;
class SessionD;
class SessionDDefaultTypeInternal;
extern SessionDDefaultTypeInternal _SessionD_default_instance_;
class SubscriberDB;
class SubscriberDBDefaultTypeInternal;
extern SubscriberDBDefaultTypeInternal _SubscriberDB_default_instance_;
class SubscriberDB_SubProfilesEntry_DoNotUse;
class SubscriberDB_SubProfilesEntry_DoNotUseDefaultTypeInternal;
extern SubscriberDB_SubProfilesEntry_DoNotUseDefaultTypeInternal
    _SubscriberDB_SubProfilesEntry_DoNotUse_default_instance_;
class SubscriberDB_SubscriptionProfile;
class SubscriberDB_SubscriptionProfileDefaultTypeInternal;
extern SubscriberDB_SubscriptionProfileDefaultTypeInternal
    _SubscriberDB_SubscriptionProfile_default_instance_;
class WalletExhaustDetection;
class WalletExhaustDetectionDefaultTypeInternal;
extern WalletExhaustDetectionDefaultTypeInternal
    _WalletExhaustDetection_default_instance_;
}  // namespace mconfig
}  // namespace magma
PROTOBUF_NAMESPACE_OPEN
template<>
::magma::mconfig::ConnectionD*
Arena::CreateMaybeMessage<::magma::mconfig::ConnectionD>(Arena*);
template<>
::magma::mconfig::DPID* Arena::CreateMaybeMessage<::magma::mconfig::DPID>(
    Arena*);
template<>
::magma::mconfig::DnsD* Arena::CreateMaybeMessage<::magma::mconfig::DnsD>(
    Arena*);
template<>
::magma::mconfig::EnodebD* Arena::CreateMaybeMessage<::magma::mconfig::EnodebD>(
    Arena*);
template<>
::magma::mconfig::EnodebD_EnbConfigsBySerialEntry_DoNotUse*
Arena::CreateMaybeMessage<
    ::magma::mconfig::EnodebD_EnbConfigsBySerialEntry_DoNotUse>(Arena*);
template<>
::magma::mconfig::EnodebD_EnodebConfig*
Arena::CreateMaybeMessage<::magma::mconfig::EnodebD_EnodebConfig>(Arena*);
template<>
::magma::mconfig::EnodebD_FDDConfig*
Arena::CreateMaybeMessage<::magma::mconfig::EnodebD_FDDConfig>(Arena*);
template<>
::magma::mconfig::EnodebD_TDDConfig*
Arena::CreateMaybeMessage<::magma::mconfig::EnodebD_TDDConfig>(Arena*);
template<>
::magma::mconfig::FederatedModeMap*
Arena::CreateMaybeMessage<::magma::mconfig::FederatedModeMap>(Arena*);
template<>
::magma::mconfig::GatewayDNSConfigRecordsItems*
Arena::CreateMaybeMessage<::magma::mconfig::GatewayDNSConfigRecordsItems>(
    Arena*);
template<>
::magma::mconfig::LIAgentD*
Arena::CreateMaybeMessage<::magma::mconfig::LIAgentD>(Arena*);
template<>
::magma::mconfig::LighttpD*
Arena::CreateMaybeMessage<::magma::mconfig::LighttpD>(Arena*);
template<>
::magma::mconfig::MME* Arena::CreateMaybeMessage<::magma::mconfig::MME>(Arena*);
template<>
::magma::mconfig::MME_ApnCorrectionMap*
Arena::CreateMaybeMessage<::magma::mconfig::MME_ApnCorrectionMap>(Arena*);
template<>
::magma::mconfig::MME_ImeiConfig*
Arena::CreateMaybeMessage<::magma::mconfig::MME_ImeiConfig>(Arena*);
template<>
::magma::mconfig::MME_PlmnConfig*
Arena::CreateMaybeMessage<::magma::mconfig::MME_PlmnConfig>(Arena*);
template<>
::magma::mconfig::MME_ServiceAreaMapsEntry_DoNotUse*
Arena::CreateMaybeMessage<::magma::mconfig::MME_ServiceAreaMapsEntry_DoNotUse>(
    Arena*);
template<>
::magma::mconfig::MME_TacList*
Arena::CreateMaybeMessage<::magma::mconfig::MME_TacList>(Arena*);
template<>
::magma::mconfig::MobilityD*
Arena::CreateMaybeMessage<::magma::mconfig::MobilityD>(Arena*);
template<>
::magma::mconfig::ModeMapItem*
Arena::CreateMaybeMessage<::magma::mconfig::ModeMapItem>(Arena*);
template<>
::magma::mconfig::MonitorD*
Arena::CreateMaybeMessage<::magma::mconfig::MonitorD>(Arena*);
template<>
::magma::mconfig::NProbeTask*
Arena::CreateMaybeMessage<::magma::mconfig::NProbeTask>(Arena*);
template<>
::magma::mconfig::PipelineD*
Arena::CreateMaybeMessage<::magma::mconfig::PipelineD>(Arena*);
template<>
::magma::mconfig::PipelineD_AllowedGrePeer*
Arena::CreateMaybeMessage<::magma::mconfig::PipelineD_AllowedGrePeer>(Arena*);
template<>
::magma::mconfig::PipelineD_HEConfig*
Arena::CreateMaybeMessage<::magma::mconfig::PipelineD_HEConfig>(Arena*);
template<>
::magma::mconfig::PipelineD_IPDRExportDst*
Arena::CreateMaybeMessage<::magma::mconfig::PipelineD_IPDRExportDst>(Arena*);
template<>
::magma::mconfig::PipelineD_LiUes*
Arena::CreateMaybeMessage<::magma::mconfig::PipelineD_LiUes>(Arena*);
template<>
::magma::mconfig::PolicyDB*
Arena::CreateMaybeMessage<::magma::mconfig::PolicyDB>(Arena*);
template<>
::magma::mconfig::RedirectD*
Arena::CreateMaybeMessage<::magma::mconfig::RedirectD>(Arena*);
template<>
::magma::mconfig::SentryConfig*
Arena::CreateMaybeMessage<::magma::mconfig::SentryConfig>(Arena*);
template<>
::magma::mconfig::SessionD*
Arena::CreateMaybeMessage<::magma::mconfig::SessionD>(Arena*);
template<>
::magma::mconfig::SubscriberDB*
Arena::CreateMaybeMessage<::magma::mconfig::SubscriberDB>(Arena*);
template<>
::magma::mconfig::SubscriberDB_SubProfilesEntry_DoNotUse*
Arena::CreateMaybeMessage<
    ::magma::mconfig::SubscriberDB_SubProfilesEntry_DoNotUse>(Arena*);
template<>
::magma::mconfig::SubscriberDB_SubscriptionProfile*
Arena::CreateMaybeMessage<::magma::mconfig::SubscriberDB_SubscriptionProfile>(
    Arena*);
template<>
::magma::mconfig::WalletExhaustDetection*
Arena::CreateMaybeMessage<::magma::mconfig::WalletExhaustDetection>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace magma {
namespace mconfig {

enum EnodebD_CSFBRat : int {
  EnodebD_CSFBRat_CSFBRAT_2G = 0,
  EnodebD_CSFBRat_CSFBRAT_3G = 1,
  EnodebD_CSFBRat_EnodebD_CSFBRat_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EnodebD_CSFBRat_EnodebD_CSFBRat_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EnodebD_CSFBRat_IsValid(int value);
constexpr EnodebD_CSFBRat EnodebD_CSFBRat_CSFBRat_MIN =
    EnodebD_CSFBRat_CSFBRAT_2G;
constexpr EnodebD_CSFBRat EnodebD_CSFBRat_CSFBRat_MAX =
    EnodebD_CSFBRat_CSFBRAT_3G;
constexpr int EnodebD_CSFBRat_CSFBRat_ARRAYSIZE =
    EnodebD_CSFBRat_CSFBRat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnodebD_CSFBRat_descriptor();
template<typename T>
inline const std::string& EnodebD_CSFBRat_Name(T enum_t_value) {
  static_assert(
      ::std::is_same<T, EnodebD_CSFBRat>::value || ::std::is_integral<T>::value,
      "Incorrect type passed to function EnodebD_CSFBRat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
      EnodebD_CSFBRat_descriptor(), enum_t_value);
}
inline bool EnodebD_CSFBRat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EnodebD_CSFBRat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EnodebD_CSFBRat>(
      EnodebD_CSFBRat_descriptor(), name, value);
}
enum PipelineD_HEConfig_EncryptionAlgorithm : int {
  PipelineD_HEConfig_EncryptionAlgorithm_RC4                     = 0,
  PipelineD_HEConfig_EncryptionAlgorithm_AES256_CBC_HMAC_MD5     = 1,
  PipelineD_HEConfig_EncryptionAlgorithm_AES256_ECB_HMAC_MD5     = 2,
  PipelineD_HEConfig_EncryptionAlgorithm_GZIPPED_AES256_ECB_SHA1 = 3,
  PipelineD_HEConfig_EncryptionAlgorithm_PipelineD_HEConfig_EncryptionAlgorithm_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PipelineD_HEConfig_EncryptionAlgorithm_PipelineD_HEConfig_EncryptionAlgorithm_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PipelineD_HEConfig_EncryptionAlgorithm_IsValid(int value);
constexpr PipelineD_HEConfig_EncryptionAlgorithm
    PipelineD_HEConfig_EncryptionAlgorithm_EncryptionAlgorithm_MIN =
        PipelineD_HEConfig_EncryptionAlgorithm_RC4;
constexpr PipelineD_HEConfig_EncryptionAlgorithm
    PipelineD_HEConfig_EncryptionAlgorithm_EncryptionAlgorithm_MAX =
        PipelineD_HEConfig_EncryptionAlgorithm_GZIPPED_AES256_ECB_SHA1;
constexpr int
    PipelineD_HEConfig_EncryptionAlgorithm_EncryptionAlgorithm_ARRAYSIZE =
        PipelineD_HEConfig_EncryptionAlgorithm_EncryptionAlgorithm_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
PipelineD_HEConfig_EncryptionAlgorithm_descriptor();
template<typename T>
inline const std::string& PipelineD_HEConfig_EncryptionAlgorithm_Name(
    T enum_t_value) {
  static_assert(
      ::std::is_same<T, PipelineD_HEConfig_EncryptionAlgorithm>::value ||
          ::std::is_integral<T>::value,
      "Incorrect type passed to function "
      "PipelineD_HEConfig_EncryptionAlgorithm_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
      PipelineD_HEConfig_EncryptionAlgorithm_descriptor(), enum_t_value);
}
inline bool PipelineD_HEConfig_EncryptionAlgorithm_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
    PipelineD_HEConfig_EncryptionAlgorithm* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<
      PipelineD_HEConfig_EncryptionAlgorithm>(
      PipelineD_HEConfig_EncryptionAlgorithm_descriptor(), name, value);
}
enum PipelineD_HEConfig_HashFunction : int {
  PipelineD_HEConfig_HashFunction_MD5    = 0,
  PipelineD_HEConfig_HashFunction_HEX    = 1,
  PipelineD_HEConfig_HashFunction_SHA256 = 2,
  PipelineD_HEConfig_HashFunction_PipelineD_HEConfig_HashFunction_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PipelineD_HEConfig_HashFunction_PipelineD_HEConfig_HashFunction_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PipelineD_HEConfig_HashFunction_IsValid(int value);
constexpr PipelineD_HEConfig_HashFunction
    PipelineD_HEConfig_HashFunction_HashFunction_MIN =
        PipelineD_HEConfig_HashFunction_MD5;
constexpr PipelineD_HEConfig_HashFunction
    PipelineD_HEConfig_HashFunction_HashFunction_MAX =
        PipelineD_HEConfig_HashFunction_SHA256;
constexpr int PipelineD_HEConfig_HashFunction_HashFunction_ARRAYSIZE =
    PipelineD_HEConfig_HashFunction_HashFunction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
PipelineD_HEConfig_HashFunction_descriptor();
template<typename T>
inline const std::string& PipelineD_HEConfig_HashFunction_Name(T enum_t_value) {
  static_assert(
      ::std::is_same<T, PipelineD_HEConfig_HashFunction>::value ||
          ::std::is_integral<T>::value,
      "Incorrect type passed to function "
      "PipelineD_HEConfig_HashFunction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
      PipelineD_HEConfig_HashFunction_descriptor(), enum_t_value);
}
inline bool PipelineD_HEConfig_HashFunction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
    PipelineD_HEConfig_HashFunction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<
      PipelineD_HEConfig_HashFunction>(
      PipelineD_HEConfig_HashFunction_descriptor(), name, value);
}
enum PipelineD_HEConfig_EncodingType : int {
  PipelineD_HEConfig_EncodingType_BASE64  = 0,
  PipelineD_HEConfig_EncodingType_HEX2BIN = 1,
  PipelineD_HEConfig_EncodingType_PipelineD_HEConfig_EncodingType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PipelineD_HEConfig_EncodingType_PipelineD_HEConfig_EncodingType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PipelineD_HEConfig_EncodingType_IsValid(int value);
constexpr PipelineD_HEConfig_EncodingType
    PipelineD_HEConfig_EncodingType_EncodingType_MIN =
        PipelineD_HEConfig_EncodingType_BASE64;
constexpr PipelineD_HEConfig_EncodingType
    PipelineD_HEConfig_EncodingType_EncodingType_MAX =
        PipelineD_HEConfig_EncodingType_HEX2BIN;
constexpr int PipelineD_HEConfig_EncodingType_EncodingType_ARRAYSIZE =
    PipelineD_HEConfig_EncodingType_EncodingType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
PipelineD_HEConfig_EncodingType_descriptor();
template<typename T>
inline const std::string& PipelineD_HEConfig_EncodingType_Name(T enum_t_value) {
  static_assert(
      ::std::is_same<T, PipelineD_HEConfig_EncodingType>::value ||
          ::std::is_integral<T>::value,
      "Incorrect type passed to function "
      "PipelineD_HEConfig_EncodingType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
      PipelineD_HEConfig_EncodingType_descriptor(), enum_t_value);
}
inline bool PipelineD_HEConfig_EncodingType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
    PipelineD_HEConfig_EncodingType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<
      PipelineD_HEConfig_EncodingType>(
      PipelineD_HEConfig_EncodingType_descriptor(), name, value);
}
enum PipelineD_NetworkServices : int {
  PipelineD_NetworkServices_METERING PROTOBUF_DEPRECATED_ENUM = 0,
  PipelineD_NetworkServices_DPI                               = 1,
  PipelineD_NetworkServices_ENFORCEMENT                       = 2,
  PipelineD_NetworkServices_PipelineD_NetworkServices_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PipelineD_NetworkServices_PipelineD_NetworkServices_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PipelineD_NetworkServices_IsValid(int value);
constexpr PipelineD_NetworkServices
    PipelineD_NetworkServices_NetworkServices_MIN =
        PipelineD_NetworkServices_METERING;
constexpr PipelineD_NetworkServices
    PipelineD_NetworkServices_NetworkServices_MAX =
        PipelineD_NetworkServices_ENFORCEMENT;
constexpr int PipelineD_NetworkServices_NetworkServices_ARRAYSIZE =
    PipelineD_NetworkServices_NetworkServices_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
PipelineD_NetworkServices_descriptor();
template<typename T>
inline const std::string& PipelineD_NetworkServices_Name(T enum_t_value) {
  static_assert(
      ::std::is_same<T, PipelineD_NetworkServices>::value ||
          ::std::is_integral<T>::value,
      "Incorrect type passed to function PipelineD_NetworkServices_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
      PipelineD_NetworkServices_descriptor(), enum_t_value);
}
inline bool PipelineD_NetworkServices_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
    PipelineD_NetworkServices* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<
      PipelineD_NetworkServices>(
      PipelineD_NetworkServices_descriptor(), name, value);
}
enum WalletExhaustDetection_Method : int {
  WalletExhaustDetection_Method_GxTrackedRules = 0,
  WalletExhaustDetection_Method_WalletExhaustDetection_Method_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WalletExhaustDetection_Method_WalletExhaustDetection_Method_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WalletExhaustDetection_Method_IsValid(int value);
constexpr WalletExhaustDetection_Method
    WalletExhaustDetection_Method_Method_MIN =
        WalletExhaustDetection_Method_GxTrackedRules;
constexpr WalletExhaustDetection_Method
    WalletExhaustDetection_Method_Method_MAX =
        WalletExhaustDetection_Method_GxTrackedRules;
constexpr int WalletExhaustDetection_Method_Method_ARRAYSIZE =
    WalletExhaustDetection_Method_Method_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
WalletExhaustDetection_Method_descriptor();
template<typename T>
inline const std::string& WalletExhaustDetection_Method_Name(T enum_t_value) {
  static_assert(
      ::std::is_same<T, WalletExhaustDetection_Method>::value ||
          ::std::is_integral<T>::value,
      "Incorrect type passed to function WalletExhaustDetection_Method_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
      WalletExhaustDetection_Method_descriptor(), enum_t_value);
}
inline bool WalletExhaustDetection_Method_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
    WalletExhaustDetection_Method* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<
      WalletExhaustDetection_Method>(
      WalletExhaustDetection_Method_descriptor(), name, value);
}
enum MobilityD_IpAllocatorType : int {
  MobilityD_IpAllocatorType_IP_POOL = 0,
  MobilityD_IpAllocatorType_DHCP    = 1,
  MobilityD_IpAllocatorType_MobilityD_IpAllocatorType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MobilityD_IpAllocatorType_MobilityD_IpAllocatorType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MobilityD_IpAllocatorType_IsValid(int value);
constexpr MobilityD_IpAllocatorType
    MobilityD_IpAllocatorType_IpAllocatorType_MIN =
        MobilityD_IpAllocatorType_IP_POOL;
constexpr MobilityD_IpAllocatorType
    MobilityD_IpAllocatorType_IpAllocatorType_MAX =
        MobilityD_IpAllocatorType_DHCP;
constexpr int MobilityD_IpAllocatorType_IpAllocatorType_ARRAYSIZE =
    MobilityD_IpAllocatorType_IpAllocatorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
MobilityD_IpAllocatorType_descriptor();
template<typename T>
inline const std::string& MobilityD_IpAllocatorType_Name(T enum_t_value) {
  static_assert(
      ::std::is_same<T, MobilityD_IpAllocatorType>::value ||
          ::std::is_integral<T>::value,
      "Incorrect type passed to function MobilityD_IpAllocatorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
      MobilityD_IpAllocatorType_descriptor(), enum_t_value);
}
inline bool MobilityD_IpAllocatorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
    MobilityD_IpAllocatorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<
      MobilityD_IpAllocatorType>(
      MobilityD_IpAllocatorType_descriptor(), name, value);
}
enum MME_NonEPSServiceControl : int {
  MME_NonEPSServiceControl_NON_EPS_SERVICE_CONTROL_OFF       = 0,
  MME_NonEPSServiceControl_NON_EPS_SERVICE_CONTROL_CSFB_SMS  = 1,
  MME_NonEPSServiceControl_NON_EPS_SERVICE_CONTROL_SMS       = 2,
  MME_NonEPSServiceControl_NON_EPS_SERVICE_CONTROL_SMS_ORC8R = 3,
  MME_NonEPSServiceControl_MME_NonEPSServiceControl_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MME_NonEPSServiceControl_MME_NonEPSServiceControl_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MME_NonEPSServiceControl_IsValid(int value);
constexpr MME_NonEPSServiceControl
    MME_NonEPSServiceControl_NonEPSServiceControl_MIN =
        MME_NonEPSServiceControl_NON_EPS_SERVICE_CONTROL_OFF;
constexpr MME_NonEPSServiceControl
    MME_NonEPSServiceControl_NonEPSServiceControl_MAX =
        MME_NonEPSServiceControl_NON_EPS_SERVICE_CONTROL_SMS_ORC8R;
constexpr int MME_NonEPSServiceControl_NonEPSServiceControl_ARRAYSIZE =
    MME_NonEPSServiceControl_NonEPSServiceControl_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
MME_NonEPSServiceControl_descriptor();
template<typename T>
inline const std::string& MME_NonEPSServiceControl_Name(T enum_t_value) {
  static_assert(
      ::std::is_same<T, MME_NonEPSServiceControl>::value ||
          ::std::is_integral<T>::value,
      "Incorrect type passed to function MME_NonEPSServiceControl_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
      MME_NonEPSServiceControl_descriptor(), enum_t_value);
}
inline bool MME_NonEPSServiceControl_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
    MME_NonEPSServiceControl* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<
      MME_NonEPSServiceControl>(
      MME_NonEPSServiceControl_descriptor(), name, value);
}
enum ModeMapItem_FederatedMode : int {
  ModeMapItem_FederatedMode_SPGW_SUBSCRIBER  = 0,
  ModeMapItem_FederatedMode_LOCAL_SUBSCRIBER = 1,
  ModeMapItem_FederatedMode_S8_SUBSCRIBER    = 2,
  ModeMapItem_FederatedMode_ModeMapItem_FederatedMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ModeMapItem_FederatedMode_ModeMapItem_FederatedMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ModeMapItem_FederatedMode_IsValid(int value);
constexpr ModeMapItem_FederatedMode
    ModeMapItem_FederatedMode_FederatedMode_MIN =
        ModeMapItem_FederatedMode_SPGW_SUBSCRIBER;
constexpr ModeMapItem_FederatedMode
    ModeMapItem_FederatedMode_FederatedMode_MAX =
        ModeMapItem_FederatedMode_S8_SUBSCRIBER;
constexpr int ModeMapItem_FederatedMode_FederatedMode_ARRAYSIZE =
    ModeMapItem_FederatedMode_FederatedMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ModeMapItem_FederatedMode_descriptor();
template<typename T>
inline const std::string& ModeMapItem_FederatedMode_Name(T enum_t_value) {
  static_assert(
      ::std::is_same<T, ModeMapItem_FederatedMode>::value ||
          ::std::is_integral<T>::value,
      "Incorrect type passed to function ModeMapItem_FederatedMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
      ModeMapItem_FederatedMode_descriptor(), enum_t_value);
}
inline bool ModeMapItem_FederatedMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
    ModeMapItem_FederatedMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<
      ModeMapItem_FederatedMode>(
      ModeMapItem_FederatedMode_descriptor(), name, value);
}
// ===================================================================

class SentryConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.SentryConfig)
                   */
{
 public:
  inline SentryConfig() : SentryConfig(nullptr) {}
  virtual ~SentryConfig();

  SentryConfig(const SentryConfig& from);
  SentryConfig(SentryConfig&& from) noexcept : SentryConfig() {
    *this = ::std::move(from);
  }

  inline SentryConfig& operator=(const SentryConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SentryConfig& operator=(SentryConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SentryConfig& default_instance();

  static inline const SentryConfig* internal_default_instance() {
    return reinterpret_cast<const SentryConfig*>(
        &_SentryConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;

  friend void swap(SentryConfig& a, SentryConfig& b) { a.Swap(&b); }
  inline void Swap(SentryConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SentryConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SentryConfig* New() const final {
    return CreateMaybeMessage<SentryConfig>(nullptr);
  }

  SentryConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SentryConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SentryConfig& from);
  void MergeFrom(const SentryConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SentryConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.SentryConfig";
  }

 protected:
  explicit SentryConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlPythonFieldNumber    = 1,
    kUrlNativeFieldNumber    = 2,
    kUploadMmeLogFieldNumber = 3,
    kSampleRateFieldNumber   = 4,
  };
  // string url_python = 1;
  void clear_url_python();
  const std::string& url_python() const;
  void set_url_python(const std::string& value);
  void set_url_python(std::string&& value);
  void set_url_python(const char* value);
  void set_url_python(const char* value, size_t size);
  std::string* mutable_url_python();
  std::string* release_url_python();
  void set_allocated_url_python(std::string* url_python);

 private:
  const std::string& _internal_url_python() const;
  void _internal_set_url_python(const std::string& value);
  std::string* _internal_mutable_url_python();

 public:
  // string url_native = 2;
  void clear_url_native();
  const std::string& url_native() const;
  void set_url_native(const std::string& value);
  void set_url_native(std::string&& value);
  void set_url_native(const char* value);
  void set_url_native(const char* value, size_t size);
  std::string* mutable_url_native();
  std::string* release_url_native();
  void set_allocated_url_native(std::string* url_native);

 private:
  const std::string& _internal_url_native() const;
  void _internal_set_url_native(const std::string& value);
  std::string* _internal_mutable_url_native();

 public:
  // bool upload_mme_log = 3;
  void clear_upload_mme_log();
  bool upload_mme_log() const;
  void set_upload_mme_log(bool value);

 private:
  bool _internal_upload_mme_log() const;
  void _internal_set_upload_mme_log(bool value);

 public:
  // float sample_rate = 4;
  void clear_sample_rate();
  float sample_rate() const;
  void set_sample_rate(float value);

 private:
  float _internal_sample_rate() const;
  void _internal_set_sample_rate(float value);

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.SentryConfig)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_python_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_native_;
  bool upload_mme_log_;
  float sample_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class EnodebD_FDDConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.EnodebD.FDDConfig)
                   */
{
 public:
  inline EnodebD_FDDConfig() : EnodebD_FDDConfig(nullptr) {}
  virtual ~EnodebD_FDDConfig();

  EnodebD_FDDConfig(const EnodebD_FDDConfig& from);
  EnodebD_FDDConfig(EnodebD_FDDConfig&& from) noexcept : EnodebD_FDDConfig() {
    *this = ::std::move(from);
  }

  inline EnodebD_FDDConfig& operator=(const EnodebD_FDDConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnodebD_FDDConfig& operator=(EnodebD_FDDConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnodebD_FDDConfig& default_instance();

  static inline const EnodebD_FDDConfig* internal_default_instance() {
    return reinterpret_cast<const EnodebD_FDDConfig*>(
        &_EnodebD_FDDConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;

  friend void swap(EnodebD_FDDConfig& a, EnodebD_FDDConfig& b) { a.Swap(&b); }
  inline void Swap(EnodebD_FDDConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnodebD_FDDConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnodebD_FDDConfig* New() const final {
    return CreateMaybeMessage<EnodebD_FDDConfig>(nullptr);
  }

  EnodebD_FDDConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnodebD_FDDConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnodebD_FDDConfig& from);
  void MergeFrom(const EnodebD_FDDConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnodebD_FDDConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.EnodebD.FDDConfig";
  }

 protected:
  explicit EnodebD_FDDConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEarfcndlFieldNumber = 1,
    kEarfcnulFieldNumber = 2,
  };
  // int32 earfcndl = 1;
  void clear_earfcndl();
  ::PROTOBUF_NAMESPACE_ID::int32 earfcndl() const;
  void set_earfcndl(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_earfcndl() const;
  void _internal_set_earfcndl(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // int32 earfcnul = 2;
  void clear_earfcnul();
  ::PROTOBUF_NAMESPACE_ID::int32 earfcnul() const;
  void set_earfcnul(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_earfcnul() const;
  void _internal_set_earfcnul(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.EnodebD.FDDConfig)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 earfcndl_;
  ::PROTOBUF_NAMESPACE_ID::int32 earfcnul_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class EnodebD_TDDConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.EnodebD.TDDConfig)
                   */
{
 public:
  inline EnodebD_TDDConfig() : EnodebD_TDDConfig(nullptr) {}
  virtual ~EnodebD_TDDConfig();

  EnodebD_TDDConfig(const EnodebD_TDDConfig& from);
  EnodebD_TDDConfig(EnodebD_TDDConfig&& from) noexcept : EnodebD_TDDConfig() {
    *this = ::std::move(from);
  }

  inline EnodebD_TDDConfig& operator=(const EnodebD_TDDConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnodebD_TDDConfig& operator=(EnodebD_TDDConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnodebD_TDDConfig& default_instance();

  static inline const EnodebD_TDDConfig* internal_default_instance() {
    return reinterpret_cast<const EnodebD_TDDConfig*>(
        &_EnodebD_TDDConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;

  friend void swap(EnodebD_TDDConfig& a, EnodebD_TDDConfig& b) { a.Swap(&b); }
  inline void Swap(EnodebD_TDDConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnodebD_TDDConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnodebD_TDDConfig* New() const final {
    return CreateMaybeMessage<EnodebD_TDDConfig>(nullptr);
  }

  EnodebD_TDDConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnodebD_TDDConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnodebD_TDDConfig& from);
  void MergeFrom(const EnodebD_TDDConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnodebD_TDDConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.EnodebD.TDDConfig";
  }

 protected:
  explicit EnodebD_TDDConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEarfcndlFieldNumber               = 1,
    kSubframeAssignmentFieldNumber     = 2,
    kSpecialSubframePatternFieldNumber = 3,
  };
  // int32 earfcndl = 1;
  void clear_earfcndl();
  ::PROTOBUF_NAMESPACE_ID::int32 earfcndl() const;
  void set_earfcndl(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_earfcndl() const;
  void _internal_set_earfcndl(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // int32 subframe_assignment = 2;
  void clear_subframe_assignment();
  ::PROTOBUF_NAMESPACE_ID::int32 subframe_assignment() const;
  void set_subframe_assignment(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_subframe_assignment() const;
  void _internal_set_subframe_assignment(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // int32 special_subframe_pattern = 3;
  void clear_special_subframe_pattern();
  ::PROTOBUF_NAMESPACE_ID::int32 special_subframe_pattern() const;
  void set_special_subframe_pattern(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_special_subframe_pattern() const;
  void _internal_set_special_subframe_pattern(
      ::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.EnodebD.TDDConfig)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 earfcndl_;
  ::PROTOBUF_NAMESPACE_ID::int32 subframe_assignment_;
  ::PROTOBUF_NAMESPACE_ID::int32 special_subframe_pattern_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class EnodebD_EnodebConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.EnodebD.EnodebConfig)
                   */
{
 public:
  inline EnodebD_EnodebConfig() : EnodebD_EnodebConfig(nullptr) {}
  virtual ~EnodebD_EnodebConfig();

  EnodebD_EnodebConfig(const EnodebD_EnodebConfig& from);
  EnodebD_EnodebConfig(EnodebD_EnodebConfig&& from) noexcept
      : EnodebD_EnodebConfig() {
    *this = ::std::move(from);
  }

  inline EnodebD_EnodebConfig& operator=(const EnodebD_EnodebConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnodebD_EnodebConfig& operator=(EnodebD_EnodebConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnodebD_EnodebConfig& default_instance();

  static inline const EnodebD_EnodebConfig* internal_default_instance() {
    return reinterpret_cast<const EnodebD_EnodebConfig*>(
        &_EnodebD_EnodebConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;

  friend void swap(EnodebD_EnodebConfig& a, EnodebD_EnodebConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(EnodebD_EnodebConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnodebD_EnodebConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnodebD_EnodebConfig* New() const final {
    return CreateMaybeMessage<EnodebD_EnodebConfig>(nullptr);
  }

  EnodebD_EnodebConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnodebD_EnodebConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnodebD_EnodebConfig& from);
  void MergeFrom(const EnodebD_EnodebConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnodebD_EnodebConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.EnodebD.EnodebConfig";
  }

 protected:
  explicit EnodebD_EnodebConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceClassFieldNumber            = 6,
    kIpAddressFieldNumber              = 10,
    kEarfcndlFieldNumber               = 1,
    kSubframeAssignmentFieldNumber     = 2,
    kSpecialSubframePatternFieldNumber = 3,
    kPciFieldNumber                    = 4,
    kTransmitEnabledFieldNumber        = 5,
    kBandwidthMhzFieldNumber           = 7,
    kTacFieldNumber                    = 8,
    kCellIdFieldNumber                 = 9,
  };
  // string device_class = 6;
  void clear_device_class();
  const std::string& device_class() const;
  void set_device_class(const std::string& value);
  void set_device_class(std::string&& value);
  void set_device_class(const char* value);
  void set_device_class(const char* value, size_t size);
  std::string* mutable_device_class();
  std::string* release_device_class();
  void set_allocated_device_class(std::string* device_class);

 private:
  const std::string& _internal_device_class() const;
  void _internal_set_device_class(const std::string& value);
  std::string* _internal_mutable_device_class();

 public:
  // string ip_address = 10;
  void clear_ip_address();
  const std::string& ip_address() const;
  void set_ip_address(const std::string& value);
  void set_ip_address(std::string&& value);
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  std::string* mutable_ip_address();
  std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);

 private:
  const std::string& _internal_ip_address() const;
  void _internal_set_ip_address(const std::string& value);
  std::string* _internal_mutable_ip_address();

 public:
  // int32 earfcndl = 1;
  void clear_earfcndl();
  ::PROTOBUF_NAMESPACE_ID::int32 earfcndl() const;
  void set_earfcndl(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_earfcndl() const;
  void _internal_set_earfcndl(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // int32 subframe_assignment = 2;
  void clear_subframe_assignment();
  ::PROTOBUF_NAMESPACE_ID::int32 subframe_assignment() const;
  void set_subframe_assignment(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_subframe_assignment() const;
  void _internal_set_subframe_assignment(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // int32 special_subframe_pattern = 3;
  void clear_special_subframe_pattern();
  ::PROTOBUF_NAMESPACE_ID::int32 special_subframe_pattern() const;
  void set_special_subframe_pattern(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_special_subframe_pattern() const;
  void _internal_set_special_subframe_pattern(
      ::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // int32 pci = 4;
  void clear_pci();
  ::PROTOBUF_NAMESPACE_ID::int32 pci() const;
  void set_pci(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pci() const;
  void _internal_set_pci(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // bool transmit_enabled = 5;
  void clear_transmit_enabled();
  bool transmit_enabled() const;
  void set_transmit_enabled(bool value);

 private:
  bool _internal_transmit_enabled() const;
  void _internal_set_transmit_enabled(bool value);

 public:
  // int32 bandwidth_mhz = 7;
  void clear_bandwidth_mhz();
  ::PROTOBUF_NAMESPACE_ID::int32 bandwidth_mhz() const;
  void set_bandwidth_mhz(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bandwidth_mhz() const;
  void _internal_set_bandwidth_mhz(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // int32 tac = 8;
  void clear_tac();
  ::PROTOBUF_NAMESPACE_ID::int32 tac() const;
  void set_tac(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tac() const;
  void _internal_set_tac(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // int32 cell_id = 9;
  void clear_cell_id();
  ::PROTOBUF_NAMESPACE_ID::int32 cell_id() const;
  void set_cell_id(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cell_id() const;
  void _internal_set_cell_id(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.EnodebD.EnodebConfig)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_class_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
  ::PROTOBUF_NAMESPACE_ID::int32 earfcndl_;
  ::PROTOBUF_NAMESPACE_ID::int32 subframe_assignment_;
  ::PROTOBUF_NAMESPACE_ID::int32 special_subframe_pattern_;
  ::PROTOBUF_NAMESPACE_ID::int32 pci_;
  bool transmit_enabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 bandwidth_mhz_;
  ::PROTOBUF_NAMESPACE_ID::int32 tac_;
  ::PROTOBUF_NAMESPACE_ID::int32 cell_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class EnodebD_EnbConfigsBySerialEntry_DoNotUse
    : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<
          EnodebD_EnbConfigsBySerialEntry_DoNotUse, std::string,
          ::magma::mconfig::EnodebD_EnodebConfig,
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<
      EnodebD_EnbConfigsBySerialEntry_DoNotUse, std::string,
      ::magma::mconfig::EnodebD_EnodebConfig,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE>
      SuperType;
  EnodebD_EnbConfigsBySerialEntry_DoNotUse();
  explicit EnodebD_EnbConfigsBySerialEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const EnodebD_EnbConfigsBySerialEntry_DoNotUse& other);
  static const EnodebD_EnbConfigsBySerialEntry_DoNotUse*
  internal_default_instance() {
    return reinterpret_cast<const EnodebD_EnbConfigsBySerialEntry_DoNotUse*>(
        &_EnodebD_EnbConfigsBySerialEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s->data(), static_cast<int>(s->size()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
        "magma.mconfig.EnodebD.EnbConfigsBySerialEntry.key");
  }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[4];
  }

 public:
};

// -------------------------------------------------------------------

class EnodebD PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.EnodebD)
                   */
{
 public:
  inline EnodebD() : EnodebD(nullptr) {}
  virtual ~EnodebD();

  EnodebD(const EnodebD& from);
  EnodebD(EnodebD&& from) noexcept : EnodebD() { *this = ::std::move(from); }

  inline EnodebD& operator=(const EnodebD& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnodebD& operator=(EnodebD&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnodebD& default_instance();

  static inline const EnodebD* internal_default_instance() {
    return reinterpret_cast<const EnodebD*>(&_EnodebD_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;

  friend void swap(EnodebD& a, EnodebD& b) { a.Swap(&b); }
  inline void Swap(EnodebD* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnodebD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnodebD* New() const final {
    return CreateMaybeMessage<EnodebD>(nullptr);
  }

  EnodebD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnodebD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnodebD& from);
  void MergeFrom(const EnodebD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnodebD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.EnodebD";
  }

 protected:
  explicit EnodebD(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  typedef EnodebD_FDDConfig FDDConfig;
  typedef EnodebD_TDDConfig TDDConfig;
  typedef EnodebD_EnodebConfig EnodebConfig;

  typedef EnodebD_CSFBRat CSFBRat;
  static constexpr CSFBRat CSFBRAT_2G = EnodebD_CSFBRat_CSFBRAT_2G;
  static constexpr CSFBRat CSFBRAT_3G = EnodebD_CSFBRat_CSFBRAT_3G;
  static inline bool CSFBRat_IsValid(int value) {
    return EnodebD_CSFBRat_IsValid(value);
  }
  static constexpr CSFBRat CSFBRat_MIN   = EnodebD_CSFBRat_CSFBRat_MIN;
  static constexpr CSFBRat CSFBRat_MAX   = EnodebD_CSFBRat_CSFBRat_MAX;
  static constexpr int CSFBRat_ARRAYSIZE = EnodebD_CSFBRat_CSFBRat_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CSFBRat_descriptor() {
    return EnodebD_CSFBRat_descriptor();
  }
  template<typename T>
  static inline const std::string& CSFBRat_Name(T enum_t_value) {
    static_assert(
        ::std::is_same<T, CSFBRat>::value || ::std::is_integral<T>::value,
        "Incorrect type passed to function CSFBRat_Name.");
    return EnodebD_CSFBRat_Name(enum_t_value);
  }
  static inline bool CSFBRat_Parse(
      ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CSFBRat* value) {
    return EnodebD_CSFBRat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kArfcn2GFieldNumber                = 11,
    kEnbConfigsBySerialFieldNumber     = 14,
    kPlmnidListFieldNumber             = 5,
    kTddConfigFieldNumber              = 12,
    kFddConfigFieldNumber              = 13,
    kLogLevelFieldNumber               = 1,
    kPciFieldNumber                    = 2,
    kEarfcndlFieldNumber               = 3,
    kBandwidthMhzFieldNumber           = 4,
    kSubframeAssignmentFieldNumber     = 6,
    kSpecialSubframePatternFieldNumber = 7,
    kAllowEnodebTransmitFieldNumber    = 8,
    kTacFieldNumber                    = 9,
    kCsfbRatFieldNumber                = 10,
  };
  // repeated int32 arfcn_2g = 11;
  int arfcn_2g_size() const;

 private:
  int _internal_arfcn_2g_size() const;

 public:
  void clear_arfcn_2g();

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_arfcn_2g(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::PROTOBUF_NAMESPACE_ID::int32>&
  _internal_arfcn_2g() const;
  void _internal_add_arfcn_2g(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::PROTOBUF_NAMESPACE_ID::int32>*
  _internal_mutable_arfcn_2g();

 public:
  ::PROTOBUF_NAMESPACE_ID::int32 arfcn_2g(int index) const;
  void set_arfcn_2g(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_arfcn_2g(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::PROTOBUF_NAMESPACE_ID::int32>&
  arfcn_2g() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::PROTOBUF_NAMESPACE_ID::int32>*
  mutable_arfcn_2g();

  // map<string, .magma.mconfig.EnodebD.EnodebConfig> enb_configs_by_serial =
  // 14;
  int enb_configs_by_serial_size() const;

 private:
  int _internal_enb_configs_by_serial_size() const;

 public:
  void clear_enb_configs_by_serial();

 private:
  const ::PROTOBUF_NAMESPACE_ID::Map<
      std::string, ::magma::mconfig::EnodebD_EnodebConfig>&
  _internal_enb_configs_by_serial() const;
  ::PROTOBUF_NAMESPACE_ID::Map<
      std::string, ::magma::mconfig::EnodebD_EnodebConfig>*
  _internal_mutable_enb_configs_by_serial();

 public:
  const ::PROTOBUF_NAMESPACE_ID::Map<
      std::string, ::magma::mconfig::EnodebD_EnodebConfig>&
  enb_configs_by_serial() const;
  ::PROTOBUF_NAMESPACE_ID::Map<
      std::string, ::magma::mconfig::EnodebD_EnodebConfig>*
  mutable_enb_configs_by_serial();

  // string plmnid_list = 5;
  void clear_plmnid_list();
  const std::string& plmnid_list() const;
  void set_plmnid_list(const std::string& value);
  void set_plmnid_list(std::string&& value);
  void set_plmnid_list(const char* value);
  void set_plmnid_list(const char* value, size_t size);
  std::string* mutable_plmnid_list();
  std::string* release_plmnid_list();
  void set_allocated_plmnid_list(std::string* plmnid_list);

 private:
  const std::string& _internal_plmnid_list() const;
  void _internal_set_plmnid_list(const std::string& value);
  std::string* _internal_mutable_plmnid_list();

 public:
  // .magma.mconfig.EnodebD.TDDConfig tdd_config = 12;
  bool has_tdd_config() const;

 private:
  bool _internal_has_tdd_config() const;

 public:
  void clear_tdd_config();
  const ::magma::mconfig::EnodebD_TDDConfig& tdd_config() const;
  ::magma::mconfig::EnodebD_TDDConfig* release_tdd_config();
  ::magma::mconfig::EnodebD_TDDConfig* mutable_tdd_config();
  void set_allocated_tdd_config(
      ::magma::mconfig::EnodebD_TDDConfig* tdd_config);

 private:
  const ::magma::mconfig::EnodebD_TDDConfig& _internal_tdd_config() const;
  ::magma::mconfig::EnodebD_TDDConfig* _internal_mutable_tdd_config();

 public:
  void unsafe_arena_set_allocated_tdd_config(
      ::magma::mconfig::EnodebD_TDDConfig* tdd_config);
  ::magma::mconfig::EnodebD_TDDConfig* unsafe_arena_release_tdd_config();

  // .magma.mconfig.EnodebD.FDDConfig fdd_config = 13;
  bool has_fdd_config() const;

 private:
  bool _internal_has_fdd_config() const;

 public:
  void clear_fdd_config();
  const ::magma::mconfig::EnodebD_FDDConfig& fdd_config() const;
  ::magma::mconfig::EnodebD_FDDConfig* release_fdd_config();
  ::magma::mconfig::EnodebD_FDDConfig* mutable_fdd_config();
  void set_allocated_fdd_config(
      ::magma::mconfig::EnodebD_FDDConfig* fdd_config);

 private:
  const ::magma::mconfig::EnodebD_FDDConfig& _internal_fdd_config() const;
  ::magma::mconfig::EnodebD_FDDConfig* _internal_mutable_fdd_config();

 public:
  void unsafe_arena_set_allocated_fdd_config(
      ::magma::mconfig::EnodebD_FDDConfig* fdd_config);
  ::magma::mconfig::EnodebD_FDDConfig* unsafe_arena_release_fdd_config();

  // .magma.orc8r.LogLevel log_level = 1;
  void clear_log_level();
  ::magma::orc8r::LogLevel log_level() const;
  void set_log_level(::magma::orc8r::LogLevel value);

 private:
  ::magma::orc8r::LogLevel _internal_log_level() const;
  void _internal_set_log_level(::magma::orc8r::LogLevel value);

 public:
  // int32 pci = 2;
  void clear_pci();
  ::PROTOBUF_NAMESPACE_ID::int32 pci() const;
  void set_pci(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pci() const;
  void _internal_set_pci(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // int32 earfcndl = 3;
  void clear_earfcndl();
  ::PROTOBUF_NAMESPACE_ID::int32 earfcndl() const;
  void set_earfcndl(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_earfcndl() const;
  void _internal_set_earfcndl(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // int32 bandwidth_mhz = 4;
  void clear_bandwidth_mhz();
  ::PROTOBUF_NAMESPACE_ID::int32 bandwidth_mhz() const;
  void set_bandwidth_mhz(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bandwidth_mhz() const;
  void _internal_set_bandwidth_mhz(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // int32 subframe_assignment = 6;
  void clear_subframe_assignment();
  ::PROTOBUF_NAMESPACE_ID::int32 subframe_assignment() const;
  void set_subframe_assignment(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_subframe_assignment() const;
  void _internal_set_subframe_assignment(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // int32 special_subframe_pattern = 7;
  void clear_special_subframe_pattern();
  ::PROTOBUF_NAMESPACE_ID::int32 special_subframe_pattern() const;
  void set_special_subframe_pattern(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_special_subframe_pattern() const;
  void _internal_set_special_subframe_pattern(
      ::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // bool allow_enodeb_transmit = 8;
  void clear_allow_enodeb_transmit();
  bool allow_enodeb_transmit() const;
  void set_allow_enodeb_transmit(bool value);

 private:
  bool _internal_allow_enodeb_transmit() const;
  void _internal_set_allow_enodeb_transmit(bool value);

 public:
  // int32 tac = 9;
  void clear_tac();
  ::PROTOBUF_NAMESPACE_ID::int32 tac() const;
  void set_tac(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tac() const;
  void _internal_set_tac(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // .magma.mconfig.EnodebD.CSFBRat csfb_rat = 10;
  void clear_csfb_rat();
  ::magma::mconfig::EnodebD_CSFBRat csfb_rat() const;
  void set_csfb_rat(::magma::mconfig::EnodebD_CSFBRat value);

 private:
  ::magma::mconfig::EnodebD_CSFBRat _internal_csfb_rat() const;
  void _internal_set_csfb_rat(::magma::mconfig::EnodebD_CSFBRat value);

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.EnodebD)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::PROTOBUF_NAMESPACE_ID::int32>
      arfcn_2g_;
  mutable std::atomic<int> _arfcn_2g_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      EnodebD_EnbConfigsBySerialEntry_DoNotUse, std::string,
      ::magma::mconfig::EnodebD_EnodebConfig,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE>
      enb_configs_by_serial_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plmnid_list_;
  ::magma::mconfig::EnodebD_TDDConfig* tdd_config_;
  ::magma::mconfig::EnodebD_FDDConfig* fdd_config_;
  int log_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 pci_;
  ::PROTOBUF_NAMESPACE_ID::int32 earfcndl_;
  ::PROTOBUF_NAMESPACE_ID::int32 bandwidth_mhz_;
  ::PROTOBUF_NAMESPACE_ID::int32 subframe_assignment_;
  ::PROTOBUF_NAMESPACE_ID::int32 special_subframe_pattern_;
  bool allow_enodeb_transmit_;
  ::PROTOBUF_NAMESPACE_ID::int32 tac_;
  int csfb_rat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class PipelineD_AllowedGrePeer PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.PipelineD.AllowedGrePeer)
                   */
{
 public:
  inline PipelineD_AllowedGrePeer() : PipelineD_AllowedGrePeer(nullptr) {}
  virtual ~PipelineD_AllowedGrePeer();

  PipelineD_AllowedGrePeer(const PipelineD_AllowedGrePeer& from);
  PipelineD_AllowedGrePeer(PipelineD_AllowedGrePeer&& from) noexcept
      : PipelineD_AllowedGrePeer() {
    *this = ::std::move(from);
  }

  inline PipelineD_AllowedGrePeer& operator=(
      const PipelineD_AllowedGrePeer& from) {
    CopyFrom(from);
    return *this;
  }
  inline PipelineD_AllowedGrePeer& operator=(
      PipelineD_AllowedGrePeer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PipelineD_AllowedGrePeer& default_instance();

  static inline const PipelineD_AllowedGrePeer* internal_default_instance() {
    return reinterpret_cast<const PipelineD_AllowedGrePeer*>(
        &_PipelineD_AllowedGrePeer_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;

  friend void swap(PipelineD_AllowedGrePeer& a, PipelineD_AllowedGrePeer& b) {
    a.Swap(&b);
  }
  inline void Swap(PipelineD_AllowedGrePeer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PipelineD_AllowedGrePeer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PipelineD_AllowedGrePeer* New() const final {
    return CreateMaybeMessage<PipelineD_AllowedGrePeer>(nullptr);
  }

  PipelineD_AllowedGrePeer* New(
      ::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PipelineD_AllowedGrePeer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PipelineD_AllowedGrePeer& from);
  void MergeFrom(const PipelineD_AllowedGrePeer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PipelineD_AllowedGrePeer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.PipelineD.AllowedGrePeer";
  }

 protected:
  explicit PipelineD_AllowedGrePeer(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber  = 1,
    kKeyFieldNumber = 2,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);

 private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();

 public:
  // uint32 key = 2;
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::uint32 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.PipelineD.AllowedGrePeer)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class PipelineD_IPDRExportDst PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.PipelineD.IPDRExportDst)
                   */
{
 public:
  inline PipelineD_IPDRExportDst() : PipelineD_IPDRExportDst(nullptr) {}
  virtual ~PipelineD_IPDRExportDst();

  PipelineD_IPDRExportDst(const PipelineD_IPDRExportDst& from);
  PipelineD_IPDRExportDst(PipelineD_IPDRExportDst&& from) noexcept
      : PipelineD_IPDRExportDst() {
    *this = ::std::move(from);
  }

  inline PipelineD_IPDRExportDst& operator=(
      const PipelineD_IPDRExportDst& from) {
    CopyFrom(from);
    return *this;
  }
  inline PipelineD_IPDRExportDst& operator=(
      PipelineD_IPDRExportDst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PipelineD_IPDRExportDst& default_instance();

  static inline const PipelineD_IPDRExportDst* internal_default_instance() {
    return reinterpret_cast<const PipelineD_IPDRExportDst*>(
        &_PipelineD_IPDRExportDst_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;

  friend void swap(PipelineD_IPDRExportDst& a, PipelineD_IPDRExportDst& b) {
    a.Swap(&b);
  }
  inline void Swap(PipelineD_IPDRExportDst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PipelineD_IPDRExportDst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PipelineD_IPDRExportDst* New() const final {
    return CreateMaybeMessage<PipelineD_IPDRExportDst>(nullptr);
  }

  PipelineD_IPDRExportDst* New(
      ::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PipelineD_IPDRExportDst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PipelineD_IPDRExportDst& from);
  void MergeFrom(const PipelineD_IPDRExportDst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PipelineD_IPDRExportDst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.PipelineD.IPDRExportDst";
  }

 protected:
  explicit PipelineD_IPDRExportDst(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber   = 1,
    kPortFieldNumber = 2,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);

 private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();

 public:
  // uint32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.PipelineD.IPDRExportDst)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class PipelineD_LiUes PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.PipelineD.LiUes)
                   */
{
 public:
  inline PipelineD_LiUes() : PipelineD_LiUes(nullptr) {}
  virtual ~PipelineD_LiUes();

  PipelineD_LiUes(const PipelineD_LiUes& from);
  PipelineD_LiUes(PipelineD_LiUes&& from) noexcept : PipelineD_LiUes() {
    *this = ::std::move(from);
  }

  inline PipelineD_LiUes& operator=(const PipelineD_LiUes& from) {
    CopyFrom(from);
    return *this;
  }
  inline PipelineD_LiUes& operator=(PipelineD_LiUes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PipelineD_LiUes& default_instance();

  static inline const PipelineD_LiUes* internal_default_instance() {
    return reinterpret_cast<const PipelineD_LiUes*>(
        &_PipelineD_LiUes_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;

  friend void swap(PipelineD_LiUes& a, PipelineD_LiUes& b) { a.Swap(&b); }
  inline void Swap(PipelineD_LiUes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PipelineD_LiUes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PipelineD_LiUes* New() const final {
    return CreateMaybeMessage<PipelineD_LiUes>(nullptr);
  }

  PipelineD_LiUes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PipelineD_LiUes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PipelineD_LiUes& from);
  void MergeFrom(const PipelineD_LiUes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PipelineD_LiUes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.PipelineD.LiUes";
  }

 protected:
  explicit PipelineD_LiUes(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImsisFieldNumber   = 1,
    kMsisdnsFieldNumber = 2,
    kMacsFieldNumber    = 3,
    kIpsFieldNumber     = 4,
    kImeisFieldNumber   = 5,
  };
  // repeated string imsis = 1;
  int imsis_size() const;

 private:
  int _internal_imsis_size() const;

 public:
  void clear_imsis();
  const std::string& imsis(int index) const;
  std::string* mutable_imsis(int index);
  void set_imsis(int index, const std::string& value);
  void set_imsis(int index, std::string&& value);
  void set_imsis(int index, const char* value);
  void set_imsis(int index, const char* value, size_t size);
  std::string* add_imsis();
  void add_imsis(const std::string& value);
  void add_imsis(std::string&& value);
  void add_imsis(const char* value);
  void add_imsis(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& imsis() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_imsis();

 private:
  const std::string& _internal_imsis(int index) const;
  std::string* _internal_add_imsis();

 public:
  // repeated string msisdns = 2;
  int msisdns_size() const;

 private:
  int _internal_msisdns_size() const;

 public:
  void clear_msisdns();
  const std::string& msisdns(int index) const;
  std::string* mutable_msisdns(int index);
  void set_msisdns(int index, const std::string& value);
  void set_msisdns(int index, std::string&& value);
  void set_msisdns(int index, const char* value);
  void set_msisdns(int index, const char* value, size_t size);
  std::string* add_msisdns();
  void add_msisdns(const std::string& value);
  void add_msisdns(std::string&& value);
  void add_msisdns(const char* value);
  void add_msisdns(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& msisdns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_msisdns();

 private:
  const std::string& _internal_msisdns(int index) const;
  std::string* _internal_add_msisdns();

 public:
  // repeated string macs = 3;
  int macs_size() const;

 private:
  int _internal_macs_size() const;

 public:
  void clear_macs();
  const std::string& macs(int index) const;
  std::string* mutable_macs(int index);
  void set_macs(int index, const std::string& value);
  void set_macs(int index, std::string&& value);
  void set_macs(int index, const char* value);
  void set_macs(int index, const char* value, size_t size);
  std::string* add_macs();
  void add_macs(const std::string& value);
  void add_macs(std::string&& value);
  void add_macs(const char* value);
  void add_macs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& macs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_macs();

 private:
  const std::string& _internal_macs(int index) const;
  std::string* _internal_add_macs();

 public:
  // repeated string ips = 4;
  int ips_size() const;

 private:
  int _internal_ips_size() const;

 public:
  void clear_ips();
  const std::string& ips(int index) const;
  std::string* mutable_ips(int index);
  void set_ips(int index, const std::string& value);
  void set_ips(int index, std::string&& value);
  void set_ips(int index, const char* value);
  void set_ips(int index, const char* value, size_t size);
  std::string* add_ips();
  void add_ips(const std::string& value);
  void add_ips(std::string&& value);
  void add_ips(const char* value);
  void add_ips(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ips() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ips();

 private:
  const std::string& _internal_ips(int index) const;
  std::string* _internal_add_ips();

 public:
  // repeated string imeis = 5;
  int imeis_size() const;

 private:
  int _internal_imeis_size() const;

 public:
  void clear_imeis();
  const std::string& imeis(int index) const;
  std::string* mutable_imeis(int index);
  void set_imeis(int index, const std::string& value);
  void set_imeis(int index, std::string&& value);
  void set_imeis(int index, const char* value);
  void set_imeis(int index, const char* value, size_t size);
  std::string* add_imeis();
  void add_imeis(const std::string& value);
  void add_imeis(std::string&& value);
  void add_imeis(const char* value);
  void add_imeis(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& imeis() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_imeis();

 private:
  const std::string& _internal_imeis(int index) const;
  std::string* _internal_add_imeis();

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.PipelineD.LiUes)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> imsis_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> msisdns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> macs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ips_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> imeis_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class PipelineD_HEConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.PipelineD.HEConfig)
                   */
{
 public:
  inline PipelineD_HEConfig() : PipelineD_HEConfig(nullptr) {}
  virtual ~PipelineD_HEConfig();

  PipelineD_HEConfig(const PipelineD_HEConfig& from);
  PipelineD_HEConfig(PipelineD_HEConfig&& from) noexcept
      : PipelineD_HEConfig() {
    *this = ::std::move(from);
  }

  inline PipelineD_HEConfig& operator=(const PipelineD_HEConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PipelineD_HEConfig& operator=(PipelineD_HEConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PipelineD_HEConfig& default_instance();

  static inline const PipelineD_HEConfig* internal_default_instance() {
    return reinterpret_cast<const PipelineD_HEConfig*>(
        &_PipelineD_HEConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;

  friend void swap(PipelineD_HEConfig& a, PipelineD_HEConfig& b) { a.Swap(&b); }
  inline void Swap(PipelineD_HEConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PipelineD_HEConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PipelineD_HEConfig* New() const final {
    return CreateMaybeMessage<PipelineD_HEConfig>(nullptr);
  }

  PipelineD_HEConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PipelineD_HEConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PipelineD_HEConfig& from);
  void MergeFrom(const PipelineD_HEConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PipelineD_HEConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.PipelineD.HEConfig";
  }

 protected:
  explicit PipelineD_HEConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  typedef PipelineD_HEConfig_EncryptionAlgorithm EncryptionAlgorithm;
  static constexpr EncryptionAlgorithm RC4 =
      PipelineD_HEConfig_EncryptionAlgorithm_RC4;
  static constexpr EncryptionAlgorithm AES256_CBC_HMAC_MD5 =
      PipelineD_HEConfig_EncryptionAlgorithm_AES256_CBC_HMAC_MD5;
  static constexpr EncryptionAlgorithm AES256_ECB_HMAC_MD5 =
      PipelineD_HEConfig_EncryptionAlgorithm_AES256_ECB_HMAC_MD5;
  static constexpr EncryptionAlgorithm GZIPPED_AES256_ECB_SHA1 =
      PipelineD_HEConfig_EncryptionAlgorithm_GZIPPED_AES256_ECB_SHA1;
  static inline bool EncryptionAlgorithm_IsValid(int value) {
    return PipelineD_HEConfig_EncryptionAlgorithm_IsValid(value);
  }
  static constexpr EncryptionAlgorithm EncryptionAlgorithm_MIN =
      PipelineD_HEConfig_EncryptionAlgorithm_EncryptionAlgorithm_MIN;
  static constexpr EncryptionAlgorithm EncryptionAlgorithm_MAX =
      PipelineD_HEConfig_EncryptionAlgorithm_EncryptionAlgorithm_MAX;
  static constexpr int EncryptionAlgorithm_ARRAYSIZE =
      PipelineD_HEConfig_EncryptionAlgorithm_EncryptionAlgorithm_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EncryptionAlgorithm_descriptor() {
    return PipelineD_HEConfig_EncryptionAlgorithm_descriptor();
  }
  template<typename T>
  static inline const std::string& EncryptionAlgorithm_Name(T enum_t_value) {
    static_assert(
        ::std::is_same<T, EncryptionAlgorithm>::value ||
            ::std::is_integral<T>::value,
        "Incorrect type passed to function EncryptionAlgorithm_Name.");
    return PipelineD_HEConfig_EncryptionAlgorithm_Name(enum_t_value);
  }
  static inline bool EncryptionAlgorithm_Parse(
      ::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EncryptionAlgorithm* value) {
    return PipelineD_HEConfig_EncryptionAlgorithm_Parse(name, value);
  }

  typedef PipelineD_HEConfig_HashFunction HashFunction;
  static constexpr HashFunction MD5    = PipelineD_HEConfig_HashFunction_MD5;
  static constexpr HashFunction HEX    = PipelineD_HEConfig_HashFunction_HEX;
  static constexpr HashFunction SHA256 = PipelineD_HEConfig_HashFunction_SHA256;
  static inline bool HashFunction_IsValid(int value) {
    return PipelineD_HEConfig_HashFunction_IsValid(value);
  }
  static constexpr HashFunction HashFunction_MIN =
      PipelineD_HEConfig_HashFunction_HashFunction_MIN;
  static constexpr HashFunction HashFunction_MAX =
      PipelineD_HEConfig_HashFunction_HashFunction_MAX;
  static constexpr int HashFunction_ARRAYSIZE =
      PipelineD_HEConfig_HashFunction_HashFunction_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  HashFunction_descriptor() {
    return PipelineD_HEConfig_HashFunction_descriptor();
  }
  template<typename T>
  static inline const std::string& HashFunction_Name(T enum_t_value) {
    static_assert(
        ::std::is_same<T, HashFunction>::value || ::std::is_integral<T>::value,
        "Incorrect type passed to function HashFunction_Name.");
    return PipelineD_HEConfig_HashFunction_Name(enum_t_value);
  }
  static inline bool HashFunction_Parse(
      ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HashFunction* value) {
    return PipelineD_HEConfig_HashFunction_Parse(name, value);
  }

  typedef PipelineD_HEConfig_EncodingType EncodingType;
  static constexpr EncodingType BASE64 = PipelineD_HEConfig_EncodingType_BASE64;
  static constexpr EncodingType HEX2BIN =
      PipelineD_HEConfig_EncodingType_HEX2BIN;
  static inline bool EncodingType_IsValid(int value) {
    return PipelineD_HEConfig_EncodingType_IsValid(value);
  }
  static constexpr EncodingType EncodingType_MIN =
      PipelineD_HEConfig_EncodingType_EncodingType_MIN;
  static constexpr EncodingType EncodingType_MAX =
      PipelineD_HEConfig_EncodingType_EncodingType_MAX;
  static constexpr int EncodingType_ARRAYSIZE =
      PipelineD_HEConfig_EncodingType_EncodingType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EncodingType_descriptor() {
    return PipelineD_HEConfig_EncodingType_descriptor();
  }
  template<typename T>
  static inline const std::string& EncodingType_Name(T enum_t_value) {
    static_assert(
        ::std::is_same<T, EncodingType>::value || ::std::is_integral<T>::value,
        "Incorrect type passed to function EncodingType_Name.");
    return PipelineD_HEConfig_EncodingType_Name(enum_t_value);
  }
  static inline bool EncodingType_Parse(
      ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EncodingType* value) {
    return PipelineD_HEConfig_EncodingType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptionKeyFieldNumber          = 6,
    kHmacKeyFieldNumber                = 7,
    kEnableHeaderEnrichmentFieldNumber = 1,
    kEnableEncryptionFieldNumber       = 2,
    kEncryptionAlgorithmFieldNumber    = 3,
    kHashFunctionFieldNumber           = 4,
    kEncodingTypeFieldNumber           = 5,
  };
  // string encryption_key = 6;
  void clear_encryption_key();
  const std::string& encryption_key() const;
  void set_encryption_key(const std::string& value);
  void set_encryption_key(std::string&& value);
  void set_encryption_key(const char* value);
  void set_encryption_key(const char* value, size_t size);
  std::string* mutable_encryption_key();
  std::string* release_encryption_key();
  void set_allocated_encryption_key(std::string* encryption_key);

 private:
  const std::string& _internal_encryption_key() const;
  void _internal_set_encryption_key(const std::string& value);
  std::string* _internal_mutable_encryption_key();

 public:
  // string hmac_key = 7;
  void clear_hmac_key();
  const std::string& hmac_key() const;
  void set_hmac_key(const std::string& value);
  void set_hmac_key(std::string&& value);
  void set_hmac_key(const char* value);
  void set_hmac_key(const char* value, size_t size);
  std::string* mutable_hmac_key();
  std::string* release_hmac_key();
  void set_allocated_hmac_key(std::string* hmac_key);

 private:
  const std::string& _internal_hmac_key() const;
  void _internal_set_hmac_key(const std::string& value);
  std::string* _internal_mutable_hmac_key();

 public:
  // bool enable_header_enrichment = 1;
  void clear_enable_header_enrichment();
  bool enable_header_enrichment() const;
  void set_enable_header_enrichment(bool value);

 private:
  bool _internal_enable_header_enrichment() const;
  void _internal_set_enable_header_enrichment(bool value);

 public:
  // bool enable_encryption = 2;
  void clear_enable_encryption();
  bool enable_encryption() const;
  void set_enable_encryption(bool value);

 private:
  bool _internal_enable_encryption() const;
  void _internal_set_enable_encryption(bool value);

 public:
  // .magma.mconfig.PipelineD.HEConfig.EncryptionAlgorithm encryptionAlgorithm =
  // 3;
  void clear_encryptionalgorithm();
  ::magma::mconfig::PipelineD_HEConfig_EncryptionAlgorithm encryptionalgorithm()
      const;
  void set_encryptionalgorithm(
      ::magma::mconfig::PipelineD_HEConfig_EncryptionAlgorithm value);

 private:
  ::magma::mconfig::PipelineD_HEConfig_EncryptionAlgorithm
  _internal_encryptionalgorithm() const;
  void _internal_set_encryptionalgorithm(
      ::magma::mconfig::PipelineD_HEConfig_EncryptionAlgorithm value);

 public:
  // .magma.mconfig.PipelineD.HEConfig.HashFunction hashFunction = 4;
  void clear_hashfunction();
  ::magma::mconfig::PipelineD_HEConfig_HashFunction hashfunction() const;
  void set_hashfunction(
      ::magma::mconfig::PipelineD_HEConfig_HashFunction value);

 private:
  ::magma::mconfig::PipelineD_HEConfig_HashFunction _internal_hashfunction()
      const;
  void _internal_set_hashfunction(
      ::magma::mconfig::PipelineD_HEConfig_HashFunction value);

 public:
  // .magma.mconfig.PipelineD.HEConfig.EncodingType encodingType = 5;
  void clear_encodingtype();
  ::magma::mconfig::PipelineD_HEConfig_EncodingType encodingtype() const;
  void set_encodingtype(
      ::magma::mconfig::PipelineD_HEConfig_EncodingType value);

 private:
  ::magma::mconfig::PipelineD_HEConfig_EncodingType _internal_encodingtype()
      const;
  void _internal_set_encodingtype(
      ::magma::mconfig::PipelineD_HEConfig_EncodingType value);

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.PipelineD.HEConfig)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encryption_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hmac_key_;
  bool enable_header_enrichment_;
  bool enable_encryption_;
  int encryptionalgorithm_;
  int hashfunction_;
  int encodingtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class PipelineD PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.PipelineD)
                   */
{
 public:
  inline PipelineD() : PipelineD(nullptr) {}
  virtual ~PipelineD();

  PipelineD(const PipelineD& from);
  PipelineD(PipelineD&& from) noexcept : PipelineD() {
    *this = ::std::move(from);
  }

  inline PipelineD& operator=(const PipelineD& from) {
    CopyFrom(from);
    return *this;
  }
  inline PipelineD& operator=(PipelineD&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PipelineD& default_instance();

  static inline const PipelineD* internal_default_instance() {
    return reinterpret_cast<const PipelineD*>(&_PipelineD_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;

  friend void swap(PipelineD& a, PipelineD& b) { a.Swap(&b); }
  inline void Swap(PipelineD* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PipelineD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PipelineD* New() const final {
    return CreateMaybeMessage<PipelineD>(nullptr);
  }

  PipelineD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PipelineD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PipelineD& from);
  void MergeFrom(const PipelineD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PipelineD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.PipelineD";
  }

 protected:
  explicit PipelineD(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  typedef PipelineD_AllowedGrePeer AllowedGrePeer;
  typedef PipelineD_IPDRExportDst IPDRExportDst;
  typedef PipelineD_LiUes LiUes;
  typedef PipelineD_HEConfig HEConfig;

  typedef PipelineD_NetworkServices NetworkServices;
  PROTOBUF_DEPRECATED_ENUM static constexpr NetworkServices METERING =
      PipelineD_NetworkServices_METERING;
  static constexpr NetworkServices DPI = PipelineD_NetworkServices_DPI;
  static constexpr NetworkServices ENFORCEMENT =
      PipelineD_NetworkServices_ENFORCEMENT;
  static inline bool NetworkServices_IsValid(int value) {
    return PipelineD_NetworkServices_IsValid(value);
  }
  static constexpr NetworkServices NetworkServices_MIN =
      PipelineD_NetworkServices_NetworkServices_MIN;
  static constexpr NetworkServices NetworkServices_MAX =
      PipelineD_NetworkServices_NetworkServices_MAX;
  static constexpr int NetworkServices_ARRAYSIZE =
      PipelineD_NetworkServices_NetworkServices_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NetworkServices_descriptor() {
    return PipelineD_NetworkServices_descriptor();
  }
  template<typename T>
  static inline const std::string& NetworkServices_Name(T enum_t_value) {
    static_assert(
        ::std::is_same<T, NetworkServices>::value ||
            ::std::is_integral<T>::value,
        "Incorrect type passed to function NetworkServices_Name.");
    return PipelineD_NetworkServices_Name(enum_t_value);
  }
  static inline bool NetworkServices_Parse(
      ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetworkServices* value) {
    return PipelineD_NetworkServices_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kServicesFieldNumber                 = 8,
    kAllowedGrePeersFieldNumber          = 9,
    kUeIpBlockFieldNumber                = 2,
    kDefaultRuleIdFieldNumber            = 6,
    kSgiManagementIfaceVlanFieldNumber   = 13,
    kSgiManagementIfaceIpAddrFieldNumber = 14,
    kSgiManagementIfaceGwFieldNumber     = 15,
    kIpdrExportDstFieldNumber            = 10,
    kLiUesFieldNumber                    = 12,
    kHeConfigFieldNumber                 = 17,
    kLogLevelFieldNumber                 = 1,
    kNatEnabledFieldNumber               = 3,
  };
  // repeated .magma.mconfig.PipelineD.NetworkServices services = 8;
  int services_size() const;

 private:
  int _internal_services_size() const;

 public:
  void clear_services();

 private:
  ::magma::mconfig::PipelineD_NetworkServices _internal_services(
      int index) const;
  void _internal_add_services(
      ::magma::mconfig::PipelineD_NetworkServices value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_services();

 public:
  ::magma::mconfig::PipelineD_NetworkServices services(int index) const;
  void set_services(
      int index, ::magma::mconfig::PipelineD_NetworkServices value);
  void add_services(::magma::mconfig::PipelineD_NetworkServices value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& services() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_services();

  // repeated .magma.mconfig.PipelineD.AllowedGrePeer allowed_gre_peers = 9;
  int allowed_gre_peers_size() const;

 private:
  int _internal_allowed_gre_peers_size() const;

 public:
  void clear_allowed_gre_peers();
  ::magma::mconfig::PipelineD_AllowedGrePeer* mutable_allowed_gre_peers(
      int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::magma::mconfig::PipelineD_AllowedGrePeer>*
  mutable_allowed_gre_peers();

 private:
  const ::magma::mconfig::PipelineD_AllowedGrePeer& _internal_allowed_gre_peers(
      int index) const;
  ::magma::mconfig::PipelineD_AllowedGrePeer* _internal_add_allowed_gre_peers();

 public:
  const ::magma::mconfig::PipelineD_AllowedGrePeer& allowed_gre_peers(
      int index) const;
  ::magma::mconfig::PipelineD_AllowedGrePeer* add_allowed_gre_peers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::magma::mconfig::PipelineD_AllowedGrePeer>&
  allowed_gre_peers() const;

  // string ue_ip_block = 2;
  void clear_ue_ip_block();
  const std::string& ue_ip_block() const;
  void set_ue_ip_block(const std::string& value);
  void set_ue_ip_block(std::string&& value);
  void set_ue_ip_block(const char* value);
  void set_ue_ip_block(const char* value, size_t size);
  std::string* mutable_ue_ip_block();
  std::string* release_ue_ip_block();
  void set_allocated_ue_ip_block(std::string* ue_ip_block);

 private:
  const std::string& _internal_ue_ip_block() const;
  void _internal_set_ue_ip_block(const std::string& value);
  std::string* _internal_mutable_ue_ip_block();

 public:
  // string default_rule_id = 6;
  void clear_default_rule_id();
  const std::string& default_rule_id() const;
  void set_default_rule_id(const std::string& value);
  void set_default_rule_id(std::string&& value);
  void set_default_rule_id(const char* value);
  void set_default_rule_id(const char* value, size_t size);
  std::string* mutable_default_rule_id();
  std::string* release_default_rule_id();
  void set_allocated_default_rule_id(std::string* default_rule_id);

 private:
  const std::string& _internal_default_rule_id() const;
  void _internal_set_default_rule_id(const std::string& value);
  std::string* _internal_mutable_default_rule_id();

 public:
  // string sgi_management_iface_vlan = 13;
  void clear_sgi_management_iface_vlan();
  const std::string& sgi_management_iface_vlan() const;
  void set_sgi_management_iface_vlan(const std::string& value);
  void set_sgi_management_iface_vlan(std::string&& value);
  void set_sgi_management_iface_vlan(const char* value);
  void set_sgi_management_iface_vlan(const char* value, size_t size);
  std::string* mutable_sgi_management_iface_vlan();
  std::string* release_sgi_management_iface_vlan();
  void set_allocated_sgi_management_iface_vlan(
      std::string* sgi_management_iface_vlan);

 private:
  const std::string& _internal_sgi_management_iface_vlan() const;
  void _internal_set_sgi_management_iface_vlan(const std::string& value);
  std::string* _internal_mutable_sgi_management_iface_vlan();

 public:
  // string sgi_management_iface_ip_addr = 14;
  void clear_sgi_management_iface_ip_addr();
  const std::string& sgi_management_iface_ip_addr() const;
  void set_sgi_management_iface_ip_addr(const std::string& value);
  void set_sgi_management_iface_ip_addr(std::string&& value);
  void set_sgi_management_iface_ip_addr(const char* value);
  void set_sgi_management_iface_ip_addr(const char* value, size_t size);
  std::string* mutable_sgi_management_iface_ip_addr();
  std::string* release_sgi_management_iface_ip_addr();
  void set_allocated_sgi_management_iface_ip_addr(
      std::string* sgi_management_iface_ip_addr);

 private:
  const std::string& _internal_sgi_management_iface_ip_addr() const;
  void _internal_set_sgi_management_iface_ip_addr(const std::string& value);
  std::string* _internal_mutable_sgi_management_iface_ip_addr();

 public:
  // string sgi_management_iface_gw = 15;
  void clear_sgi_management_iface_gw();
  const std::string& sgi_management_iface_gw() const;
  void set_sgi_management_iface_gw(const std::string& value);
  void set_sgi_management_iface_gw(std::string&& value);
  void set_sgi_management_iface_gw(const char* value);
  void set_sgi_management_iface_gw(const char* value, size_t size);
  std::string* mutable_sgi_management_iface_gw();
  std::string* release_sgi_management_iface_gw();
  void set_allocated_sgi_management_iface_gw(
      std::string* sgi_management_iface_gw);

 private:
  const std::string& _internal_sgi_management_iface_gw() const;
  void _internal_set_sgi_management_iface_gw(const std::string& value);
  std::string* _internal_mutable_sgi_management_iface_gw();

 public:
  // .magma.mconfig.PipelineD.IPDRExportDst ipdr_export_dst = 10;
  bool has_ipdr_export_dst() const;

 private:
  bool _internal_has_ipdr_export_dst() const;

 public:
  void clear_ipdr_export_dst();
  const ::magma::mconfig::PipelineD_IPDRExportDst& ipdr_export_dst() const;
  ::magma::mconfig::PipelineD_IPDRExportDst* release_ipdr_export_dst();
  ::magma::mconfig::PipelineD_IPDRExportDst* mutable_ipdr_export_dst();
  void set_allocated_ipdr_export_dst(
      ::magma::mconfig::PipelineD_IPDRExportDst* ipdr_export_dst);

 private:
  const ::magma::mconfig::PipelineD_IPDRExportDst& _internal_ipdr_export_dst()
      const;
  ::magma::mconfig::PipelineD_IPDRExportDst*
  _internal_mutable_ipdr_export_dst();

 public:
  void unsafe_arena_set_allocated_ipdr_export_dst(
      ::magma::mconfig::PipelineD_IPDRExportDst* ipdr_export_dst);
  ::magma::mconfig::PipelineD_IPDRExportDst*
  unsafe_arena_release_ipdr_export_dst();

  // .magma.mconfig.PipelineD.LiUes li_ues = 12;
  bool has_li_ues() const;

 private:
  bool _internal_has_li_ues() const;

 public:
  void clear_li_ues();
  const ::magma::mconfig::PipelineD_LiUes& li_ues() const;
  ::magma::mconfig::PipelineD_LiUes* release_li_ues();
  ::magma::mconfig::PipelineD_LiUes* mutable_li_ues();
  void set_allocated_li_ues(::magma::mconfig::PipelineD_LiUes* li_ues);

 private:
  const ::magma::mconfig::PipelineD_LiUes& _internal_li_ues() const;
  ::magma::mconfig::PipelineD_LiUes* _internal_mutable_li_ues();

 public:
  void unsafe_arena_set_allocated_li_ues(
      ::magma::mconfig::PipelineD_LiUes* li_ues);
  ::magma::mconfig::PipelineD_LiUes* unsafe_arena_release_li_ues();

  // .magma.mconfig.PipelineD.HEConfig he_config = 17;
  bool has_he_config() const;

 private:
  bool _internal_has_he_config() const;

 public:
  void clear_he_config();
  const ::magma::mconfig::PipelineD_HEConfig& he_config() const;
  ::magma::mconfig::PipelineD_HEConfig* release_he_config();
  ::magma::mconfig::PipelineD_HEConfig* mutable_he_config();
  void set_allocated_he_config(::magma::mconfig::PipelineD_HEConfig* he_config);

 private:
  const ::magma::mconfig::PipelineD_HEConfig& _internal_he_config() const;
  ::magma::mconfig::PipelineD_HEConfig* _internal_mutable_he_config();

 public:
  void unsafe_arena_set_allocated_he_config(
      ::magma::mconfig::PipelineD_HEConfig* he_config);
  ::magma::mconfig::PipelineD_HEConfig* unsafe_arena_release_he_config();

  // .magma.orc8r.LogLevel log_level = 1;
  void clear_log_level();
  ::magma::orc8r::LogLevel log_level() const;
  void set_log_level(::magma::orc8r::LogLevel value);

 private:
  ::magma::orc8r::LogLevel _internal_log_level() const;
  void _internal_set_log_level(::magma::orc8r::LogLevel value);

 public:
  // bool nat_enabled = 3;
  void clear_nat_enabled();
  bool nat_enabled() const;
  void set_nat_enabled(bool value);

 private:
  bool _internal_nat_enabled() const;
  void _internal_set_nat_enabled(bool value);

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.PipelineD)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> services_;
  mutable std::atomic<int> _services_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::magma::mconfig::PipelineD_AllowedGrePeer>
      allowed_gre_peers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ue_ip_block_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_rule_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sgi_management_iface_vlan_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr
      sgi_management_iface_ip_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sgi_management_iface_gw_;
  ::magma::mconfig::PipelineD_IPDRExportDst* ipdr_export_dst_;
  ::magma::mconfig::PipelineD_LiUes* li_ues_;
  ::magma::mconfig::PipelineD_HEConfig* he_config_;
  int log_level_;
  bool nat_enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class SessionD PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.SessionD)
                   */
{
 public:
  inline SessionD() : SessionD(nullptr) {}
  virtual ~SessionD();

  SessionD(const SessionD& from);
  SessionD(SessionD&& from) noexcept : SessionD() { *this = ::std::move(from); }

  inline SessionD& operator=(const SessionD& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionD& operator=(SessionD&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionD& default_instance();

  static inline const SessionD* internal_default_instance() {
    return reinterpret_cast<const SessionD*>(&_SessionD_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;

  friend void swap(SessionD& a, SessionD& b) { a.Swap(&b); }
  inline void Swap(SessionD* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionD* New() const final {
    return CreateMaybeMessage<SessionD>(nullptr);
  }

  SessionD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionD& from);
  void MergeFrom(const SessionD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.SessionD";
  }

 protected:
  explicit SessionD(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWalletExhaustDetectionFieldNumber = 3,
    kSentryConfigFieldNumber           = 5,
    kLogLevelFieldNumber               = 1,
    kRelayEnabledFieldNumber           = 2,
    kGxGyRelayEnabledFieldNumber       = 4,
  };
  // .magma.mconfig.WalletExhaustDetection wallet_exhaust_detection = 3;
  bool has_wallet_exhaust_detection() const;

 private:
  bool _internal_has_wallet_exhaust_detection() const;

 public:
  void clear_wallet_exhaust_detection();
  const ::magma::mconfig::WalletExhaustDetection& wallet_exhaust_detection()
      const;
  ::magma::mconfig::WalletExhaustDetection* release_wallet_exhaust_detection();
  ::magma::mconfig::WalletExhaustDetection* mutable_wallet_exhaust_detection();
  void set_allocated_wallet_exhaust_detection(
      ::magma::mconfig::WalletExhaustDetection* wallet_exhaust_detection);

 private:
  const ::magma::mconfig::WalletExhaustDetection&
  _internal_wallet_exhaust_detection() const;
  ::magma::mconfig::WalletExhaustDetection*
  _internal_mutable_wallet_exhaust_detection();

 public:
  void unsafe_arena_set_allocated_wallet_exhaust_detection(
      ::magma::mconfig::WalletExhaustDetection* wallet_exhaust_detection);
  ::magma::mconfig::WalletExhaustDetection*
  unsafe_arena_release_wallet_exhaust_detection();

  // .magma.mconfig.SentryConfig sentry_config = 5;
  bool has_sentry_config() const;

 private:
  bool _internal_has_sentry_config() const;

 public:
  void clear_sentry_config();
  const ::magma::mconfig::SentryConfig& sentry_config() const;
  ::magma::mconfig::SentryConfig* release_sentry_config();
  ::magma::mconfig::SentryConfig* mutable_sentry_config();
  void set_allocated_sentry_config(
      ::magma::mconfig::SentryConfig* sentry_config);

 private:
  const ::magma::mconfig::SentryConfig& _internal_sentry_config() const;
  ::magma::mconfig::SentryConfig* _internal_mutable_sentry_config();

 public:
  void unsafe_arena_set_allocated_sentry_config(
      ::magma::mconfig::SentryConfig* sentry_config);
  ::magma::mconfig::SentryConfig* unsafe_arena_release_sentry_config();

  // .magma.orc8r.LogLevel log_level = 1;
  void clear_log_level();
  ::magma::orc8r::LogLevel log_level() const;
  void set_log_level(::magma::orc8r::LogLevel value);

 private:
  ::magma::orc8r::LogLevel _internal_log_level() const;
  void _internal_set_log_level(::magma::orc8r::LogLevel value);

 public:
  // bool relay_enabled = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_relay_enabled();
  PROTOBUF_DEPRECATED bool relay_enabled() const;
  PROTOBUF_DEPRECATED void set_relay_enabled(bool value);

 private:
  bool _internal_relay_enabled() const;
  void _internal_set_relay_enabled(bool value);

 public:
  // bool gx_gy_relay_enabled = 4;
  void clear_gx_gy_relay_enabled();
  bool gx_gy_relay_enabled() const;
  void set_gx_gy_relay_enabled(bool value);

 private:
  bool _internal_gx_gy_relay_enabled() const;
  void _internal_set_gx_gy_relay_enabled(bool value);

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.SessionD)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::magma::mconfig::WalletExhaustDetection* wallet_exhaust_detection_;
  ::magma::mconfig::SentryConfig* sentry_config_;
  int log_level_;
  bool relay_enabled_;
  bool gx_gy_relay_enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class WalletExhaustDetection PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.WalletExhaustDetection)
                   */
{
 public:
  inline WalletExhaustDetection() : WalletExhaustDetection(nullptr) {}
  virtual ~WalletExhaustDetection();

  WalletExhaustDetection(const WalletExhaustDetection& from);
  WalletExhaustDetection(WalletExhaustDetection&& from) noexcept
      : WalletExhaustDetection() {
    *this = ::std::move(from);
  }

  inline WalletExhaustDetection& operator=(const WalletExhaustDetection& from) {
    CopyFrom(from);
    return *this;
  }
  inline WalletExhaustDetection& operator=(
      WalletExhaustDetection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WalletExhaustDetection& default_instance();

  static inline const WalletExhaustDetection* internal_default_instance() {
    return reinterpret_cast<const WalletExhaustDetection*>(
        &_WalletExhaustDetection_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;

  friend void swap(WalletExhaustDetection& a, WalletExhaustDetection& b) {
    a.Swap(&b);
  }
  inline void Swap(WalletExhaustDetection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WalletExhaustDetection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WalletExhaustDetection* New() const final {
    return CreateMaybeMessage<WalletExhaustDetection>(nullptr);
  }

  WalletExhaustDetection* New(
      ::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WalletExhaustDetection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WalletExhaustDetection& from);
  void MergeFrom(const WalletExhaustDetection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WalletExhaustDetection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.WalletExhaustDetection";
  }

 protected:
  explicit WalletExhaustDetection(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  typedef WalletExhaustDetection_Method Method;
  static constexpr Method GxTrackedRules =
      WalletExhaustDetection_Method_GxTrackedRules;
  static inline bool Method_IsValid(int value) {
    return WalletExhaustDetection_Method_IsValid(value);
  }
  static constexpr Method Method_MIN = WalletExhaustDetection_Method_Method_MIN;
  static constexpr Method Method_MAX = WalletExhaustDetection_Method_Method_MAX;
  static constexpr int Method_ARRAYSIZE =
      WalletExhaustDetection_Method_Method_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Method_descriptor() {
    return WalletExhaustDetection_Method_descriptor();
  }
  template<typename T>
  static inline const std::string& Method_Name(T enum_t_value) {
    static_assert(
        ::std::is_same<T, Method>::value || ::std::is_integral<T>::value,
        "Incorrect type passed to function Method_Name.");
    return WalletExhaustDetection_Method_Name(enum_t_value);
  }
  static inline bool Method_Parse(
      ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Method* value) {
    return WalletExhaustDetection_Method_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTerminateOnExhaustFieldNumber = 1,
    kMethodFieldNumber             = 2,
    kTimeoutMsFieldNumber          = 3,
  };
  // bool terminate_on_exhaust = 1;
  void clear_terminate_on_exhaust();
  bool terminate_on_exhaust() const;
  void set_terminate_on_exhaust(bool value);

 private:
  bool _internal_terminate_on_exhaust() const;
  void _internal_set_terminate_on_exhaust(bool value);

 public:
  // .magma.mconfig.WalletExhaustDetection.Method method = 2;
  void clear_method();
  ::magma::mconfig::WalletExhaustDetection_Method method() const;
  void set_method(::magma::mconfig::WalletExhaustDetection_Method value);

 private:
  ::magma::mconfig::WalletExhaustDetection_Method _internal_method() const;
  void _internal_set_method(
      ::magma::mconfig::WalletExhaustDetection_Method value);

 public:
  // uint32 timeout_ms = 3;
  void clear_timeout_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_ms() const;
  void set_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout_ms() const;
  void _internal_set_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.WalletExhaustDetection)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool terminate_on_exhaust_;
  int method_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class PolicyDB PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.PolicyDB)
                   */
{
 public:
  inline PolicyDB() : PolicyDB(nullptr) {}
  virtual ~PolicyDB();

  PolicyDB(const PolicyDB& from);
  PolicyDB(PolicyDB&& from) noexcept : PolicyDB() { *this = ::std::move(from); }

  inline PolicyDB& operator=(const PolicyDB& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyDB& operator=(PolicyDB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PolicyDB& default_instance();

  static inline const PolicyDB* internal_default_instance() {
    return reinterpret_cast<const PolicyDB*>(&_PolicyDB_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;

  friend void swap(PolicyDB& a, PolicyDB& b) { a.Swap(&b); }
  inline void Swap(PolicyDB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyDB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PolicyDB* New() const final {
    return CreateMaybeMessage<PolicyDB>(nullptr);
  }

  PolicyDB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PolicyDB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PolicyDB& from);
  void MergeFrom(const PolicyDB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolicyDB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.PolicyDB";
  }

 protected:
  explicit PolicyDB(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogLevelFieldNumber = 1,
  };
  // .magma.orc8r.LogLevel log_level = 1;
  void clear_log_level();
  ::magma::orc8r::LogLevel log_level() const;
  void set_log_level(::magma::orc8r::LogLevel value);

 private:
  ::magma::orc8r::LogLevel _internal_log_level() const;
  void _internal_set_log_level(::magma::orc8r::LogLevel value);

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.PolicyDB)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int log_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class RedirectD PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.RedirectD)
                   */
{
 public:
  inline RedirectD() : RedirectD(nullptr) {}
  virtual ~RedirectD();

  RedirectD(const RedirectD& from);
  RedirectD(RedirectD&& from) noexcept : RedirectD() {
    *this = ::std::move(from);
  }

  inline RedirectD& operator=(const RedirectD& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedirectD& operator=(RedirectD&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RedirectD& default_instance();

  static inline const RedirectD* internal_default_instance() {
    return reinterpret_cast<const RedirectD*>(&_RedirectD_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;

  friend void swap(RedirectD& a, RedirectD& b) { a.Swap(&b); }
  inline void Swap(RedirectD* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedirectD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RedirectD* New() const final {
    return CreateMaybeMessage<RedirectD>(nullptr);
  }

  RedirectD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RedirectD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RedirectD& from);
  void MergeFrom(const RedirectD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedirectD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.RedirectD";
  }

 protected:
  explicit RedirectD(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogLevelFieldNumber = 1,
  };
  // .magma.orc8r.LogLevel log_level = 1;
  void clear_log_level();
  ::magma::orc8r::LogLevel log_level() const;
  void set_log_level(::magma::orc8r::LogLevel value);

 private:
  ::magma::orc8r::LogLevel _internal_log_level() const;
  void _internal_set_log_level(::magma::orc8r::LogLevel value);

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.RedirectD)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int log_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class MobilityD PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.MobilityD)
                   */
{
 public:
  inline MobilityD() : MobilityD(nullptr) {}
  virtual ~MobilityD();

  MobilityD(const MobilityD& from);
  MobilityD(MobilityD&& from) noexcept : MobilityD() {
    *this = ::std::move(from);
  }

  inline MobilityD& operator=(const MobilityD& from) {
    CopyFrom(from);
    return *this;
  }
  inline MobilityD& operator=(MobilityD&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MobilityD& default_instance();

  static inline const MobilityD* internal_default_instance() {
    return reinterpret_cast<const MobilityD*>(&_MobilityD_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;

  friend void swap(MobilityD& a, MobilityD& b) { a.Swap(&b); }
  inline void Swap(MobilityD* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MobilityD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MobilityD* New() const final {
    return CreateMaybeMessage<MobilityD>(nullptr);
  }

  MobilityD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MobilityD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MobilityD& from);
  void MergeFrom(const MobilityD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MobilityD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.MobilityD";
  }

 protected:
  explicit MobilityD(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  typedef MobilityD_IpAllocatorType IpAllocatorType;
  static constexpr IpAllocatorType IP_POOL = MobilityD_IpAllocatorType_IP_POOL;
  static constexpr IpAllocatorType DHCP    = MobilityD_IpAllocatorType_DHCP;
  static inline bool IpAllocatorType_IsValid(int value) {
    return MobilityD_IpAllocatorType_IsValid(value);
  }
  static constexpr IpAllocatorType IpAllocatorType_MIN =
      MobilityD_IpAllocatorType_IpAllocatorType_MIN;
  static constexpr IpAllocatorType IpAllocatorType_MAX =
      MobilityD_IpAllocatorType_IpAllocatorType_MAX;
  static constexpr int IpAllocatorType_ARRAYSIZE =
      MobilityD_IpAllocatorType_IpAllocatorType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  IpAllocatorType_descriptor() {
    return MobilityD_IpAllocatorType_descriptor();
  }
  template<typename T>
  static inline const std::string& IpAllocatorType_Name(T enum_t_value) {
    static_assert(
        ::std::is_same<T, IpAllocatorType>::value ||
            ::std::is_integral<T>::value,
        "Incorrect type passed to function IpAllocatorType_Name.");
    return MobilityD_IpAllocatorType_Name(enum_t_value);
  }
  static inline bool IpAllocatorType_Parse(
      ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IpAllocatorType* value) {
    return MobilityD_IpAllocatorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIpBlockFieldNumber                  = 2,
    kIpv6BlockFieldNumber                = 10,
    kIpv6PrefixAllocationTypeFieldNumber = 11,
    kLogLevelFieldNumber                 = 1,
    kIpAllocatorTypeFieldNumber          = 3,
    kStaticIpEnabledFieldNumber          = 4,
    kMultiApnIpAllocFieldNumber          = 5,
  };
  // string ip_block = 2;
  void clear_ip_block();
  const std::string& ip_block() const;
  void set_ip_block(const std::string& value);
  void set_ip_block(std::string&& value);
  void set_ip_block(const char* value);
  void set_ip_block(const char* value, size_t size);
  std::string* mutable_ip_block();
  std::string* release_ip_block();
  void set_allocated_ip_block(std::string* ip_block);

 private:
  const std::string& _internal_ip_block() const;
  void _internal_set_ip_block(const std::string& value);
  std::string* _internal_mutable_ip_block();

 public:
  // string ipv6_block = 10;
  void clear_ipv6_block();
  const std::string& ipv6_block() const;
  void set_ipv6_block(const std::string& value);
  void set_ipv6_block(std::string&& value);
  void set_ipv6_block(const char* value);
  void set_ipv6_block(const char* value, size_t size);
  std::string* mutable_ipv6_block();
  std::string* release_ipv6_block();
  void set_allocated_ipv6_block(std::string* ipv6_block);

 private:
  const std::string& _internal_ipv6_block() const;
  void _internal_set_ipv6_block(const std::string& value);
  std::string* _internal_mutable_ipv6_block();

 public:
  // string ipv6_prefix_allocation_type = 11;
  void clear_ipv6_prefix_allocation_type();
  const std::string& ipv6_prefix_allocation_type() const;
  void set_ipv6_prefix_allocation_type(const std::string& value);
  void set_ipv6_prefix_allocation_type(std::string&& value);
  void set_ipv6_prefix_allocation_type(const char* value);
  void set_ipv6_prefix_allocation_type(const char* value, size_t size);
  std::string* mutable_ipv6_prefix_allocation_type();
  std::string* release_ipv6_prefix_allocation_type();
  void set_allocated_ipv6_prefix_allocation_type(
      std::string* ipv6_prefix_allocation_type);

 private:
  const std::string& _internal_ipv6_prefix_allocation_type() const;
  void _internal_set_ipv6_prefix_allocation_type(const std::string& value);
  std::string* _internal_mutable_ipv6_prefix_allocation_type();

 public:
  // .magma.orc8r.LogLevel log_level = 1;
  void clear_log_level();
  ::magma::orc8r::LogLevel log_level() const;
  void set_log_level(::magma::orc8r::LogLevel value);

 private:
  ::magma::orc8r::LogLevel _internal_log_level() const;
  void _internal_set_log_level(::magma::orc8r::LogLevel value);

 public:
  // .magma.mconfig.MobilityD.IpAllocatorType ip_allocator_type = 3;
  void clear_ip_allocator_type();
  ::magma::mconfig::MobilityD_IpAllocatorType ip_allocator_type() const;
  void set_ip_allocator_type(::magma::mconfig::MobilityD_IpAllocatorType value);

 private:
  ::magma::mconfig::MobilityD_IpAllocatorType _internal_ip_allocator_type()
      const;
  void _internal_set_ip_allocator_type(
      ::magma::mconfig::MobilityD_IpAllocatorType value);

 public:
  // bool static_ip_enabled = 4;
  void clear_static_ip_enabled();
  bool static_ip_enabled() const;
  void set_static_ip_enabled(bool value);

 private:
  bool _internal_static_ip_enabled() const;
  void _internal_set_static_ip_enabled(bool value);

 public:
  // bool multi_apn_ip_alloc = 5;
  void clear_multi_apn_ip_alloc();
  bool multi_apn_ip_alloc() const;
  void set_multi_apn_ip_alloc(bool value);

 private:
  bool _internal_multi_apn_ip_alloc() const;
  void _internal_set_multi_apn_ip_alloc(bool value);

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.MobilityD)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_block_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6_block_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr
      ipv6_prefix_allocation_type_;
  int log_level_;
  int ip_allocator_type_;
  bool static_ip_enabled_;
  bool multi_apn_ip_alloc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class MME_ApnCorrectionMap PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.MME.ApnCorrectionMap)
                   */
{
 public:
  inline MME_ApnCorrectionMap() : MME_ApnCorrectionMap(nullptr) {}
  virtual ~MME_ApnCorrectionMap();

  MME_ApnCorrectionMap(const MME_ApnCorrectionMap& from);
  MME_ApnCorrectionMap(MME_ApnCorrectionMap&& from) noexcept
      : MME_ApnCorrectionMap() {
    *this = ::std::move(from);
  }

  inline MME_ApnCorrectionMap& operator=(const MME_ApnCorrectionMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline MME_ApnCorrectionMap& operator=(MME_ApnCorrectionMap&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MME_ApnCorrectionMap& default_instance();

  static inline const MME_ApnCorrectionMap* internal_default_instance() {
    return reinterpret_cast<const MME_ApnCorrectionMap*>(
        &_MME_ApnCorrectionMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;

  friend void swap(MME_ApnCorrectionMap& a, MME_ApnCorrectionMap& b) {
    a.Swap(&b);
  }
  inline void Swap(MME_ApnCorrectionMap* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MME_ApnCorrectionMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MME_ApnCorrectionMap* New() const final {
    return CreateMaybeMessage<MME_ApnCorrectionMap>(nullptr);
  }

  MME_ApnCorrectionMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MME_ApnCorrectionMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MME_ApnCorrectionMap& from);
  void MergeFrom(const MME_ApnCorrectionMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MME_ApnCorrectionMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.MME.ApnCorrectionMap";
  }

 protected:
  explicit MME_ApnCorrectionMap(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImsiPrefixFieldNumber  = 1,
    kApnOverrideFieldNumber = 2,
  };
  // string imsi_prefix = 1;
  void clear_imsi_prefix();
  const std::string& imsi_prefix() const;
  void set_imsi_prefix(const std::string& value);
  void set_imsi_prefix(std::string&& value);
  void set_imsi_prefix(const char* value);
  void set_imsi_prefix(const char* value, size_t size);
  std::string* mutable_imsi_prefix();
  std::string* release_imsi_prefix();
  void set_allocated_imsi_prefix(std::string* imsi_prefix);

 private:
  const std::string& _internal_imsi_prefix() const;
  void _internal_set_imsi_prefix(const std::string& value);
  std::string* _internal_mutable_imsi_prefix();

 public:
  // string apn_override = 2;
  void clear_apn_override();
  const std::string& apn_override() const;
  void set_apn_override(const std::string& value);
  void set_apn_override(std::string&& value);
  void set_apn_override(const char* value);
  void set_apn_override(const char* value, size_t size);
  std::string* mutable_apn_override();
  std::string* release_apn_override();
  void set_allocated_apn_override(std::string* apn_override);

 private:
  const std::string& _internal_apn_override() const;
  void _internal_set_apn_override(const std::string& value);
  std::string* _internal_mutable_apn_override();

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.MME.ApnCorrectionMap)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imsi_prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apn_override_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class MME_PlmnConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.MME.PlmnConfig)
                   */
{
 public:
  inline MME_PlmnConfig() : MME_PlmnConfig(nullptr) {}
  virtual ~MME_PlmnConfig();

  MME_PlmnConfig(const MME_PlmnConfig& from);
  MME_PlmnConfig(MME_PlmnConfig&& from) noexcept : MME_PlmnConfig() {
    *this = ::std::move(from);
  }

  inline MME_PlmnConfig& operator=(const MME_PlmnConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline MME_PlmnConfig& operator=(MME_PlmnConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MME_PlmnConfig& default_instance();

  static inline const MME_PlmnConfig* internal_default_instance() {
    return reinterpret_cast<const MME_PlmnConfig*>(
        &_MME_PlmnConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;

  friend void swap(MME_PlmnConfig& a, MME_PlmnConfig& b) { a.Swap(&b); }
  inline void Swap(MME_PlmnConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MME_PlmnConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MME_PlmnConfig* New() const final {
    return CreateMaybeMessage<MME_PlmnConfig>(nullptr);
  }

  MME_PlmnConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MME_PlmnConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MME_PlmnConfig& from);
  void MergeFrom(const MME_PlmnConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MME_PlmnConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.MME.PlmnConfig";
  }

 protected:
  explicit MME_PlmnConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMccFieldNumber = 1,
    kMncFieldNumber = 2,
  };
  // string mcc = 1;
  void clear_mcc();
  const std::string& mcc() const;
  void set_mcc(const std::string& value);
  void set_mcc(std::string&& value);
  void set_mcc(const char* value);
  void set_mcc(const char* value, size_t size);
  std::string* mutable_mcc();
  std::string* release_mcc();
  void set_allocated_mcc(std::string* mcc);

 private:
  const std::string& _internal_mcc() const;
  void _internal_set_mcc(const std::string& value);
  std::string* _internal_mutable_mcc();

 public:
  // string mnc = 2;
  void clear_mnc();
  const std::string& mnc() const;
  void set_mnc(const std::string& value);
  void set_mnc(std::string&& value);
  void set_mnc(const char* value);
  void set_mnc(const char* value, size_t size);
  std::string* mutable_mnc();
  std::string* release_mnc();
  void set_allocated_mnc(std::string* mnc);

 private:
  const std::string& _internal_mnc() const;
  void _internal_set_mnc(const std::string& value);
  std::string* _internal_mutable_mnc();

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.MME.PlmnConfig)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mcc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mnc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class MME_TacList PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.MME.TacList)
                   */
{
 public:
  inline MME_TacList() : MME_TacList(nullptr) {}
  virtual ~MME_TacList();

  MME_TacList(const MME_TacList& from);
  MME_TacList(MME_TacList&& from) noexcept : MME_TacList() {
    *this = ::std::move(from);
  }

  inline MME_TacList& operator=(const MME_TacList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MME_TacList& operator=(MME_TacList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MME_TacList& default_instance();

  static inline const MME_TacList* internal_default_instance() {
    return reinterpret_cast<const MME_TacList*>(
        &_MME_TacList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;

  friend void swap(MME_TacList& a, MME_TacList& b) { a.Swap(&b); }
  inline void Swap(MME_TacList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MME_TacList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MME_TacList* New() const final {
    return CreateMaybeMessage<MME_TacList>(nullptr);
  }

  MME_TacList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MME_TacList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MME_TacList& from);
  void MergeFrom(const MME_TacList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MME_TacList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.MME.TacList";
  }

 protected:
  explicit MME_TacList(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTacFieldNumber = 1,
  };
  // repeated uint32 tac = 1;
  int tac_size() const;

 private:
  int _internal_tac_size() const;

 public:
  void clear_tac();

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tac(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::PROTOBUF_NAMESPACE_ID::uint32>&
  _internal_tac() const;
  void _internal_add_tac(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::PROTOBUF_NAMESPACE_ID::uint32>*
  _internal_mutable_tac();

 public:
  ::PROTOBUF_NAMESPACE_ID::uint32 tac(int index) const;
  void set_tac(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_tac(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::PROTOBUF_NAMESPACE_ID::uint32>&
  tac() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::PROTOBUF_NAMESPACE_ID::uint32>*
  mutable_tac();

  // @@protoc_insertion_point(class_scope:magma.mconfig.MME.TacList)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::PROTOBUF_NAMESPACE_ID::uint32> tac_;
  mutable std::atomic<int> _tac_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class MME_ServiceAreaMapsEntry_DoNotUse
    : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<
          MME_ServiceAreaMapsEntry_DoNotUse, std::string,
          ::magma::mconfig::MME_TacList,
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<
      MME_ServiceAreaMapsEntry_DoNotUse, std::string,
      ::magma::mconfig::MME_TacList,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE>
      SuperType;
  MME_ServiceAreaMapsEntry_DoNotUse();
  explicit MME_ServiceAreaMapsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MME_ServiceAreaMapsEntry_DoNotUse& other);
  static const MME_ServiceAreaMapsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const MME_ServiceAreaMapsEntry_DoNotUse*>(
        &_MME_ServiceAreaMapsEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s->data(), static_cast<int>(s->size()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
        "magma.mconfig.MME.ServiceAreaMapsEntry.key");
  }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[19];
  }

 public:
};

// -------------------------------------------------------------------

class MME_ImeiConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.MME.ImeiConfig)
                   */
{
 public:
  inline MME_ImeiConfig() : MME_ImeiConfig(nullptr) {}
  virtual ~MME_ImeiConfig();

  MME_ImeiConfig(const MME_ImeiConfig& from);
  MME_ImeiConfig(MME_ImeiConfig&& from) noexcept : MME_ImeiConfig() {
    *this = ::std::move(from);
  }

  inline MME_ImeiConfig& operator=(const MME_ImeiConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline MME_ImeiConfig& operator=(MME_ImeiConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MME_ImeiConfig& default_instance();

  static inline const MME_ImeiConfig* internal_default_instance() {
    return reinterpret_cast<const MME_ImeiConfig*>(
        &_MME_ImeiConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;

  friend void swap(MME_ImeiConfig& a, MME_ImeiConfig& b) { a.Swap(&b); }
  inline void Swap(MME_ImeiConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MME_ImeiConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MME_ImeiConfig* New() const final {
    return CreateMaybeMessage<MME_ImeiConfig>(nullptr);
  }

  MME_ImeiConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MME_ImeiConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MME_ImeiConfig& from);
  void MergeFrom(const MME_ImeiConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MME_ImeiConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.MME.ImeiConfig";
  }

 protected:
  explicit MME_ImeiConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTacFieldNumber = 1,
    kSnrFieldNumber = 2,
  };
  // string tac = 1;
  void clear_tac();
  const std::string& tac() const;
  void set_tac(const std::string& value);
  void set_tac(std::string&& value);
  void set_tac(const char* value);
  void set_tac(const char* value, size_t size);
  std::string* mutable_tac();
  std::string* release_tac();
  void set_allocated_tac(std::string* tac);

 private:
  const std::string& _internal_tac() const;
  void _internal_set_tac(const std::string& value);
  std::string* _internal_mutable_tac();

 public:
  // string snr = 2;
  void clear_snr();
  const std::string& snr() const;
  void set_snr(const std::string& value);
  void set_snr(std::string&& value);
  void set_snr(const char* value);
  void set_snr(const char* value, size_t size);
  std::string* mutable_snr();
  std::string* release_snr();
  void set_allocated_snr(std::string* snr);

 private:
  const std::string& _internal_snr() const;
  void _internal_set_snr(const std::string& value);
  std::string* _internal_mutable_snr();

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.MME.ImeiConfig)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tac_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class MME PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.MME)
                   */
{
 public:
  inline MME() : MME(nullptr) {}
  virtual ~MME();

  MME(const MME& from);
  MME(MME&& from) noexcept : MME() { *this = ::std::move(from); }

  inline MME& operator=(const MME& from) {
    CopyFrom(from);
    return *this;
  }
  inline MME& operator=(MME&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MME& default_instance();

  static inline const MME* internal_default_instance() {
    return reinterpret_cast<const MME*>(&_MME_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;

  friend void swap(MME& a, MME& b) { a.Swap(&b); }
  inline void Swap(MME* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MME* New() const final { return CreateMaybeMessage<MME>(nullptr); }

  MME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MME>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MME& from);
  void MergeFrom(const MME& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MME* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.MME";
  }

 protected:
  explicit MME(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  typedef MME_ApnCorrectionMap ApnCorrectionMap;
  typedef MME_PlmnConfig PlmnConfig;
  typedef MME_TacList TacList;
  typedef MME_ImeiConfig ImeiConfig;

  typedef MME_NonEPSServiceControl NonEPSServiceControl;
  static constexpr NonEPSServiceControl NON_EPS_SERVICE_CONTROL_OFF =
      MME_NonEPSServiceControl_NON_EPS_SERVICE_CONTROL_OFF;
  static constexpr NonEPSServiceControl NON_EPS_SERVICE_CONTROL_CSFB_SMS =
      MME_NonEPSServiceControl_NON_EPS_SERVICE_CONTROL_CSFB_SMS;
  static constexpr NonEPSServiceControl NON_EPS_SERVICE_CONTROL_SMS =
      MME_NonEPSServiceControl_NON_EPS_SERVICE_CONTROL_SMS;
  static constexpr NonEPSServiceControl NON_EPS_SERVICE_CONTROL_SMS_ORC8R =
      MME_NonEPSServiceControl_NON_EPS_SERVICE_CONTROL_SMS_ORC8R;
  static inline bool NonEPSServiceControl_IsValid(int value) {
    return MME_NonEPSServiceControl_IsValid(value);
  }
  static constexpr NonEPSServiceControl NonEPSServiceControl_MIN =
      MME_NonEPSServiceControl_NonEPSServiceControl_MIN;
  static constexpr NonEPSServiceControl NonEPSServiceControl_MAX =
      MME_NonEPSServiceControl_NonEPSServiceControl_MAX;
  static constexpr int NonEPSServiceControl_ARRAYSIZE =
      MME_NonEPSServiceControl_NonEPSServiceControl_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NonEPSServiceControl_descriptor() {
    return MME_NonEPSServiceControl_descriptor();
  }
  template<typename T>
  static inline const std::string& NonEPSServiceControl_Name(T enum_t_value) {
    static_assert(
        ::std::is_same<T, NonEPSServiceControl>::value ||
            ::std::is_integral<T>::value,
        "Incorrect type passed to function NonEPSServiceControl_Name.");
    return MME_NonEPSServiceControl_Name(enum_t_value);
  }
  static inline bool NonEPSServiceControl_Parse(
      ::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NonEPSServiceControl* value) {
    return MME_NonEPSServiceControl_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAttachedEnodebTacsFieldNumber       = 15,
    kApnCorrectionMapListFieldNumber     = 25,
    kRestrictedPlmnsFieldNumber          = 32,
    kServiceAreaMapsFieldNumber          = 33,
    kRestrictedImeisFieldNumber          = 35,
    kMccFieldNumber                      = 2,
    kMncFieldNumber                      = 3,
    kCsfbMccFieldNumber                  = 10,
    kCsfbMncFieldNumber                  = 11,
    kDnsPrimaryFieldNumber               = 20,
    kDnsSecondaryFieldNumber             = 21,
    kIpv4PCscfAddressFieldNumber         = 26,
    kIpv6PCscfAddressFieldNumber         = 27,
    kIpv6DnsAddressFieldNumber           = 30,
    kIpv4SgwS1UAddrFieldNumber           = 31,
    kFederatedModeMapFieldNumber         = 34,
    kSentryConfigFieldNumber             = 45,
    kLogLevelFieldNumber                 = 1,
    kTacFieldNumber                      = 4,
    kMmeGidFieldNumber                   = 5,
    kMmeCodeFieldNumber                  = 6,
    kNonEpsServiceControlFieldNumber     = 9,
    kLacFieldNumber                      = 12,
    kEnableDnsCachingFieldNumber         = 7,
    kRelayEnabledFieldNumber             = 8,
    kCloudSubscriberdbEnabledFieldNumber = 14,
    kNatEnabledFieldNumber               = 22,
    kMmeRelativeCapacityFieldNumber      = 16,
    kHssRelayEnabledFieldNumber          = 23,
    kEnableApnCorrectionFieldNumber      = 24,
    kCongestionControlEnabledFieldNumber = 40,
    kEnableConvergedCoreFieldNumber      = 46,
  };
  // repeated int32 attached_enodeb_tacs = 15;
  int attached_enodeb_tacs_size() const;

 private:
  int _internal_attached_enodeb_tacs_size() const;

 public:
  void clear_attached_enodeb_tacs();

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attached_enodeb_tacs(
      int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::PROTOBUF_NAMESPACE_ID::int32>&
  _internal_attached_enodeb_tacs() const;
  void _internal_add_attached_enodeb_tacs(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::PROTOBUF_NAMESPACE_ID::int32>*
  _internal_mutable_attached_enodeb_tacs();

 public:
  ::PROTOBUF_NAMESPACE_ID::int32 attached_enodeb_tacs(int index) const;
  void set_attached_enodeb_tacs(
      int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_attached_enodeb_tacs(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::PROTOBUF_NAMESPACE_ID::int32>&
  attached_enodeb_tacs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::PROTOBUF_NAMESPACE_ID::int32>*
  mutable_attached_enodeb_tacs();

  // repeated .magma.mconfig.MME.ApnCorrectionMap apn_correction_map_list = 25;
  int apn_correction_map_list_size() const;

 private:
  int _internal_apn_correction_map_list_size() const;

 public:
  void clear_apn_correction_map_list();
  ::magma::mconfig::MME_ApnCorrectionMap* mutable_apn_correction_map_list(
      int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::magma::mconfig::MME_ApnCorrectionMap>*
  mutable_apn_correction_map_list();

 private:
  const ::magma::mconfig::MME_ApnCorrectionMap&
  _internal_apn_correction_map_list(int index) const;
  ::magma::mconfig::MME_ApnCorrectionMap*
  _internal_add_apn_correction_map_list();

 public:
  const ::magma::mconfig::MME_ApnCorrectionMap& apn_correction_map_list(
      int index) const;
  ::magma::mconfig::MME_ApnCorrectionMap* add_apn_correction_map_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::magma::mconfig::MME_ApnCorrectionMap>&
  apn_correction_map_list() const;

  // repeated .magma.mconfig.MME.PlmnConfig restricted_plmns = 32;
  int restricted_plmns_size() const;

 private:
  int _internal_restricted_plmns_size() const;

 public:
  void clear_restricted_plmns();
  ::magma::mconfig::MME_PlmnConfig* mutable_restricted_plmns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::magma::mconfig::MME_PlmnConfig>*
  mutable_restricted_plmns();

 private:
  const ::magma::mconfig::MME_PlmnConfig& _internal_restricted_plmns(
      int index) const;
  ::magma::mconfig::MME_PlmnConfig* _internal_add_restricted_plmns();

 public:
  const ::magma::mconfig::MME_PlmnConfig& restricted_plmns(int index) const;
  ::magma::mconfig::MME_PlmnConfig* add_restricted_plmns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::magma::mconfig::MME_PlmnConfig>&
  restricted_plmns() const;

  // map<string, .magma.mconfig.MME.TacList> service_area_maps = 33;
  int service_area_maps_size() const;

 private:
  int _internal_service_area_maps_size() const;

 public:
  void clear_service_area_maps();

 private:
  const ::PROTOBUF_NAMESPACE_ID::Map<
      std::string, ::magma::mconfig::MME_TacList>&
  _internal_service_area_maps() const;
  ::PROTOBUF_NAMESPACE_ID::Map<std::string, ::magma::mconfig::MME_TacList>*
  _internal_mutable_service_area_maps();

 public:
  const ::PROTOBUF_NAMESPACE_ID::Map<
      std::string, ::magma::mconfig::MME_TacList>&
  service_area_maps() const;
  ::PROTOBUF_NAMESPACE_ID::Map<std::string, ::magma::mconfig::MME_TacList>*
  mutable_service_area_maps();

  // repeated .magma.mconfig.MME.ImeiConfig restricted_imeis = 35;
  int restricted_imeis_size() const;

 private:
  int _internal_restricted_imeis_size() const;

 public:
  void clear_restricted_imeis();
  ::magma::mconfig::MME_ImeiConfig* mutable_restricted_imeis(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::magma::mconfig::MME_ImeiConfig>*
  mutable_restricted_imeis();

 private:
  const ::magma::mconfig::MME_ImeiConfig& _internal_restricted_imeis(
      int index) const;
  ::magma::mconfig::MME_ImeiConfig* _internal_add_restricted_imeis();

 public:
  const ::magma::mconfig::MME_ImeiConfig& restricted_imeis(int index) const;
  ::magma::mconfig::MME_ImeiConfig* add_restricted_imeis();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::magma::mconfig::MME_ImeiConfig>&
  restricted_imeis() const;

  // string mcc = 2;
  void clear_mcc();
  const std::string& mcc() const;
  void set_mcc(const std::string& value);
  void set_mcc(std::string&& value);
  void set_mcc(const char* value);
  void set_mcc(const char* value, size_t size);
  std::string* mutable_mcc();
  std::string* release_mcc();
  void set_allocated_mcc(std::string* mcc);

 private:
  const std::string& _internal_mcc() const;
  void _internal_set_mcc(const std::string& value);
  std::string* _internal_mutable_mcc();

 public:
  // string mnc = 3;
  void clear_mnc();
  const std::string& mnc() const;
  void set_mnc(const std::string& value);
  void set_mnc(std::string&& value);
  void set_mnc(const char* value);
  void set_mnc(const char* value, size_t size);
  std::string* mutable_mnc();
  std::string* release_mnc();
  void set_allocated_mnc(std::string* mnc);

 private:
  const std::string& _internal_mnc() const;
  void _internal_set_mnc(const std::string& value);
  std::string* _internal_mutable_mnc();

 public:
  // string csfb_mcc = 10;
  void clear_csfb_mcc();
  const std::string& csfb_mcc() const;
  void set_csfb_mcc(const std::string& value);
  void set_csfb_mcc(std::string&& value);
  void set_csfb_mcc(const char* value);
  void set_csfb_mcc(const char* value, size_t size);
  std::string* mutable_csfb_mcc();
  std::string* release_csfb_mcc();
  void set_allocated_csfb_mcc(std::string* csfb_mcc);

 private:
  const std::string& _internal_csfb_mcc() const;
  void _internal_set_csfb_mcc(const std::string& value);
  std::string* _internal_mutable_csfb_mcc();

 public:
  // string csfb_mnc = 11;
  void clear_csfb_mnc();
  const std::string& csfb_mnc() const;
  void set_csfb_mnc(const std::string& value);
  void set_csfb_mnc(std::string&& value);
  void set_csfb_mnc(const char* value);
  void set_csfb_mnc(const char* value, size_t size);
  std::string* mutable_csfb_mnc();
  std::string* release_csfb_mnc();
  void set_allocated_csfb_mnc(std::string* csfb_mnc);

 private:
  const std::string& _internal_csfb_mnc() const;
  void _internal_set_csfb_mnc(const std::string& value);
  std::string* _internal_mutable_csfb_mnc();

 public:
  // string dns_primary = 20;
  void clear_dns_primary();
  const std::string& dns_primary() const;
  void set_dns_primary(const std::string& value);
  void set_dns_primary(std::string&& value);
  void set_dns_primary(const char* value);
  void set_dns_primary(const char* value, size_t size);
  std::string* mutable_dns_primary();
  std::string* release_dns_primary();
  void set_allocated_dns_primary(std::string* dns_primary);

 private:
  const std::string& _internal_dns_primary() const;
  void _internal_set_dns_primary(const std::string& value);
  std::string* _internal_mutable_dns_primary();

 public:
  // string dns_secondary = 21;
  void clear_dns_secondary();
  const std::string& dns_secondary() const;
  void set_dns_secondary(const std::string& value);
  void set_dns_secondary(std::string&& value);
  void set_dns_secondary(const char* value);
  void set_dns_secondary(const char* value, size_t size);
  std::string* mutable_dns_secondary();
  std::string* release_dns_secondary();
  void set_allocated_dns_secondary(std::string* dns_secondary);

 private:
  const std::string& _internal_dns_secondary() const;
  void _internal_set_dns_secondary(const std::string& value);
  std::string* _internal_mutable_dns_secondary();

 public:
  // string ipv4_p_cscf_address = 26;
  void clear_ipv4_p_cscf_address();
  const std::string& ipv4_p_cscf_address() const;
  void set_ipv4_p_cscf_address(const std::string& value);
  void set_ipv4_p_cscf_address(std::string&& value);
  void set_ipv4_p_cscf_address(const char* value);
  void set_ipv4_p_cscf_address(const char* value, size_t size);
  std::string* mutable_ipv4_p_cscf_address();
  std::string* release_ipv4_p_cscf_address();
  void set_allocated_ipv4_p_cscf_address(std::string* ipv4_p_cscf_address);

 private:
  const std::string& _internal_ipv4_p_cscf_address() const;
  void _internal_set_ipv4_p_cscf_address(const std::string& value);
  std::string* _internal_mutable_ipv4_p_cscf_address();

 public:
  // string ipv6_p_cscf_address = 27;
  void clear_ipv6_p_cscf_address();
  const std::string& ipv6_p_cscf_address() const;
  void set_ipv6_p_cscf_address(const std::string& value);
  void set_ipv6_p_cscf_address(std::string&& value);
  void set_ipv6_p_cscf_address(const char* value);
  void set_ipv6_p_cscf_address(const char* value, size_t size);
  std::string* mutable_ipv6_p_cscf_address();
  std::string* release_ipv6_p_cscf_address();
  void set_allocated_ipv6_p_cscf_address(std::string* ipv6_p_cscf_address);

 private:
  const std::string& _internal_ipv6_p_cscf_address() const;
  void _internal_set_ipv6_p_cscf_address(const std::string& value);
  std::string* _internal_mutable_ipv6_p_cscf_address();

 public:
  // string ipv6_dns_address = 30;
  void clear_ipv6_dns_address();
  const std::string& ipv6_dns_address() const;
  void set_ipv6_dns_address(const std::string& value);
  void set_ipv6_dns_address(std::string&& value);
  void set_ipv6_dns_address(const char* value);
  void set_ipv6_dns_address(const char* value, size_t size);
  std::string* mutable_ipv6_dns_address();
  std::string* release_ipv6_dns_address();
  void set_allocated_ipv6_dns_address(std::string* ipv6_dns_address);

 private:
  const std::string& _internal_ipv6_dns_address() const;
  void _internal_set_ipv6_dns_address(const std::string& value);
  std::string* _internal_mutable_ipv6_dns_address();

 public:
  // string ipv4_sgw_s1u_addr = 31;
  void clear_ipv4_sgw_s1u_addr();
  const std::string& ipv4_sgw_s1u_addr() const;
  void set_ipv4_sgw_s1u_addr(const std::string& value);
  void set_ipv4_sgw_s1u_addr(std::string&& value);
  void set_ipv4_sgw_s1u_addr(const char* value);
  void set_ipv4_sgw_s1u_addr(const char* value, size_t size);
  std::string* mutable_ipv4_sgw_s1u_addr();
  std::string* release_ipv4_sgw_s1u_addr();
  void set_allocated_ipv4_sgw_s1u_addr(std::string* ipv4_sgw_s1u_addr);

 private:
  const std::string& _internal_ipv4_sgw_s1u_addr() const;
  void _internal_set_ipv4_sgw_s1u_addr(const std::string& value);
  std::string* _internal_mutable_ipv4_sgw_s1u_addr();

 public:
  // .magma.mconfig.FederatedModeMap federated_mode_map = 34;
  bool has_federated_mode_map() const;

 private:
  bool _internal_has_federated_mode_map() const;

 public:
  void clear_federated_mode_map();
  const ::magma::mconfig::FederatedModeMap& federated_mode_map() const;
  ::magma::mconfig::FederatedModeMap* release_federated_mode_map();
  ::magma::mconfig::FederatedModeMap* mutable_federated_mode_map();
  void set_allocated_federated_mode_map(
      ::magma::mconfig::FederatedModeMap* federated_mode_map);

 private:
  const ::magma::mconfig::FederatedModeMap& _internal_federated_mode_map()
      const;
  ::magma::mconfig::FederatedModeMap* _internal_mutable_federated_mode_map();

 public:
  void unsafe_arena_set_allocated_federated_mode_map(
      ::magma::mconfig::FederatedModeMap* federated_mode_map);
  ::magma::mconfig::FederatedModeMap* unsafe_arena_release_federated_mode_map();

  // .magma.mconfig.SentryConfig sentry_config = 45;
  bool has_sentry_config() const;

 private:
  bool _internal_has_sentry_config() const;

 public:
  void clear_sentry_config();
  const ::magma::mconfig::SentryConfig& sentry_config() const;
  ::magma::mconfig::SentryConfig* release_sentry_config();
  ::magma::mconfig::SentryConfig* mutable_sentry_config();
  void set_allocated_sentry_config(
      ::magma::mconfig::SentryConfig* sentry_config);

 private:
  const ::magma::mconfig::SentryConfig& _internal_sentry_config() const;
  ::magma::mconfig::SentryConfig* _internal_mutable_sentry_config();

 public:
  void unsafe_arena_set_allocated_sentry_config(
      ::magma::mconfig::SentryConfig* sentry_config);
  ::magma::mconfig::SentryConfig* unsafe_arena_release_sentry_config();

  // .magma.orc8r.LogLevel log_level = 1;
  void clear_log_level();
  ::magma::orc8r::LogLevel log_level() const;
  void set_log_level(::magma::orc8r::LogLevel value);

 private:
  ::magma::orc8r::LogLevel _internal_log_level() const;
  void _internal_set_log_level(::magma::orc8r::LogLevel value);

 public:
  // int32 tac = 4;
  void clear_tac();
  ::PROTOBUF_NAMESPACE_ID::int32 tac() const;
  void set_tac(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tac() const;
  void _internal_set_tac(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // int32 mme_gid = 5;
  void clear_mme_gid();
  ::PROTOBUF_NAMESPACE_ID::int32 mme_gid() const;
  void set_mme_gid(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mme_gid() const;
  void _internal_set_mme_gid(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // int32 mme_code = 6;
  void clear_mme_code();
  ::PROTOBUF_NAMESPACE_ID::int32 mme_code() const;
  void set_mme_code(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mme_code() const;
  void _internal_set_mme_code(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // .magma.mconfig.MME.NonEPSServiceControl non_eps_service_control = 9;
  void clear_non_eps_service_control();
  ::magma::mconfig::MME_NonEPSServiceControl non_eps_service_control() const;
  void set_non_eps_service_control(
      ::magma::mconfig::MME_NonEPSServiceControl value);

 private:
  ::magma::mconfig::MME_NonEPSServiceControl _internal_non_eps_service_control()
      const;
  void _internal_set_non_eps_service_control(
      ::magma::mconfig::MME_NonEPSServiceControl value);

 public:
  // int32 lac = 12;
  void clear_lac();
  ::PROTOBUF_NAMESPACE_ID::int32 lac() const;
  void set_lac(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lac() const;
  void _internal_set_lac(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // bool enable_dns_caching = 7;
  void clear_enable_dns_caching();
  bool enable_dns_caching() const;
  void set_enable_dns_caching(bool value);

 private:
  bool _internal_enable_dns_caching() const;
  void _internal_set_enable_dns_caching(bool value);

 public:
  // bool relay_enabled = 8;
  void clear_relay_enabled();
  bool relay_enabled() const;
  void set_relay_enabled(bool value);

 private:
  bool _internal_relay_enabled() const;
  void _internal_set_relay_enabled(bool value);

 public:
  // bool cloud_subscriberdb_enabled = 14;
  void clear_cloud_subscriberdb_enabled();
  bool cloud_subscriberdb_enabled() const;
  void set_cloud_subscriberdb_enabled(bool value);

 private:
  bool _internal_cloud_subscriberdb_enabled() const;
  void _internal_set_cloud_subscriberdb_enabled(bool value);

 public:
  // bool nat_enabled = 22;
  void clear_nat_enabled();
  bool nat_enabled() const;
  void set_nat_enabled(bool value);

 private:
  bool _internal_nat_enabled() const;
  void _internal_set_nat_enabled(bool value);

 public:
  // int32 mme_relative_capacity = 16;
  void clear_mme_relative_capacity();
  ::PROTOBUF_NAMESPACE_ID::int32 mme_relative_capacity() const;
  void set_mme_relative_capacity(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mme_relative_capacity() const;
  void _internal_set_mme_relative_capacity(
      ::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // bool hss_relay_enabled = 23;
  void clear_hss_relay_enabled();
  bool hss_relay_enabled() const;
  void set_hss_relay_enabled(bool value);

 private:
  bool _internal_hss_relay_enabled() const;
  void _internal_set_hss_relay_enabled(bool value);

 public:
  // bool enable_apn_correction = 24;
  void clear_enable_apn_correction();
  bool enable_apn_correction() const;
  void set_enable_apn_correction(bool value);

 private:
  bool _internal_enable_apn_correction() const;
  void _internal_set_enable_apn_correction(bool value);

 public:
  // bool congestion_control_enabled = 40;
  void clear_congestion_control_enabled();
  bool congestion_control_enabled() const;
  void set_congestion_control_enabled(bool value);

 private:
  bool _internal_congestion_control_enabled() const;
  void _internal_set_congestion_control_enabled(bool value);

 public:
  // bool enable_converged_core = 46;
  void clear_enable_converged_core();
  bool enable_converged_core() const;
  void set_enable_converged_core(bool value);

 private:
  bool _internal_enable_converged_core() const;
  void _internal_set_enable_converged_core(bool value);

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.MME)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::PROTOBUF_NAMESPACE_ID::int32>
      attached_enodeb_tacs_;
  mutable std::atomic<int> _attached_enodeb_tacs_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::magma::mconfig::MME_ApnCorrectionMap>
      apn_correction_map_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::magma::mconfig::MME_PlmnConfig>
      restricted_plmns_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MME_ServiceAreaMapsEntry_DoNotUse, std::string,
      ::magma::mconfig::MME_TacList,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE>
      service_area_maps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::magma::mconfig::MME_ImeiConfig>
      restricted_imeis_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mcc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mnc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr csfb_mcc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr csfb_mnc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dns_primary_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dns_secondary_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv4_p_cscf_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6_p_cscf_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6_dns_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv4_sgw_s1u_addr_;
  ::magma::mconfig::FederatedModeMap* federated_mode_map_;
  ::magma::mconfig::SentryConfig* sentry_config_;
  int log_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 tac_;
  ::PROTOBUF_NAMESPACE_ID::int32 mme_gid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mme_code_;
  int non_eps_service_control_;
  ::PROTOBUF_NAMESPACE_ID::int32 lac_;
  bool enable_dns_caching_;
  bool relay_enabled_;
  bool cloud_subscriberdb_enabled_;
  bool nat_enabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 mme_relative_capacity_;
  bool hss_relay_enabled_;
  bool enable_apn_correction_;
  bool congestion_control_enabled_;
  bool enable_converged_core_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class FederatedModeMap PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.FederatedModeMap)
                   */
{
 public:
  inline FederatedModeMap() : FederatedModeMap(nullptr) {}
  virtual ~FederatedModeMap();

  FederatedModeMap(const FederatedModeMap& from);
  FederatedModeMap(FederatedModeMap&& from) noexcept : FederatedModeMap() {
    *this = ::std::move(from);
  }

  inline FederatedModeMap& operator=(const FederatedModeMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline FederatedModeMap& operator=(FederatedModeMap&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FederatedModeMap& default_instance();

  static inline const FederatedModeMap* internal_default_instance() {
    return reinterpret_cast<const FederatedModeMap*>(
        &_FederatedModeMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;

  friend void swap(FederatedModeMap& a, FederatedModeMap& b) { a.Swap(&b); }
  inline void Swap(FederatedModeMap* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FederatedModeMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FederatedModeMap* New() const final {
    return CreateMaybeMessage<FederatedModeMap>(nullptr);
  }

  FederatedModeMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FederatedModeMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FederatedModeMap& from);
  void MergeFrom(const FederatedModeMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FederatedModeMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.FederatedModeMap";
  }

 protected:
  explicit FederatedModeMap(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMappingFieldNumber = 2,
    kEnabledFieldNumber = 1,
  };
  // repeated .magma.mconfig.ModeMapItem mapping = 2;
  int mapping_size() const;

 private:
  int _internal_mapping_size() const;

 public:
  void clear_mapping();
  ::magma::mconfig::ModeMapItem* mutable_mapping(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::magma::mconfig::ModeMapItem>*
  mutable_mapping();

 private:
  const ::magma::mconfig::ModeMapItem& _internal_mapping(int index) const;
  ::magma::mconfig::ModeMapItem* _internal_add_mapping();

 public:
  const ::magma::mconfig::ModeMapItem& mapping(int index) const;
  ::magma::mconfig::ModeMapItem* add_mapping();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::magma::mconfig::ModeMapItem>&
  mapping() const;

  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);

 private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.FederatedModeMap)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::magma::mconfig::ModeMapItem>
      mapping_;
  bool enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class ModeMapItem PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.ModeMapItem)
                   */
{
 public:
  inline ModeMapItem() : ModeMapItem(nullptr) {}
  virtual ~ModeMapItem();

  ModeMapItem(const ModeMapItem& from);
  ModeMapItem(ModeMapItem&& from) noexcept : ModeMapItem() {
    *this = ::std::move(from);
  }

  inline ModeMapItem& operator=(const ModeMapItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModeMapItem& operator=(ModeMapItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModeMapItem& default_instance();

  static inline const ModeMapItem* internal_default_instance() {
    return reinterpret_cast<const ModeMapItem*>(
        &_ModeMapItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;

  friend void swap(ModeMapItem& a, ModeMapItem& b) { a.Swap(&b); }
  inline void Swap(ModeMapItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModeMapItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModeMapItem* New() const final {
    return CreateMaybeMessage<ModeMapItem>(nullptr);
  }

  ModeMapItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModeMapItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModeMapItem& from);
  void MergeFrom(const ModeMapItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModeMapItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.ModeMapItem";
  }

 protected:
  explicit ModeMapItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  typedef ModeMapItem_FederatedMode FederatedMode;
  static constexpr FederatedMode SPGW_SUBSCRIBER =
      ModeMapItem_FederatedMode_SPGW_SUBSCRIBER;
  static constexpr FederatedMode LOCAL_SUBSCRIBER =
      ModeMapItem_FederatedMode_LOCAL_SUBSCRIBER;
  static constexpr FederatedMode S8_SUBSCRIBER =
      ModeMapItem_FederatedMode_S8_SUBSCRIBER;
  static inline bool FederatedMode_IsValid(int value) {
    return ModeMapItem_FederatedMode_IsValid(value);
  }
  static constexpr FederatedMode FederatedMode_MIN =
      ModeMapItem_FederatedMode_FederatedMode_MIN;
  static constexpr FederatedMode FederatedMode_MAX =
      ModeMapItem_FederatedMode_FederatedMode_MAX;
  static constexpr int FederatedMode_ARRAYSIZE =
      ModeMapItem_FederatedMode_FederatedMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FederatedMode_descriptor() {
    return ModeMapItem_FederatedMode_descriptor();
  }
  template<typename T>
  static inline const std::string& FederatedMode_Name(T enum_t_value) {
    static_assert(
        ::std::is_same<T, FederatedMode>::value || ::std::is_integral<T>::value,
        "Incorrect type passed to function FederatedMode_Name.");
    return ModeMapItem_FederatedMode_Name(enum_t_value);
  }
  static inline bool FederatedMode_Parse(
      ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FederatedMode* value) {
    return ModeMapItem_FederatedMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlmnFieldNumber      = 2,
    kImsiRangeFieldNumber = 3,
    kApnFieldNumber       = 4,
    kModeFieldNumber      = 1,
  };
  // string plmn = 2;
  void clear_plmn();
  const std::string& plmn() const;
  void set_plmn(const std::string& value);
  void set_plmn(std::string&& value);
  void set_plmn(const char* value);
  void set_plmn(const char* value, size_t size);
  std::string* mutable_plmn();
  std::string* release_plmn();
  void set_allocated_plmn(std::string* plmn);

 private:
  const std::string& _internal_plmn() const;
  void _internal_set_plmn(const std::string& value);
  std::string* _internal_mutable_plmn();

 public:
  // string imsi_range = 3;
  void clear_imsi_range();
  const std::string& imsi_range() const;
  void set_imsi_range(const std::string& value);
  void set_imsi_range(std::string&& value);
  void set_imsi_range(const char* value);
  void set_imsi_range(const char* value, size_t size);
  std::string* mutable_imsi_range();
  std::string* release_imsi_range();
  void set_allocated_imsi_range(std::string* imsi_range);

 private:
  const std::string& _internal_imsi_range() const;
  void _internal_set_imsi_range(const std::string& value);
  std::string* _internal_mutable_imsi_range();

 public:
  // string apn = 4;
  void clear_apn();
  const std::string& apn() const;
  void set_apn(const std::string& value);
  void set_apn(std::string&& value);
  void set_apn(const char* value);
  void set_apn(const char* value, size_t size);
  std::string* mutable_apn();
  std::string* release_apn();
  void set_allocated_apn(std::string* apn);

 private:
  const std::string& _internal_apn() const;
  void _internal_set_apn(const std::string& value);
  std::string* _internal_mutable_apn();

 public:
  // .magma.mconfig.ModeMapItem.FederatedMode mode = 1;
  void clear_mode();
  ::magma::mconfig::ModeMapItem_FederatedMode mode() const;
  void set_mode(::magma::mconfig::ModeMapItem_FederatedMode value);

 private:
  ::magma::mconfig::ModeMapItem_FederatedMode _internal_mode() const;
  void _internal_set_mode(::magma::mconfig::ModeMapItem_FederatedMode value);

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.ModeMapItem)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plmn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imsi_range_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apn_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class SubscriberDB_SubscriptionProfile PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.SubscriberDB.SubscriptionProfile)
                   */
{
 public:
  inline SubscriberDB_SubscriptionProfile()
      : SubscriberDB_SubscriptionProfile(nullptr) {}
  virtual ~SubscriberDB_SubscriptionProfile();

  SubscriberDB_SubscriptionProfile(
      const SubscriberDB_SubscriptionProfile& from);
  SubscriberDB_SubscriptionProfile(
      SubscriberDB_SubscriptionProfile&& from) noexcept
      : SubscriberDB_SubscriptionProfile() {
    *this = ::std::move(from);
  }

  inline SubscriberDB_SubscriptionProfile& operator=(
      const SubscriberDB_SubscriptionProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscriberDB_SubscriptionProfile& operator=(
      SubscriberDB_SubscriptionProfile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscriberDB_SubscriptionProfile& default_instance();

  static inline const SubscriberDB_SubscriptionProfile*
  internal_default_instance() {
    return reinterpret_cast<const SubscriberDB_SubscriptionProfile*>(
        &_SubscriberDB_SubscriptionProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 24;

  friend void swap(
      SubscriberDB_SubscriptionProfile& a,
      SubscriberDB_SubscriptionProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscriberDB_SubscriptionProfile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscriberDB_SubscriptionProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscriberDB_SubscriptionProfile* New() const final {
    return CreateMaybeMessage<SubscriberDB_SubscriptionProfile>(nullptr);
  }

  SubscriberDB_SubscriptionProfile* New(
      ::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscriberDB_SubscriptionProfile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscriberDB_SubscriptionProfile& from);
  void MergeFrom(const SubscriberDB_SubscriptionProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscriberDB_SubscriptionProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.SubscriberDB.SubscriptionProfile";
  }

 protected:
  explicit SubscriberDB_SubscriptionProfile(
      ::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxUlBitRateFieldNumber = 1,
    kMaxDlBitRateFieldNumber = 2,
  };
  // uint64 max_ul_bit_rate = 1;
  void clear_max_ul_bit_rate();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_ul_bit_rate() const;
  void set_max_ul_bit_rate(::PROTOBUF_NAMESPACE_ID::uint64 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_ul_bit_rate() const;
  void _internal_set_max_ul_bit_rate(::PROTOBUF_NAMESPACE_ID::uint64 value);

 public:
  // uint64 max_dl_bit_rate = 2;
  void clear_max_dl_bit_rate();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_dl_bit_rate() const;
  void set_max_dl_bit_rate(::PROTOBUF_NAMESPACE_ID::uint64 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_dl_bit_rate() const;
  void _internal_set_max_dl_bit_rate(::PROTOBUF_NAMESPACE_ID::uint64 value);

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.SubscriberDB.SubscriptionProfile)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_ul_bit_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_dl_bit_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class SubscriberDB_SubProfilesEntry_DoNotUse
    : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<
          SubscriberDB_SubProfilesEntry_DoNotUse, std::string,
          ::magma::mconfig::SubscriberDB_SubscriptionProfile,
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<
      SubscriberDB_SubProfilesEntry_DoNotUse, std::string,
      ::magma::mconfig::SubscriberDB_SubscriptionProfile,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE>
      SuperType;
  SubscriberDB_SubProfilesEntry_DoNotUse();
  explicit SubscriberDB_SubProfilesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SubscriberDB_SubProfilesEntry_DoNotUse& other);
  static const SubscriberDB_SubProfilesEntry_DoNotUse*
  internal_default_instance() {
    return reinterpret_cast<const SubscriberDB_SubProfilesEntry_DoNotUse*>(
        &_SubscriberDB_SubProfilesEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s->data(), static_cast<int>(s->size()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
        "magma.mconfig.SubscriberDB.SubProfilesEntry.key");
  }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[25];
  }

 public:
};

// -------------------------------------------------------------------

class SubscriberDB PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.SubscriberDB)
                   */
{
 public:
  inline SubscriberDB() : SubscriberDB(nullptr) {}
  virtual ~SubscriberDB();

  SubscriberDB(const SubscriberDB& from);
  SubscriberDB(SubscriberDB&& from) noexcept : SubscriberDB() {
    *this = ::std::move(from);
  }

  inline SubscriberDB& operator=(const SubscriberDB& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscriberDB& operator=(SubscriberDB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscriberDB& default_instance();

  static inline const SubscriberDB* internal_default_instance() {
    return reinterpret_cast<const SubscriberDB*>(
        &_SubscriberDB_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 26;

  friend void swap(SubscriberDB& a, SubscriberDB& b) { a.Swap(&b); }
  inline void Swap(SubscriberDB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscriberDB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscriberDB* New() const final {
    return CreateMaybeMessage<SubscriberDB>(nullptr);
  }

  SubscriberDB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscriberDB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscriberDB& from);
  void MergeFrom(const SubscriberDB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscriberDB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.SubscriberDB";
  }

 protected:
  explicit SubscriberDB(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  typedef SubscriberDB_SubscriptionProfile SubscriptionProfile;

  // accessors -------------------------------------------------------

  enum : int {
    kSubProfilesFieldNumber     = 4,
    kLteAuthOpFieldNumber       = 2,
    kLteAuthAmfFieldNumber      = 3,
    kLogLevelFieldNumber        = 1,
    kRelayEnabledFieldNumber    = 5,
    kHssRelayEnabledFieldNumber = 6,
    kSyncIntervalFieldNumber    = 7,
  };
  // map<string, .magma.mconfig.SubscriberDB.SubscriptionProfile> sub_profiles =
  // 4;
  int sub_profiles_size() const;

 private:
  int _internal_sub_profiles_size() const;

 public:
  void clear_sub_profiles();

 private:
  const ::PROTOBUF_NAMESPACE_ID::Map<
      std::string, ::magma::mconfig::SubscriberDB_SubscriptionProfile>&
  _internal_sub_profiles() const;
  ::PROTOBUF_NAMESPACE_ID::Map<
      std::string, ::magma::mconfig::SubscriberDB_SubscriptionProfile>*
  _internal_mutable_sub_profiles();

 public:
  const ::PROTOBUF_NAMESPACE_ID::Map<
      std::string, ::magma::mconfig::SubscriberDB_SubscriptionProfile>&
  sub_profiles() const;
  ::PROTOBUF_NAMESPACE_ID::Map<
      std::string, ::magma::mconfig::SubscriberDB_SubscriptionProfile>*
  mutable_sub_profiles();

  // bytes lte_auth_op = 2;
  void clear_lte_auth_op();
  const std::string& lte_auth_op() const;
  void set_lte_auth_op(const std::string& value);
  void set_lte_auth_op(std::string&& value);
  void set_lte_auth_op(const char* value);
  void set_lte_auth_op(const void* value, size_t size);
  std::string* mutable_lte_auth_op();
  std::string* release_lte_auth_op();
  void set_allocated_lte_auth_op(std::string* lte_auth_op);

 private:
  const std::string& _internal_lte_auth_op() const;
  void _internal_set_lte_auth_op(const std::string& value);
  std::string* _internal_mutable_lte_auth_op();

 public:
  // bytes lte_auth_amf = 3;
  void clear_lte_auth_amf();
  const std::string& lte_auth_amf() const;
  void set_lte_auth_amf(const std::string& value);
  void set_lte_auth_amf(std::string&& value);
  void set_lte_auth_amf(const char* value);
  void set_lte_auth_amf(const void* value, size_t size);
  std::string* mutable_lte_auth_amf();
  std::string* release_lte_auth_amf();
  void set_allocated_lte_auth_amf(std::string* lte_auth_amf);

 private:
  const std::string& _internal_lte_auth_amf() const;
  void _internal_set_lte_auth_amf(const std::string& value);
  std::string* _internal_mutable_lte_auth_amf();

 public:
  // .magma.orc8r.LogLevel log_level = 1;
  void clear_log_level();
  ::magma::orc8r::LogLevel log_level() const;
  void set_log_level(::magma::orc8r::LogLevel value);

 private:
  ::magma::orc8r::LogLevel _internal_log_level() const;
  void _internal_set_log_level(::magma::orc8r::LogLevel value);

 public:
  // bool relay_enabled = 5;
  void clear_relay_enabled();
  bool relay_enabled() const;
  void set_relay_enabled(bool value);

 private:
  bool _internal_relay_enabled() const;
  void _internal_set_relay_enabled(bool value);

 public:
  // bool hss_relay_enabled = 6;
  void clear_hss_relay_enabled();
  bool hss_relay_enabled() const;
  void set_hss_relay_enabled(bool value);

 private:
  bool _internal_hss_relay_enabled() const;
  void _internal_set_hss_relay_enabled(bool value);

 public:
  // uint32 sync_interval = 7;
  void clear_sync_interval();
  ::PROTOBUF_NAMESPACE_ID::uint32 sync_interval() const;
  void set_sync_interval(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sync_interval() const;
  void _internal_set_sync_interval(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.SubscriberDB)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SubscriberDB_SubProfilesEntry_DoNotUse, std::string,
      ::magma::mconfig::SubscriberDB_SubscriptionProfile,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE>
      sub_profiles_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lte_auth_op_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lte_auth_amf_;
  int log_level_;
  bool relay_enabled_;
  bool hss_relay_enabled_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sync_interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class LighttpD PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.LighttpD)
                   */
{
 public:
  inline LighttpD() : LighttpD(nullptr) {}
  virtual ~LighttpD();

  LighttpD(const LighttpD& from);
  LighttpD(LighttpD&& from) noexcept : LighttpD() { *this = ::std::move(from); }

  inline LighttpD& operator=(const LighttpD& from) {
    CopyFrom(from);
    return *this;
  }
  inline LighttpD& operator=(LighttpD&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LighttpD& default_instance();

  static inline const LighttpD* internal_default_instance() {
    return reinterpret_cast<const LighttpD*>(&_LighttpD_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 27;

  friend void swap(LighttpD& a, LighttpD& b) { a.Swap(&b); }
  inline void Swap(LighttpD* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LighttpD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LighttpD* New() const final {
    return CreateMaybeMessage<LighttpD>(nullptr);
  }

  LighttpD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LighttpD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LighttpD& from);
  void MergeFrom(const LighttpD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LighttpD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.LighttpD";
  }

 protected:
  explicit LighttpD(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogLevelFieldNumber      = 1,
    kEnableCachingFieldNumber = 2,
  };
  // .magma.orc8r.LogLevel log_level = 1;
  void clear_log_level();
  ::magma::orc8r::LogLevel log_level() const;
  void set_log_level(::magma::orc8r::LogLevel value);

 private:
  ::magma::orc8r::LogLevel _internal_log_level() const;
  void _internal_set_log_level(::magma::orc8r::LogLevel value);

 public:
  // bool enable_caching = 2;
  void clear_enable_caching();
  bool enable_caching() const;
  void set_enable_caching(bool value);

 private:
  bool _internal_enable_caching() const;
  void _internal_set_enable_caching(bool value);

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.LighttpD)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int log_level_;
  bool enable_caching_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class MonitorD PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.MonitorD)
                   */
{
 public:
  inline MonitorD() : MonitorD(nullptr) {}
  virtual ~MonitorD();

  MonitorD(const MonitorD& from);
  MonitorD(MonitorD&& from) noexcept : MonitorD() { *this = ::std::move(from); }

  inline MonitorD& operator=(const MonitorD& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitorD& operator=(MonitorD&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MonitorD& default_instance();

  static inline const MonitorD* internal_default_instance() {
    return reinterpret_cast<const MonitorD*>(&_MonitorD_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 28;

  friend void swap(MonitorD& a, MonitorD& b) { a.Swap(&b); }
  inline void Swap(MonitorD* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonitorD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MonitorD* New() const final {
    return CreateMaybeMessage<MonitorD>(nullptr);
  }

  MonitorD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MonitorD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MonitorD& from);
  void MergeFrom(const MonitorD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.MonitorD";
  }

 protected:
  explicit MonitorD(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogLevelFieldNumber        = 1,
    kPollingIntervalFieldNumber = 60,
  };
  // .magma.orc8r.LogLevel log_level = 1;
  void clear_log_level();
  ::magma::orc8r::LogLevel log_level() const;
  void set_log_level(::magma::orc8r::LogLevel value);

 private:
  ::magma::orc8r::LogLevel _internal_log_level() const;
  void _internal_set_log_level(::magma::orc8r::LogLevel value);

 public:
  // int32 polling_interval = 60;
  void clear_polling_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 polling_interval() const;
  void set_polling_interval(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_polling_interval() const;
  void _internal_set_polling_interval(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.MonitorD)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int log_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 polling_interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class DPID PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.DPID)
                   */
{
 public:
  inline DPID() : DPID(nullptr) {}
  virtual ~DPID();

  DPID(const DPID& from);
  DPID(DPID&& from) noexcept : DPID() { *this = ::std::move(from); }

  inline DPID& operator=(const DPID& from) {
    CopyFrom(from);
    return *this;
  }
  inline DPID& operator=(DPID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DPID& default_instance();

  static inline const DPID* internal_default_instance() {
    return reinterpret_cast<const DPID*>(&_DPID_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 29;

  friend void swap(DPID& a, DPID& b) { a.Swap(&b); }
  inline void Swap(DPID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DPID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DPID* New() const final { return CreateMaybeMessage<DPID>(nullptr); }

  DPID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DPID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DPID& from);
  void MergeFrom(const DPID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DPID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.DPID";
  }

 protected:
  explicit DPID(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogLevelFieldNumber = 1,
  };
  // .magma.orc8r.LogLevel log_level = 1;
  void clear_log_level();
  ::magma::orc8r::LogLevel log_level() const;
  void set_log_level(::magma::orc8r::LogLevel value);

 private:
  ::magma::orc8r::LogLevel _internal_log_level() const;
  void _internal_set_log_level(::magma::orc8r::LogLevel value);

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.DPID)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int log_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class ConnectionD PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.ConnectionD)
                   */
{
 public:
  inline ConnectionD() : ConnectionD(nullptr) {}
  virtual ~ConnectionD();

  ConnectionD(const ConnectionD& from);
  ConnectionD(ConnectionD&& from) noexcept : ConnectionD() {
    *this = ::std::move(from);
  }

  inline ConnectionD& operator=(const ConnectionD& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionD& operator=(ConnectionD&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectionD& default_instance();

  static inline const ConnectionD* internal_default_instance() {
    return reinterpret_cast<const ConnectionD*>(
        &_ConnectionD_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 30;

  friend void swap(ConnectionD& a, ConnectionD& b) { a.Swap(&b); }
  inline void Swap(ConnectionD* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectionD* New() const final {
    return CreateMaybeMessage<ConnectionD>(nullptr);
  }

  ConnectionD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectionD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectionD& from);
  void MergeFrom(const ConnectionD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.ConnectionD";
  }

 protected:
  explicit ConnectionD(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogLevelFieldNumber = 1,
  };
  // .magma.orc8r.LogLevel log_level = 1;
  void clear_log_level();
  ::magma::orc8r::LogLevel log_level() const;
  void set_log_level(::magma::orc8r::LogLevel value);

 private:
  ::magma::orc8r::LogLevel _internal_log_level() const;
  void _internal_set_log_level(::magma::orc8r::LogLevel value);

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.ConnectionD)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int log_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class LIAgentD PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.LIAgentD)
                   */
{
 public:
  inline LIAgentD() : LIAgentD(nullptr) {}
  virtual ~LIAgentD();

  LIAgentD(const LIAgentD& from);
  LIAgentD(LIAgentD&& from) noexcept : LIAgentD() { *this = ::std::move(from); }

  inline LIAgentD& operator=(const LIAgentD& from) {
    CopyFrom(from);
    return *this;
  }
  inline LIAgentD& operator=(LIAgentD&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LIAgentD& default_instance();

  static inline const LIAgentD* internal_default_instance() {
    return reinterpret_cast<const LIAgentD*>(&_LIAgentD_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 31;

  friend void swap(LIAgentD& a, LIAgentD& b) { a.Swap(&b); }
  inline void Swap(LIAgentD* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LIAgentD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LIAgentD* New() const final {
    return CreateMaybeMessage<LIAgentD>(nullptr);
  }

  LIAgentD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LIAgentD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LIAgentD& from);
  void MergeFrom(const LIAgentD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LIAgentD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.LIAgentD";
  }

 protected:
  explicit LIAgentD(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNprobeTasksFieldNumber = 2,
    kLogLevelFieldNumber    = 1,
  };
  // repeated .magma.mconfig.NProbeTask nprobe_tasks = 2;
  int nprobe_tasks_size() const;

 private:
  int _internal_nprobe_tasks_size() const;

 public:
  void clear_nprobe_tasks();
  ::magma::mconfig::NProbeTask* mutable_nprobe_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::magma::mconfig::NProbeTask>*
  mutable_nprobe_tasks();

 private:
  const ::magma::mconfig::NProbeTask& _internal_nprobe_tasks(int index) const;
  ::magma::mconfig::NProbeTask* _internal_add_nprobe_tasks();

 public:
  const ::magma::mconfig::NProbeTask& nprobe_tasks(int index) const;
  ::magma::mconfig::NProbeTask* add_nprobe_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::magma::mconfig::NProbeTask>&
  nprobe_tasks() const;

  // .magma.orc8r.LogLevel log_level = 1;
  void clear_log_level();
  ::magma::orc8r::LogLevel log_level() const;
  void set_log_level(::magma::orc8r::LogLevel value);

 private:
  ::magma::orc8r::LogLevel _internal_log_level() const;
  void _internal_set_log_level(::magma::orc8r::LogLevel value);

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.LIAgentD)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::magma::mconfig::NProbeTask>
      nprobe_tasks_;
  int log_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class NProbeTask PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.NProbeTask)
                   */
{
 public:
  inline NProbeTask() : NProbeTask(nullptr) {}
  virtual ~NProbeTask();

  NProbeTask(const NProbeTask& from);
  NProbeTask(NProbeTask&& from) noexcept : NProbeTask() {
    *this = ::std::move(from);
  }

  inline NProbeTask& operator=(const NProbeTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline NProbeTask& operator=(NProbeTask&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NProbeTask& default_instance();

  static inline const NProbeTask* internal_default_instance() {
    return reinterpret_cast<const NProbeTask*>(&_NProbeTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 32;

  friend void swap(NProbeTask& a, NProbeTask& b) { a.Swap(&b); }
  inline void Swap(NProbeTask* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NProbeTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NProbeTask* New() const final {
    return CreateMaybeMessage<NProbeTask>(nullptr);
  }

  NProbeTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NProbeTask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NProbeTask& from);
  void MergeFrom(const NProbeTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NProbeTask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.NProbeTask";
  }

 protected:
  explicit NProbeTask(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber        = 1,
    kTargetIdFieldNumber      = 2,
    kTargetTypeFieldNumber    = 3,
    kDeliveryTypeFieldNumber  = 4,
    kDomainIdFieldNumber      = 6,
    kCorrelationIdFieldNumber = 5,
  };
  // string task_id = 1;
  void clear_task_id();
  const std::string& task_id() const;
  void set_task_id(const std::string& value);
  void set_task_id(std::string&& value);
  void set_task_id(const char* value);
  void set_task_id(const char* value, size_t size);
  std::string* mutable_task_id();
  std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);

 private:
  const std::string& _internal_task_id() const;
  void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();

 public:
  // string target_id = 2;
  void clear_target_id();
  const std::string& target_id() const;
  void set_target_id(const std::string& value);
  void set_target_id(std::string&& value);
  void set_target_id(const char* value);
  void set_target_id(const char* value, size_t size);
  std::string* mutable_target_id();
  std::string* release_target_id();
  void set_allocated_target_id(std::string* target_id);

 private:
  const std::string& _internal_target_id() const;
  void _internal_set_target_id(const std::string& value);
  std::string* _internal_mutable_target_id();

 public:
  // string target_type = 3;
  void clear_target_type();
  const std::string& target_type() const;
  void set_target_type(const std::string& value);
  void set_target_type(std::string&& value);
  void set_target_type(const char* value);
  void set_target_type(const char* value, size_t size);
  std::string* mutable_target_type();
  std::string* release_target_type();
  void set_allocated_target_type(std::string* target_type);

 private:
  const std::string& _internal_target_type() const;
  void _internal_set_target_type(const std::string& value);
  std::string* _internal_mutable_target_type();

 public:
  // string delivery_type = 4;
  void clear_delivery_type();
  const std::string& delivery_type() const;
  void set_delivery_type(const std::string& value);
  void set_delivery_type(std::string&& value);
  void set_delivery_type(const char* value);
  void set_delivery_type(const char* value, size_t size);
  std::string* mutable_delivery_type();
  std::string* release_delivery_type();
  void set_allocated_delivery_type(std::string* delivery_type);

 private:
  const std::string& _internal_delivery_type() const;
  void _internal_set_delivery_type(const std::string& value);
  std::string* _internal_mutable_delivery_type();

 public:
  // string domain_id = 6;
  void clear_domain_id();
  const std::string& domain_id() const;
  void set_domain_id(const std::string& value);
  void set_domain_id(std::string&& value);
  void set_domain_id(const char* value);
  void set_domain_id(const char* value, size_t size);
  std::string* mutable_domain_id();
  std::string* release_domain_id();
  void set_allocated_domain_id(std::string* domain_id);

 private:
  const std::string& _internal_domain_id() const;
  void _internal_set_domain_id(const std::string& value);
  std::string* _internal_mutable_domain_id();

 public:
  // uint64 correlation_id = 5;
  void clear_correlation_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 correlation_id() const;
  void set_correlation_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_correlation_id() const;
  void _internal_set_correlation_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.NProbeTask)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delivery_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 correlation_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class DnsD PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.DnsD)
                   */
{
 public:
  inline DnsD() : DnsD(nullptr) {}
  virtual ~DnsD();

  DnsD(const DnsD& from);
  DnsD(DnsD&& from) noexcept : DnsD() { *this = ::std::move(from); }

  inline DnsD& operator=(const DnsD& from) {
    CopyFrom(from);
    return *this;
  }
  inline DnsD& operator=(DnsD&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DnsD& default_instance();

  static inline const DnsD* internal_default_instance() {
    return reinterpret_cast<const DnsD*>(&_DnsD_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 33;

  friend void swap(DnsD& a, DnsD& b) { a.Swap(&b); }
  inline void Swap(DnsD* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DnsD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DnsD* New() const final { return CreateMaybeMessage<DnsD>(nullptr); }

  DnsD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DnsD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DnsD& from);
  void MergeFrom(const DnsD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DnsD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.DnsD";
  }

 protected:
  explicit DnsD(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber           = 4,
    kLogLevelFieldNumber          = 1,
    kLocalTTLFieldNumber          = 3,
    kEnableCachingFieldNumber     = 2,
    kDhcpServerEnabledFieldNumber = 5,
  };
  // repeated .magma.mconfig.GatewayDNSConfigRecordsItems records = 4;
  int records_size() const;

 private:
  int _internal_records_size() const;

 public:
  void clear_records();
  ::magma::mconfig::GatewayDNSConfigRecordsItems* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::magma::mconfig::GatewayDNSConfigRecordsItems>*
  mutable_records();

 private:
  const ::magma::mconfig::GatewayDNSConfigRecordsItems& _internal_records(
      int index) const;
  ::magma::mconfig::GatewayDNSConfigRecordsItems* _internal_add_records();

 public:
  const ::magma::mconfig::GatewayDNSConfigRecordsItems& records(
      int index) const;
  ::magma::mconfig::GatewayDNSConfigRecordsItems* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::magma::mconfig::GatewayDNSConfigRecordsItems>&
  records() const;

  // .magma.orc8r.LogLevel log_level = 1;
  void clear_log_level();
  ::magma::orc8r::LogLevel log_level() const;
  void set_log_level(::magma::orc8r::LogLevel value);

 private:
  ::magma::orc8r::LogLevel _internal_log_level() const;
  void _internal_set_log_level(::magma::orc8r::LogLevel value);

 public:
  // int32 localTTL = 3;
  void clear_localttl();
  ::PROTOBUF_NAMESPACE_ID::int32 localttl() const;
  void set_localttl(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_localttl() const;
  void _internal_set_localttl(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // bool enable_caching = 2;
  void clear_enable_caching();
  bool enable_caching() const;
  void set_enable_caching(bool value);

 private:
  bool _internal_enable_caching() const;
  void _internal_set_enable_caching(bool value);

 public:
  // bool dhcp_server_enabled = 5;
  void clear_dhcp_server_enabled();
  bool dhcp_server_enabled() const;
  void set_dhcp_server_enabled(bool value);

 private:
  bool _internal_dhcp_server_enabled() const;
  void _internal_set_dhcp_server_enabled(bool value);

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.DnsD)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::magma::mconfig::GatewayDNSConfigRecordsItems>
      records_;
  int log_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 localttl_;
  bool enable_caching_;
  bool dhcp_server_enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// -------------------------------------------------------------------

class GatewayDNSConfigRecordsItems PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:magma.mconfig.GatewayDNSConfigRecordsItems)
                   */
{
 public:
  inline GatewayDNSConfigRecordsItems()
      : GatewayDNSConfigRecordsItems(nullptr) {}
  virtual ~GatewayDNSConfigRecordsItems();

  GatewayDNSConfigRecordsItems(const GatewayDNSConfigRecordsItems& from);
  GatewayDNSConfigRecordsItems(GatewayDNSConfigRecordsItems&& from) noexcept
      : GatewayDNSConfigRecordsItems() {
    *this = ::std::move(from);
  }

  inline GatewayDNSConfigRecordsItems& operator=(
      const GatewayDNSConfigRecordsItems& from) {
    CopyFrom(from);
    return *this;
  }
  inline GatewayDNSConfigRecordsItems& operator=(
      GatewayDNSConfigRecordsItems&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GatewayDNSConfigRecordsItems& default_instance();

  static inline const GatewayDNSConfigRecordsItems*
  internal_default_instance() {
    return reinterpret_cast<const GatewayDNSConfigRecordsItems*>(
        &_GatewayDNSConfigRecordsItems_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 34;

  friend void swap(
      GatewayDNSConfigRecordsItems& a, GatewayDNSConfigRecordsItems& b) {
    a.Swap(&b);
  }
  inline void Swap(GatewayDNSConfigRecordsItems* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GatewayDNSConfigRecordsItems* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GatewayDNSConfigRecordsItems* New() const final {
    return CreateMaybeMessage<GatewayDNSConfigRecordsItems>(nullptr);
  }

  GatewayDNSConfigRecordsItems* New(
      ::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GatewayDNSConfigRecordsItems>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GatewayDNSConfigRecordsItems& from);
  void MergeFrom(const GatewayDNSConfigRecordsItems& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GatewayDNSConfigRecordsItems* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "magma.mconfig.GatewayDNSConfigRecordsItems";
  }

 protected:
  explicit GatewayDNSConfigRecordsItems(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto);
    return ::descriptor_table_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kARecordFieldNumber     = 1,
    kAaaaRecordFieldNumber  = 2,
    kCnameRecordFieldNumber = 3,
    kDomainFieldNumber      = 4,
  };
  // repeated string a_record = 1;
  int a_record_size() const;

 private:
  int _internal_a_record_size() const;

 public:
  void clear_a_record();
  const std::string& a_record(int index) const;
  std::string* mutable_a_record(int index);
  void set_a_record(int index, const std::string& value);
  void set_a_record(int index, std::string&& value);
  void set_a_record(int index, const char* value);
  void set_a_record(int index, const char* value, size_t size);
  std::string* add_a_record();
  void add_a_record(const std::string& value);
  void add_a_record(std::string&& value);
  void add_a_record(const char* value);
  void add_a_record(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& a_record()
      const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_a_record();

 private:
  const std::string& _internal_a_record(int index) const;
  std::string* _internal_add_a_record();

 public:
  // repeated string aaaa_record = 2;
  int aaaa_record_size() const;

 private:
  int _internal_aaaa_record_size() const;

 public:
  void clear_aaaa_record();
  const std::string& aaaa_record(int index) const;
  std::string* mutable_aaaa_record(int index);
  void set_aaaa_record(int index, const std::string& value);
  void set_aaaa_record(int index, std::string&& value);
  void set_aaaa_record(int index, const char* value);
  void set_aaaa_record(int index, const char* value, size_t size);
  std::string* add_aaaa_record();
  void add_aaaa_record(const std::string& value);
  void add_aaaa_record(std::string&& value);
  void add_aaaa_record(const char* value);
  void add_aaaa_record(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& aaaa_record()
      const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_aaaa_record();

 private:
  const std::string& _internal_aaaa_record(int index) const;
  std::string* _internal_add_aaaa_record();

 public:
  // repeated string cname_record = 3;
  int cname_record_size() const;

 private:
  int _internal_cname_record_size() const;

 public:
  void clear_cname_record();
  const std::string& cname_record(int index) const;
  std::string* mutable_cname_record(int index);
  void set_cname_record(int index, const std::string& value);
  void set_cname_record(int index, std::string&& value);
  void set_cname_record(int index, const char* value);
  void set_cname_record(int index, const char* value, size_t size);
  std::string* add_cname_record();
  void add_cname_record(const std::string& value);
  void add_cname_record(std::string&& value);
  void add_cname_record(const char* value);
  void add_cname_record(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cname_record()
      const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
  mutable_cname_record();

 private:
  const std::string& _internal_cname_record(int index) const;
  std::string* _internal_add_cname_record();

 public:
  // string domain = 4;
  void clear_domain();
  const std::string& domain() const;
  void set_domain(const std::string& value);
  void set_domain(std::string&& value);
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  std::string* mutable_domain();
  std::string* release_domain();
  void set_allocated_domain(std::string* domain);

 private:
  const std::string& _internal_domain() const;
  void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();

 public:
  // @@protoc_insertion_point(class_scope:magma.mconfig.GatewayDNSConfigRecordsItems)
 private:
  class _Internal;

  template<typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> a_record_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> aaaa_record_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cname_record_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lte_2fprotos_2fmconfig_2fmconfigs_2eproto;
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SentryConfig

// string url_python = 1;
inline void SentryConfig::clear_url_python() {
  url_python_.ClearToEmpty();
}
inline const std::string& SentryConfig::url_python() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.SentryConfig.url_python)
  return _internal_url_python();
}
inline void SentryConfig::set_url_python(const std::string& value) {
  _internal_set_url_python(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.SentryConfig.url_python)
}
inline std::string* SentryConfig::mutable_url_python() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.SentryConfig.url_python)
  return _internal_mutable_url_python();
}
inline const std::string& SentryConfig::_internal_url_python() const {
  return url_python_.Get();
}
inline void SentryConfig::_internal_set_url_python(const std::string& value) {
  url_python_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void SentryConfig::set_url_python(std::string&& value) {
  url_python_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.SentryConfig.url_python)
}
inline void SentryConfig::set_url_python(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  url_python_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.SentryConfig.url_python)
}
inline void SentryConfig::set_url_python(const char* value, size_t size) {
  url_python_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.SentryConfig.url_python)
}
inline std::string* SentryConfig::_internal_mutable_url_python() {
  return url_python_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* SentryConfig::release_url_python() {
  // @@protoc_insertion_point(field_release:magma.mconfig.SentryConfig.url_python)
  return url_python_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SentryConfig::set_allocated_url_python(std::string* url_python) {
  if (url_python != nullptr) {
  } else {
  }
  url_python_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      url_python, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.SentryConfig.url_python)
}

// string url_native = 2;
inline void SentryConfig::clear_url_native() {
  url_native_.ClearToEmpty();
}
inline const std::string& SentryConfig::url_native() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.SentryConfig.url_native)
  return _internal_url_native();
}
inline void SentryConfig::set_url_native(const std::string& value) {
  _internal_set_url_native(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.SentryConfig.url_native)
}
inline std::string* SentryConfig::mutable_url_native() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.SentryConfig.url_native)
  return _internal_mutable_url_native();
}
inline const std::string& SentryConfig::_internal_url_native() const {
  return url_native_.Get();
}
inline void SentryConfig::_internal_set_url_native(const std::string& value) {
  url_native_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void SentryConfig::set_url_native(std::string&& value) {
  url_native_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.SentryConfig.url_native)
}
inline void SentryConfig::set_url_native(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  url_native_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.SentryConfig.url_native)
}
inline void SentryConfig::set_url_native(const char* value, size_t size) {
  url_native_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.SentryConfig.url_native)
}
inline std::string* SentryConfig::_internal_mutable_url_native() {
  return url_native_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* SentryConfig::release_url_native() {
  // @@protoc_insertion_point(field_release:magma.mconfig.SentryConfig.url_native)
  return url_native_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SentryConfig::set_allocated_url_native(std::string* url_native) {
  if (url_native != nullptr) {
  } else {
  }
  url_native_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      url_native, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.SentryConfig.url_native)
}

// bool upload_mme_log = 3;
inline void SentryConfig::clear_upload_mme_log() {
  upload_mme_log_ = false;
}
inline bool SentryConfig::_internal_upload_mme_log() const {
  return upload_mme_log_;
}
inline bool SentryConfig::upload_mme_log() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.SentryConfig.upload_mme_log)
  return _internal_upload_mme_log();
}
inline void SentryConfig::_internal_set_upload_mme_log(bool value) {
  upload_mme_log_ = value;
}
inline void SentryConfig::set_upload_mme_log(bool value) {
  _internal_set_upload_mme_log(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.SentryConfig.upload_mme_log)
}

// float sample_rate = 4;
inline void SentryConfig::clear_sample_rate() {
  sample_rate_ = 0;
}
inline float SentryConfig::_internal_sample_rate() const {
  return sample_rate_;
}
inline float SentryConfig::sample_rate() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.SentryConfig.sample_rate)
  return _internal_sample_rate();
}
inline void SentryConfig::_internal_set_sample_rate(float value) {
  sample_rate_ = value;
}
inline void SentryConfig::set_sample_rate(float value) {
  _internal_set_sample_rate(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.SentryConfig.sample_rate)
}

// -------------------------------------------------------------------

// EnodebD_FDDConfig

// int32 earfcndl = 1;
inline void EnodebD_FDDConfig::clear_earfcndl() {
  earfcndl_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnodebD_FDDConfig::_internal_earfcndl()
    const {
  return earfcndl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnodebD_FDDConfig::earfcndl() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.EnodebD.FDDConfig.earfcndl)
  return _internal_earfcndl();
}
inline void EnodebD_FDDConfig::_internal_set_earfcndl(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  earfcndl_ = value;
}
inline void EnodebD_FDDConfig::set_earfcndl(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_earfcndl(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.EnodebD.FDDConfig.earfcndl)
}

// int32 earfcnul = 2;
inline void EnodebD_FDDConfig::clear_earfcnul() {
  earfcnul_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnodebD_FDDConfig::_internal_earfcnul()
    const {
  return earfcnul_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnodebD_FDDConfig::earfcnul() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.EnodebD.FDDConfig.earfcnul)
  return _internal_earfcnul();
}
inline void EnodebD_FDDConfig::_internal_set_earfcnul(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  earfcnul_ = value;
}
inline void EnodebD_FDDConfig::set_earfcnul(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_earfcnul(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.EnodebD.FDDConfig.earfcnul)
}

// -------------------------------------------------------------------

// EnodebD_TDDConfig

// int32 earfcndl = 1;
inline void EnodebD_TDDConfig::clear_earfcndl() {
  earfcndl_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnodebD_TDDConfig::_internal_earfcndl()
    const {
  return earfcndl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnodebD_TDDConfig::earfcndl() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.EnodebD.TDDConfig.earfcndl)
  return _internal_earfcndl();
}
inline void EnodebD_TDDConfig::_internal_set_earfcndl(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  earfcndl_ = value;
}
inline void EnodebD_TDDConfig::set_earfcndl(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_earfcndl(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.EnodebD.TDDConfig.earfcndl)
}

// int32 subframe_assignment = 2;
inline void EnodebD_TDDConfig::clear_subframe_assignment() {
  subframe_assignment_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32
EnodebD_TDDConfig::_internal_subframe_assignment() const {
  return subframe_assignment_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnodebD_TDDConfig::subframe_assignment()
    const {
  // @@protoc_insertion_point(field_get:magma.mconfig.EnodebD.TDDConfig.subframe_assignment)
  return _internal_subframe_assignment();
}
inline void EnodebD_TDDConfig::_internal_set_subframe_assignment(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  subframe_assignment_ = value;
}
inline void EnodebD_TDDConfig::set_subframe_assignment(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_subframe_assignment(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.EnodebD.TDDConfig.subframe_assignment)
}

// int32 special_subframe_pattern = 3;
inline void EnodebD_TDDConfig::clear_special_subframe_pattern() {
  special_subframe_pattern_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32
EnodebD_TDDConfig::_internal_special_subframe_pattern() const {
  return special_subframe_pattern_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32
EnodebD_TDDConfig::special_subframe_pattern() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.EnodebD.TDDConfig.special_subframe_pattern)
  return _internal_special_subframe_pattern();
}
inline void EnodebD_TDDConfig::_internal_set_special_subframe_pattern(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  special_subframe_pattern_ = value;
}
inline void EnodebD_TDDConfig::set_special_subframe_pattern(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_special_subframe_pattern(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.EnodebD.TDDConfig.special_subframe_pattern)
}

// -------------------------------------------------------------------

// EnodebD_EnodebConfig

// int32 earfcndl = 1;
inline void EnodebD_EnodebConfig::clear_earfcndl() {
  earfcndl_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnodebD_EnodebConfig::_internal_earfcndl()
    const {
  return earfcndl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnodebD_EnodebConfig::earfcndl() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.EnodebD.EnodebConfig.earfcndl)
  return _internal_earfcndl();
}
inline void EnodebD_EnodebConfig::_internal_set_earfcndl(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  earfcndl_ = value;
}
inline void EnodebD_EnodebConfig::set_earfcndl(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_earfcndl(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.EnodebD.EnodebConfig.earfcndl)
}

// int32 subframe_assignment = 2;
inline void EnodebD_EnodebConfig::clear_subframe_assignment() {
  subframe_assignment_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32
EnodebD_EnodebConfig::_internal_subframe_assignment() const {
  return subframe_assignment_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32
EnodebD_EnodebConfig::subframe_assignment() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.EnodebD.EnodebConfig.subframe_assignment)
  return _internal_subframe_assignment();
}
inline void EnodebD_EnodebConfig::_internal_set_subframe_assignment(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  subframe_assignment_ = value;
}
inline void EnodebD_EnodebConfig::set_subframe_assignment(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_subframe_assignment(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.EnodebD.EnodebConfig.subframe_assignment)
}

// int32 special_subframe_pattern = 3;
inline void EnodebD_EnodebConfig::clear_special_subframe_pattern() {
  special_subframe_pattern_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32
EnodebD_EnodebConfig::_internal_special_subframe_pattern() const {
  return special_subframe_pattern_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32
EnodebD_EnodebConfig::special_subframe_pattern() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.EnodebD.EnodebConfig.special_subframe_pattern)
  return _internal_special_subframe_pattern();
}
inline void EnodebD_EnodebConfig::_internal_set_special_subframe_pattern(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  special_subframe_pattern_ = value;
}
inline void EnodebD_EnodebConfig::set_special_subframe_pattern(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_special_subframe_pattern(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.EnodebD.EnodebConfig.special_subframe_pattern)
}

// int32 pci = 4;
inline void EnodebD_EnodebConfig::clear_pci() {
  pci_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnodebD_EnodebConfig::_internal_pci()
    const {
  return pci_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnodebD_EnodebConfig::pci() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.EnodebD.EnodebConfig.pci)
  return _internal_pci();
}
inline void EnodebD_EnodebConfig::_internal_set_pci(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  pci_ = value;
}
inline void EnodebD_EnodebConfig::set_pci(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pci(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.EnodebD.EnodebConfig.pci)
}

// bool transmit_enabled = 5;
inline void EnodebD_EnodebConfig::clear_transmit_enabled() {
  transmit_enabled_ = false;
}
inline bool EnodebD_EnodebConfig::_internal_transmit_enabled() const {
  return transmit_enabled_;
}
inline bool EnodebD_EnodebConfig::transmit_enabled() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.EnodebD.EnodebConfig.transmit_enabled)
  return _internal_transmit_enabled();
}
inline void EnodebD_EnodebConfig::_internal_set_transmit_enabled(bool value) {
  transmit_enabled_ = value;
}
inline void EnodebD_EnodebConfig::set_transmit_enabled(bool value) {
  _internal_set_transmit_enabled(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.EnodebD.EnodebConfig.transmit_enabled)
}

// string device_class = 6;
inline void EnodebD_EnodebConfig::clear_device_class() {
  device_class_.ClearToEmpty();
}
inline const std::string& EnodebD_EnodebConfig::device_class() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.EnodebD.EnodebConfig.device_class)
  return _internal_device_class();
}
inline void EnodebD_EnodebConfig::set_device_class(const std::string& value) {
  _internal_set_device_class(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.EnodebD.EnodebConfig.device_class)
}
inline std::string* EnodebD_EnodebConfig::mutable_device_class() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.EnodebD.EnodebConfig.device_class)
  return _internal_mutable_device_class();
}
inline const std::string& EnodebD_EnodebConfig::_internal_device_class() const {
  return device_class_.Get();
}
inline void EnodebD_EnodebConfig::_internal_set_device_class(
    const std::string& value) {
  device_class_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void EnodebD_EnodebConfig::set_device_class(std::string&& value) {
  device_class_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.EnodebD.EnodebConfig.device_class)
}
inline void EnodebD_EnodebConfig::set_device_class(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  device_class_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.EnodebD.EnodebConfig.device_class)
}
inline void EnodebD_EnodebConfig::set_device_class(
    const char* value, size_t size) {
  device_class_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.EnodebD.EnodebConfig.device_class)
}
inline std::string* EnodebD_EnodebConfig::_internal_mutable_device_class() {
  return device_class_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* EnodebD_EnodebConfig::release_device_class() {
  // @@protoc_insertion_point(field_release:magma.mconfig.EnodebD.EnodebConfig.device_class)
  return device_class_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EnodebD_EnodebConfig::set_allocated_device_class(
    std::string* device_class) {
  if (device_class != nullptr) {
  } else {
  }
  device_class_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_class, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.EnodebD.EnodebConfig.device_class)
}

// int32 bandwidth_mhz = 7;
inline void EnodebD_EnodebConfig::clear_bandwidth_mhz() {
  bandwidth_mhz_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32
EnodebD_EnodebConfig::_internal_bandwidth_mhz() const {
  return bandwidth_mhz_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnodebD_EnodebConfig::bandwidth_mhz()
    const {
  // @@protoc_insertion_point(field_get:magma.mconfig.EnodebD.EnodebConfig.bandwidth_mhz)
  return _internal_bandwidth_mhz();
}
inline void EnodebD_EnodebConfig::_internal_set_bandwidth_mhz(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  bandwidth_mhz_ = value;
}
inline void EnodebD_EnodebConfig::set_bandwidth_mhz(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bandwidth_mhz(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.EnodebD.EnodebConfig.bandwidth_mhz)
}

// int32 tac = 8;
inline void EnodebD_EnodebConfig::clear_tac() {
  tac_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnodebD_EnodebConfig::_internal_tac()
    const {
  return tac_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnodebD_EnodebConfig::tac() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.EnodebD.EnodebConfig.tac)
  return _internal_tac();
}
inline void EnodebD_EnodebConfig::_internal_set_tac(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  tac_ = value;
}
inline void EnodebD_EnodebConfig::set_tac(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tac(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.EnodebD.EnodebConfig.tac)
}

// int32 cell_id = 9;
inline void EnodebD_EnodebConfig::clear_cell_id() {
  cell_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnodebD_EnodebConfig::_internal_cell_id()
    const {
  return cell_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnodebD_EnodebConfig::cell_id() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.EnodebD.EnodebConfig.cell_id)
  return _internal_cell_id();
}
inline void EnodebD_EnodebConfig::_internal_set_cell_id(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  cell_id_ = value;
}
inline void EnodebD_EnodebConfig::set_cell_id(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cell_id(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.EnodebD.EnodebConfig.cell_id)
}

// string ip_address = 10;
inline void EnodebD_EnodebConfig::clear_ip_address() {
  ip_address_.ClearToEmpty();
}
inline const std::string& EnodebD_EnodebConfig::ip_address() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.EnodebD.EnodebConfig.ip_address)
  return _internal_ip_address();
}
inline void EnodebD_EnodebConfig::set_ip_address(const std::string& value) {
  _internal_set_ip_address(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.EnodebD.EnodebConfig.ip_address)
}
inline std::string* EnodebD_EnodebConfig::mutable_ip_address() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.EnodebD.EnodebConfig.ip_address)
  return _internal_mutable_ip_address();
}
inline const std::string& EnodebD_EnodebConfig::_internal_ip_address() const {
  return ip_address_.Get();
}
inline void EnodebD_EnodebConfig::_internal_set_ip_address(
    const std::string& value) {
  ip_address_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void EnodebD_EnodebConfig::set_ip_address(std::string&& value) {
  ip_address_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.EnodebD.EnodebConfig.ip_address)
}
inline void EnodebD_EnodebConfig::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  ip_address_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.EnodebD.EnodebConfig.ip_address)
}
inline void EnodebD_EnodebConfig::set_ip_address(
    const char* value, size_t size) {
  ip_address_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.EnodebD.EnodebConfig.ip_address)
}
inline std::string* EnodebD_EnodebConfig::_internal_mutable_ip_address() {
  return ip_address_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* EnodebD_EnodebConfig::release_ip_address() {
  // @@protoc_insertion_point(field_release:magma.mconfig.EnodebD.EnodebConfig.ip_address)
  return ip_address_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EnodebD_EnodebConfig::set_allocated_ip_address(
    std::string* ip_address) {
  if (ip_address != nullptr) {
  } else {
  }
  ip_address_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip_address, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.EnodebD.EnodebConfig.ip_address)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// EnodebD

// .magma.orc8r.LogLevel log_level = 1;
inline void EnodebD::clear_log_level() {
  log_level_ = 0;
}
inline ::magma::orc8r::LogLevel EnodebD::_internal_log_level() const {
  return static_cast<::magma::orc8r::LogLevel>(log_level_);
}
inline ::magma::orc8r::LogLevel EnodebD::log_level() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.EnodebD.log_level)
  return _internal_log_level();
}
inline void EnodebD::_internal_set_log_level(::magma::orc8r::LogLevel value) {
  log_level_ = value;
}
inline void EnodebD::set_log_level(::magma::orc8r::LogLevel value) {
  _internal_set_log_level(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.EnodebD.log_level)
}

// int32 pci = 2;
inline void EnodebD::clear_pci() {
  pci_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnodebD::_internal_pci() const {
  return pci_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnodebD::pci() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.EnodebD.pci)
  return _internal_pci();
}
inline void EnodebD::_internal_set_pci(::PROTOBUF_NAMESPACE_ID::int32 value) {
  pci_ = value;
}
inline void EnodebD::set_pci(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pci(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.EnodebD.pci)
}

// int32 earfcndl = 3;
inline void EnodebD::clear_earfcndl() {
  earfcndl_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnodebD::_internal_earfcndl() const {
  return earfcndl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnodebD::earfcndl() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.EnodebD.earfcndl)
  return _internal_earfcndl();
}
inline void EnodebD::_internal_set_earfcndl(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  earfcndl_ = value;
}
inline void EnodebD::set_earfcndl(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_earfcndl(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.EnodebD.earfcndl)
}

// int32 bandwidth_mhz = 4;
inline void EnodebD::clear_bandwidth_mhz() {
  bandwidth_mhz_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnodebD::_internal_bandwidth_mhz() const {
  return bandwidth_mhz_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnodebD::bandwidth_mhz() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.EnodebD.bandwidth_mhz)
  return _internal_bandwidth_mhz();
}
inline void EnodebD::_internal_set_bandwidth_mhz(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  bandwidth_mhz_ = value;
}
inline void EnodebD::set_bandwidth_mhz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bandwidth_mhz(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.EnodebD.bandwidth_mhz)
}

// string plmnid_list = 5;
inline void EnodebD::clear_plmnid_list() {
  plmnid_list_.ClearToEmpty();
}
inline const std::string& EnodebD::plmnid_list() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.EnodebD.plmnid_list)
  return _internal_plmnid_list();
}
inline void EnodebD::set_plmnid_list(const std::string& value) {
  _internal_set_plmnid_list(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.EnodebD.plmnid_list)
}
inline std::string* EnodebD::mutable_plmnid_list() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.EnodebD.plmnid_list)
  return _internal_mutable_plmnid_list();
}
inline const std::string& EnodebD::_internal_plmnid_list() const {
  return plmnid_list_.Get();
}
inline void EnodebD::_internal_set_plmnid_list(const std::string& value) {
  plmnid_list_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void EnodebD::set_plmnid_list(std::string&& value) {
  plmnid_list_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.EnodebD.plmnid_list)
}
inline void EnodebD::set_plmnid_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  plmnid_list_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.EnodebD.plmnid_list)
}
inline void EnodebD::set_plmnid_list(const char* value, size_t size) {
  plmnid_list_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.EnodebD.plmnid_list)
}
inline std::string* EnodebD::_internal_mutable_plmnid_list() {
  return plmnid_list_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* EnodebD::release_plmnid_list() {
  // @@protoc_insertion_point(field_release:magma.mconfig.EnodebD.plmnid_list)
  return plmnid_list_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EnodebD::set_allocated_plmnid_list(std::string* plmnid_list) {
  if (plmnid_list != nullptr) {
  } else {
  }
  plmnid_list_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      plmnid_list, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.EnodebD.plmnid_list)
}

// int32 subframe_assignment = 6;
inline void EnodebD::clear_subframe_assignment() {
  subframe_assignment_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnodebD::_internal_subframe_assignment()
    const {
  return subframe_assignment_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnodebD::subframe_assignment() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.EnodebD.subframe_assignment)
  return _internal_subframe_assignment();
}
inline void EnodebD::_internal_set_subframe_assignment(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  subframe_assignment_ = value;
}
inline void EnodebD::set_subframe_assignment(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_subframe_assignment(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.EnodebD.subframe_assignment)
}

// int32 special_subframe_pattern = 7;
inline void EnodebD::clear_special_subframe_pattern() {
  special_subframe_pattern_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32
EnodebD::_internal_special_subframe_pattern() const {
  return special_subframe_pattern_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnodebD::special_subframe_pattern()
    const {
  // @@protoc_insertion_point(field_get:magma.mconfig.EnodebD.special_subframe_pattern)
  return _internal_special_subframe_pattern();
}
inline void EnodebD::_internal_set_special_subframe_pattern(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  special_subframe_pattern_ = value;
}
inline void EnodebD::set_special_subframe_pattern(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_special_subframe_pattern(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.EnodebD.special_subframe_pattern)
}

// bool allow_enodeb_transmit = 8;
inline void EnodebD::clear_allow_enodeb_transmit() {
  allow_enodeb_transmit_ = false;
}
inline bool EnodebD::_internal_allow_enodeb_transmit() const {
  return allow_enodeb_transmit_;
}
inline bool EnodebD::allow_enodeb_transmit() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.EnodebD.allow_enodeb_transmit)
  return _internal_allow_enodeb_transmit();
}
inline void EnodebD::_internal_set_allow_enodeb_transmit(bool value) {
  allow_enodeb_transmit_ = value;
}
inline void EnodebD::set_allow_enodeb_transmit(bool value) {
  _internal_set_allow_enodeb_transmit(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.EnodebD.allow_enodeb_transmit)
}

// int32 tac = 9;
inline void EnodebD::clear_tac() {
  tac_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnodebD::_internal_tac() const {
  return tac_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnodebD::tac() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.EnodebD.tac)
  return _internal_tac();
}
inline void EnodebD::_internal_set_tac(::PROTOBUF_NAMESPACE_ID::int32 value) {
  tac_ = value;
}
inline void EnodebD::set_tac(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tac(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.EnodebD.tac)
}

// .magma.mconfig.EnodebD.CSFBRat csfb_rat = 10;
inline void EnodebD::clear_csfb_rat() {
  csfb_rat_ = 0;
}
inline ::magma::mconfig::EnodebD_CSFBRat EnodebD::_internal_csfb_rat() const {
  return static_cast<::magma::mconfig::EnodebD_CSFBRat>(csfb_rat_);
}
inline ::magma::mconfig::EnodebD_CSFBRat EnodebD::csfb_rat() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.EnodebD.csfb_rat)
  return _internal_csfb_rat();
}
inline void EnodebD::_internal_set_csfb_rat(
    ::magma::mconfig::EnodebD_CSFBRat value) {
  csfb_rat_ = value;
}
inline void EnodebD::set_csfb_rat(::magma::mconfig::EnodebD_CSFBRat value) {
  _internal_set_csfb_rat(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.EnodebD.csfb_rat)
}

// repeated int32 arfcn_2g = 11;
inline int EnodebD::_internal_arfcn_2g_size() const {
  return arfcn_2g_.size();
}
inline int EnodebD::arfcn_2g_size() const {
  return _internal_arfcn_2g_size();
}
inline void EnodebD::clear_arfcn_2g() {
  arfcn_2g_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnodebD::_internal_arfcn_2g(
    int index) const {
  return arfcn_2g_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnodebD::arfcn_2g(int index) const {
  // @@protoc_insertion_point(field_get:magma.mconfig.EnodebD.arfcn_2g)
  return _internal_arfcn_2g(index);
}
inline void EnodebD::set_arfcn_2g(
    int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  arfcn_2g_.Set(index, value);
  // @@protoc_insertion_point(field_set:magma.mconfig.EnodebD.arfcn_2g)
}
inline void EnodebD::_internal_add_arfcn_2g(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  arfcn_2g_.Add(value);
}
inline void EnodebD::add_arfcn_2g(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_arfcn_2g(value);
  // @@protoc_insertion_point(field_add:magma.mconfig.EnodebD.arfcn_2g)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<
    ::PROTOBUF_NAMESPACE_ID::int32>&
EnodebD::_internal_arfcn_2g() const {
  return arfcn_2g_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<
    ::PROTOBUF_NAMESPACE_ID::int32>&
EnodebD::arfcn_2g() const {
  // @@protoc_insertion_point(field_list:magma.mconfig.EnodebD.arfcn_2g)
  return _internal_arfcn_2g();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::PROTOBUF_NAMESPACE_ID::int32>*
EnodebD::_internal_mutable_arfcn_2g() {
  return &arfcn_2g_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::PROTOBUF_NAMESPACE_ID::int32>*
EnodebD::mutable_arfcn_2g() {
  // @@protoc_insertion_point(field_mutable_list:magma.mconfig.EnodebD.arfcn_2g)
  return _internal_mutable_arfcn_2g();
}

// .magma.mconfig.EnodebD.TDDConfig tdd_config = 12;
inline bool EnodebD::_internal_has_tdd_config() const {
  return this != internal_default_instance() && tdd_config_ != nullptr;
}
inline bool EnodebD::has_tdd_config() const {
  return _internal_has_tdd_config();
}
inline void EnodebD::clear_tdd_config() {
  if (GetArena() == nullptr && tdd_config_ != nullptr) {
    delete tdd_config_;
  }
  tdd_config_ = nullptr;
}
inline const ::magma::mconfig::EnodebD_TDDConfig&
EnodebD::_internal_tdd_config() const {
  const ::magma::mconfig::EnodebD_TDDConfig* p = tdd_config_;
  return p != nullptr ?
             *p :
             reinterpret_cast<const ::magma::mconfig::EnodebD_TDDConfig&>(
                 ::magma::mconfig::_EnodebD_TDDConfig_default_instance_);
}
inline const ::magma::mconfig::EnodebD_TDDConfig& EnodebD::tdd_config() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.EnodebD.tdd_config)
  return _internal_tdd_config();
}
inline void EnodebD::unsafe_arena_set_allocated_tdd_config(
    ::magma::mconfig::EnodebD_TDDConfig* tdd_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tdd_config_);
  }
  tdd_config_ = tdd_config;
  if (tdd_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:magma.mconfig.EnodebD.tdd_config)
}
inline ::magma::mconfig::EnodebD_TDDConfig* EnodebD::release_tdd_config() {
  ::magma::mconfig::EnodebD_TDDConfig* temp = tdd_config_;
  tdd_config_                               = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::magma::mconfig::EnodebD_TDDConfig*
EnodebD::unsafe_arena_release_tdd_config() {
  // @@protoc_insertion_point(field_release:magma.mconfig.EnodebD.tdd_config)

  ::magma::mconfig::EnodebD_TDDConfig* temp = tdd_config_;
  tdd_config_                               = nullptr;
  return temp;
}
inline ::magma::mconfig::EnodebD_TDDConfig*
EnodebD::_internal_mutable_tdd_config() {
  if (tdd_config_ == nullptr) {
    auto* p =
        CreateMaybeMessage<::magma::mconfig::EnodebD_TDDConfig>(GetArena());
    tdd_config_ = p;
  }
  return tdd_config_;
}
inline ::magma::mconfig::EnodebD_TDDConfig* EnodebD::mutable_tdd_config() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.EnodebD.tdd_config)
  return _internal_mutable_tdd_config();
}
inline void EnodebD::set_allocated_tdd_config(
    ::magma::mconfig::EnodebD_TDDConfig* tdd_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tdd_config_;
  }
  if (tdd_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tdd_config);
    if (message_arena != submessage_arena) {
      tdd_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tdd_config, submessage_arena);
    }

  } else {
  }
  tdd_config_ = tdd_config;
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.EnodebD.tdd_config)
}

// .magma.mconfig.EnodebD.FDDConfig fdd_config = 13;
inline bool EnodebD::_internal_has_fdd_config() const {
  return this != internal_default_instance() && fdd_config_ != nullptr;
}
inline bool EnodebD::has_fdd_config() const {
  return _internal_has_fdd_config();
}
inline void EnodebD::clear_fdd_config() {
  if (GetArena() == nullptr && fdd_config_ != nullptr) {
    delete fdd_config_;
  }
  fdd_config_ = nullptr;
}
inline const ::magma::mconfig::EnodebD_FDDConfig&
EnodebD::_internal_fdd_config() const {
  const ::magma::mconfig::EnodebD_FDDConfig* p = fdd_config_;
  return p != nullptr ?
             *p :
             reinterpret_cast<const ::magma::mconfig::EnodebD_FDDConfig&>(
                 ::magma::mconfig::_EnodebD_FDDConfig_default_instance_);
}
inline const ::magma::mconfig::EnodebD_FDDConfig& EnodebD::fdd_config() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.EnodebD.fdd_config)
  return _internal_fdd_config();
}
inline void EnodebD::unsafe_arena_set_allocated_fdd_config(
    ::magma::mconfig::EnodebD_FDDConfig* fdd_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fdd_config_);
  }
  fdd_config_ = fdd_config;
  if (fdd_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:magma.mconfig.EnodebD.fdd_config)
}
inline ::magma::mconfig::EnodebD_FDDConfig* EnodebD::release_fdd_config() {
  ::magma::mconfig::EnodebD_FDDConfig* temp = fdd_config_;
  fdd_config_                               = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::magma::mconfig::EnodebD_FDDConfig*
EnodebD::unsafe_arena_release_fdd_config() {
  // @@protoc_insertion_point(field_release:magma.mconfig.EnodebD.fdd_config)

  ::magma::mconfig::EnodebD_FDDConfig* temp = fdd_config_;
  fdd_config_                               = nullptr;
  return temp;
}
inline ::magma::mconfig::EnodebD_FDDConfig*
EnodebD::_internal_mutable_fdd_config() {
  if (fdd_config_ == nullptr) {
    auto* p =
        CreateMaybeMessage<::magma::mconfig::EnodebD_FDDConfig>(GetArena());
    fdd_config_ = p;
  }
  return fdd_config_;
}
inline ::magma::mconfig::EnodebD_FDDConfig* EnodebD::mutable_fdd_config() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.EnodebD.fdd_config)
  return _internal_mutable_fdd_config();
}
inline void EnodebD::set_allocated_fdd_config(
    ::magma::mconfig::EnodebD_FDDConfig* fdd_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fdd_config_;
  }
  if (fdd_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fdd_config);
    if (message_arena != submessage_arena) {
      fdd_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fdd_config, submessage_arena);
    }

  } else {
  }
  fdd_config_ = fdd_config;
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.EnodebD.fdd_config)
}

// map<string, .magma.mconfig.EnodebD.EnodebConfig> enb_configs_by_serial = 14;
inline int EnodebD::_internal_enb_configs_by_serial_size() const {
  return enb_configs_by_serial_.size();
}
inline int EnodebD::enb_configs_by_serial_size() const {
  return _internal_enb_configs_by_serial_size();
}
inline void EnodebD::clear_enb_configs_by_serial() {
  enb_configs_by_serial_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map<
    std::string, ::magma::mconfig::EnodebD_EnodebConfig>&
EnodebD::_internal_enb_configs_by_serial() const {
  return enb_configs_by_serial_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map<
    std::string, ::magma::mconfig::EnodebD_EnodebConfig>&
EnodebD::enb_configs_by_serial() const {
  // @@protoc_insertion_point(field_map:magma.mconfig.EnodebD.enb_configs_by_serial)
  return _internal_enb_configs_by_serial();
}
inline ::PROTOBUF_NAMESPACE_ID::Map<
    std::string, ::magma::mconfig::EnodebD_EnodebConfig>*
EnodebD::_internal_mutable_enb_configs_by_serial() {
  return enb_configs_by_serial_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map<
    std::string, ::magma::mconfig::EnodebD_EnodebConfig>*
EnodebD::mutable_enb_configs_by_serial() {
  // @@protoc_insertion_point(field_mutable_map:magma.mconfig.EnodebD.enb_configs_by_serial)
  return _internal_mutable_enb_configs_by_serial();
}

// -------------------------------------------------------------------

// PipelineD_AllowedGrePeer

// string ip = 1;
inline void PipelineD_AllowedGrePeer::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& PipelineD_AllowedGrePeer::ip() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.PipelineD.AllowedGrePeer.ip)
  return _internal_ip();
}
inline void PipelineD_AllowedGrePeer::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.PipelineD.AllowedGrePeer.ip)
}
inline std::string* PipelineD_AllowedGrePeer::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.PipelineD.AllowedGrePeer.ip)
  return _internal_mutable_ip();
}
inline const std::string& PipelineD_AllowedGrePeer::_internal_ip() const {
  return ip_.Get();
}
inline void PipelineD_AllowedGrePeer::_internal_set_ip(
    const std::string& value) {
  ip_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void PipelineD_AllowedGrePeer::set_ip(std::string&& value) {
  ip_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.PipelineD.AllowedGrePeer.ip)
}
inline void PipelineD_AllowedGrePeer::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  ip_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.PipelineD.AllowedGrePeer.ip)
}
inline void PipelineD_AllowedGrePeer::set_ip(const char* value, size_t size) {
  ip_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.PipelineD.AllowedGrePeer.ip)
}
inline std::string* PipelineD_AllowedGrePeer::_internal_mutable_ip() {
  return ip_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* PipelineD_AllowedGrePeer::release_ip() {
  // @@protoc_insertion_point(field_release:magma.mconfig.PipelineD.AllowedGrePeer.ip)
  return ip_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PipelineD_AllowedGrePeer::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
  } else {
  }
  ip_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.PipelineD.AllowedGrePeer.ip)
}

// uint32 key = 2;
inline void PipelineD_AllowedGrePeer::clear_key() {
  key_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PipelineD_AllowedGrePeer::_internal_key()
    const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PipelineD_AllowedGrePeer::key() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.PipelineD.AllowedGrePeer.key)
  return _internal_key();
}
inline void PipelineD_AllowedGrePeer::_internal_set_key(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  key_ = value;
}
inline void PipelineD_AllowedGrePeer::set_key(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.PipelineD.AllowedGrePeer.key)
}

// -------------------------------------------------------------------

// PipelineD_IPDRExportDst

// string ip = 1;
inline void PipelineD_IPDRExportDst::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& PipelineD_IPDRExportDst::ip() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.PipelineD.IPDRExportDst.ip)
  return _internal_ip();
}
inline void PipelineD_IPDRExportDst::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.PipelineD.IPDRExportDst.ip)
}
inline std::string* PipelineD_IPDRExportDst::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.PipelineD.IPDRExportDst.ip)
  return _internal_mutable_ip();
}
inline const std::string& PipelineD_IPDRExportDst::_internal_ip() const {
  return ip_.Get();
}
inline void PipelineD_IPDRExportDst::_internal_set_ip(
    const std::string& value) {
  ip_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void PipelineD_IPDRExportDst::set_ip(std::string&& value) {
  ip_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.PipelineD.IPDRExportDst.ip)
}
inline void PipelineD_IPDRExportDst::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  ip_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.PipelineD.IPDRExportDst.ip)
}
inline void PipelineD_IPDRExportDst::set_ip(const char* value, size_t size) {
  ip_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.PipelineD.IPDRExportDst.ip)
}
inline std::string* PipelineD_IPDRExportDst::_internal_mutable_ip() {
  return ip_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* PipelineD_IPDRExportDst::release_ip() {
  // @@protoc_insertion_point(field_release:magma.mconfig.PipelineD.IPDRExportDst.ip)
  return ip_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PipelineD_IPDRExportDst::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
  } else {
  }
  ip_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.PipelineD.IPDRExportDst.ip)
}

// uint32 port = 2;
inline void PipelineD_IPDRExportDst::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PipelineD_IPDRExportDst::_internal_port()
    const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PipelineD_IPDRExportDst::port() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.PipelineD.IPDRExportDst.port)
  return _internal_port();
}
inline void PipelineD_IPDRExportDst::_internal_set_port(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  port_ = value;
}
inline void PipelineD_IPDRExportDst::set_port(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.PipelineD.IPDRExportDst.port)
}

// -------------------------------------------------------------------

// PipelineD_LiUes

// repeated string imsis = 1;
inline int PipelineD_LiUes::_internal_imsis_size() const {
  return imsis_.size();
}
inline int PipelineD_LiUes::imsis_size() const {
  return _internal_imsis_size();
}
inline void PipelineD_LiUes::clear_imsis() {
  imsis_.Clear();
}
inline std::string* PipelineD_LiUes::add_imsis() {
  // @@protoc_insertion_point(field_add_mutable:magma.mconfig.PipelineD.LiUes.imsis)
  return _internal_add_imsis();
}
inline const std::string& PipelineD_LiUes::_internal_imsis(int index) const {
  return imsis_.Get(index);
}
inline const std::string& PipelineD_LiUes::imsis(int index) const {
  // @@protoc_insertion_point(field_get:magma.mconfig.PipelineD.LiUes.imsis)
  return _internal_imsis(index);
}
inline std::string* PipelineD_LiUes::mutable_imsis(int index) {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.PipelineD.LiUes.imsis)
  return imsis_.Mutable(index);
}
inline void PipelineD_LiUes::set_imsis(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:magma.mconfig.PipelineD.LiUes.imsis)
  imsis_.Mutable(index)->assign(value);
}
inline void PipelineD_LiUes::set_imsis(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:magma.mconfig.PipelineD.LiUes.imsis)
  imsis_.Mutable(index)->assign(std::move(value));
}
inline void PipelineD_LiUes::set_imsis(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  imsis_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:magma.mconfig.PipelineD.LiUes.imsis)
}
inline void PipelineD_LiUes::set_imsis(
    int index, const char* value, size_t size) {
  imsis_.Mutable(index)->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.PipelineD.LiUes.imsis)
}
inline std::string* PipelineD_LiUes::_internal_add_imsis() {
  return imsis_.Add();
}
inline void PipelineD_LiUes::add_imsis(const std::string& value) {
  imsis_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:magma.mconfig.PipelineD.LiUes.imsis)
}
inline void PipelineD_LiUes::add_imsis(std::string&& value) {
  imsis_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:magma.mconfig.PipelineD.LiUes.imsis)
}
inline void PipelineD_LiUes::add_imsis(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  imsis_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:magma.mconfig.PipelineD.LiUes.imsis)
}
inline void PipelineD_LiUes::add_imsis(const char* value, size_t size) {
  imsis_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:magma.mconfig.PipelineD.LiUes.imsis)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PipelineD_LiUes::imsis() const {
  // @@protoc_insertion_point(field_list:magma.mconfig.PipelineD.LiUes.imsis)
  return imsis_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PipelineD_LiUes::mutable_imsis() {
  // @@protoc_insertion_point(field_mutable_list:magma.mconfig.PipelineD.LiUes.imsis)
  return &imsis_;
}

// repeated string msisdns = 2;
inline int PipelineD_LiUes::_internal_msisdns_size() const {
  return msisdns_.size();
}
inline int PipelineD_LiUes::msisdns_size() const {
  return _internal_msisdns_size();
}
inline void PipelineD_LiUes::clear_msisdns() {
  msisdns_.Clear();
}
inline std::string* PipelineD_LiUes::add_msisdns() {
  // @@protoc_insertion_point(field_add_mutable:magma.mconfig.PipelineD.LiUes.msisdns)
  return _internal_add_msisdns();
}
inline const std::string& PipelineD_LiUes::_internal_msisdns(int index) const {
  return msisdns_.Get(index);
}
inline const std::string& PipelineD_LiUes::msisdns(int index) const {
  // @@protoc_insertion_point(field_get:magma.mconfig.PipelineD.LiUes.msisdns)
  return _internal_msisdns(index);
}
inline std::string* PipelineD_LiUes::mutable_msisdns(int index) {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.PipelineD.LiUes.msisdns)
  return msisdns_.Mutable(index);
}
inline void PipelineD_LiUes::set_msisdns(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:magma.mconfig.PipelineD.LiUes.msisdns)
  msisdns_.Mutable(index)->assign(value);
}
inline void PipelineD_LiUes::set_msisdns(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:magma.mconfig.PipelineD.LiUes.msisdns)
  msisdns_.Mutable(index)->assign(std::move(value));
}
inline void PipelineD_LiUes::set_msisdns(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  msisdns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:magma.mconfig.PipelineD.LiUes.msisdns)
}
inline void PipelineD_LiUes::set_msisdns(
    int index, const char* value, size_t size) {
  msisdns_.Mutable(index)->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.PipelineD.LiUes.msisdns)
}
inline std::string* PipelineD_LiUes::_internal_add_msisdns() {
  return msisdns_.Add();
}
inline void PipelineD_LiUes::add_msisdns(const std::string& value) {
  msisdns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:magma.mconfig.PipelineD.LiUes.msisdns)
}
inline void PipelineD_LiUes::add_msisdns(std::string&& value) {
  msisdns_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:magma.mconfig.PipelineD.LiUes.msisdns)
}
inline void PipelineD_LiUes::add_msisdns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  msisdns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:magma.mconfig.PipelineD.LiUes.msisdns)
}
inline void PipelineD_LiUes::add_msisdns(const char* value, size_t size) {
  msisdns_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:magma.mconfig.PipelineD.LiUes.msisdns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PipelineD_LiUes::msisdns() const {
  // @@protoc_insertion_point(field_list:magma.mconfig.PipelineD.LiUes.msisdns)
  return msisdns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PipelineD_LiUes::mutable_msisdns() {
  // @@protoc_insertion_point(field_mutable_list:magma.mconfig.PipelineD.LiUes.msisdns)
  return &msisdns_;
}

// repeated string macs = 3;
inline int PipelineD_LiUes::_internal_macs_size() const {
  return macs_.size();
}
inline int PipelineD_LiUes::macs_size() const {
  return _internal_macs_size();
}
inline void PipelineD_LiUes::clear_macs() {
  macs_.Clear();
}
inline std::string* PipelineD_LiUes::add_macs() {
  // @@protoc_insertion_point(field_add_mutable:magma.mconfig.PipelineD.LiUes.macs)
  return _internal_add_macs();
}
inline const std::string& PipelineD_LiUes::_internal_macs(int index) const {
  return macs_.Get(index);
}
inline const std::string& PipelineD_LiUes::macs(int index) const {
  // @@protoc_insertion_point(field_get:magma.mconfig.PipelineD.LiUes.macs)
  return _internal_macs(index);
}
inline std::string* PipelineD_LiUes::mutable_macs(int index) {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.PipelineD.LiUes.macs)
  return macs_.Mutable(index);
}
inline void PipelineD_LiUes::set_macs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:magma.mconfig.PipelineD.LiUes.macs)
  macs_.Mutable(index)->assign(value);
}
inline void PipelineD_LiUes::set_macs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:magma.mconfig.PipelineD.LiUes.macs)
  macs_.Mutable(index)->assign(std::move(value));
}
inline void PipelineD_LiUes::set_macs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  macs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:magma.mconfig.PipelineD.LiUes.macs)
}
inline void PipelineD_LiUes::set_macs(
    int index, const char* value, size_t size) {
  macs_.Mutable(index)->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.PipelineD.LiUes.macs)
}
inline std::string* PipelineD_LiUes::_internal_add_macs() {
  return macs_.Add();
}
inline void PipelineD_LiUes::add_macs(const std::string& value) {
  macs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:magma.mconfig.PipelineD.LiUes.macs)
}
inline void PipelineD_LiUes::add_macs(std::string&& value) {
  macs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:magma.mconfig.PipelineD.LiUes.macs)
}
inline void PipelineD_LiUes::add_macs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  macs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:magma.mconfig.PipelineD.LiUes.macs)
}
inline void PipelineD_LiUes::add_macs(const char* value, size_t size) {
  macs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:magma.mconfig.PipelineD.LiUes.macs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PipelineD_LiUes::macs() const {
  // @@protoc_insertion_point(field_list:magma.mconfig.PipelineD.LiUes.macs)
  return macs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PipelineD_LiUes::mutable_macs() {
  // @@protoc_insertion_point(field_mutable_list:magma.mconfig.PipelineD.LiUes.macs)
  return &macs_;
}

// repeated string ips = 4;
inline int PipelineD_LiUes::_internal_ips_size() const {
  return ips_.size();
}
inline int PipelineD_LiUes::ips_size() const {
  return _internal_ips_size();
}
inline void PipelineD_LiUes::clear_ips() {
  ips_.Clear();
}
inline std::string* PipelineD_LiUes::add_ips() {
  // @@protoc_insertion_point(field_add_mutable:magma.mconfig.PipelineD.LiUes.ips)
  return _internal_add_ips();
}
inline const std::string& PipelineD_LiUes::_internal_ips(int index) const {
  return ips_.Get(index);
}
inline const std::string& PipelineD_LiUes::ips(int index) const {
  // @@protoc_insertion_point(field_get:magma.mconfig.PipelineD.LiUes.ips)
  return _internal_ips(index);
}
inline std::string* PipelineD_LiUes::mutable_ips(int index) {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.PipelineD.LiUes.ips)
  return ips_.Mutable(index);
}
inline void PipelineD_LiUes::set_ips(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:magma.mconfig.PipelineD.LiUes.ips)
  ips_.Mutable(index)->assign(value);
}
inline void PipelineD_LiUes::set_ips(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:magma.mconfig.PipelineD.LiUes.ips)
  ips_.Mutable(index)->assign(std::move(value));
}
inline void PipelineD_LiUes::set_ips(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:magma.mconfig.PipelineD.LiUes.ips)
}
inline void PipelineD_LiUes::set_ips(
    int index, const char* value, size_t size) {
  ips_.Mutable(index)->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.PipelineD.LiUes.ips)
}
inline std::string* PipelineD_LiUes::_internal_add_ips() {
  return ips_.Add();
}
inline void PipelineD_LiUes::add_ips(const std::string& value) {
  ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:magma.mconfig.PipelineD.LiUes.ips)
}
inline void PipelineD_LiUes::add_ips(std::string&& value) {
  ips_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:magma.mconfig.PipelineD.LiUes.ips)
}
inline void PipelineD_LiUes::add_ips(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:magma.mconfig.PipelineD.LiUes.ips)
}
inline void PipelineD_LiUes::add_ips(const char* value, size_t size) {
  ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:magma.mconfig.PipelineD.LiUes.ips)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PipelineD_LiUes::ips() const {
  // @@protoc_insertion_point(field_list:magma.mconfig.PipelineD.LiUes.ips)
  return ips_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PipelineD_LiUes::mutable_ips() {
  // @@protoc_insertion_point(field_mutable_list:magma.mconfig.PipelineD.LiUes.ips)
  return &ips_;
}

// repeated string imeis = 5;
inline int PipelineD_LiUes::_internal_imeis_size() const {
  return imeis_.size();
}
inline int PipelineD_LiUes::imeis_size() const {
  return _internal_imeis_size();
}
inline void PipelineD_LiUes::clear_imeis() {
  imeis_.Clear();
}
inline std::string* PipelineD_LiUes::add_imeis() {
  // @@protoc_insertion_point(field_add_mutable:magma.mconfig.PipelineD.LiUes.imeis)
  return _internal_add_imeis();
}
inline const std::string& PipelineD_LiUes::_internal_imeis(int index) const {
  return imeis_.Get(index);
}
inline const std::string& PipelineD_LiUes::imeis(int index) const {
  // @@protoc_insertion_point(field_get:magma.mconfig.PipelineD.LiUes.imeis)
  return _internal_imeis(index);
}
inline std::string* PipelineD_LiUes::mutable_imeis(int index) {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.PipelineD.LiUes.imeis)
  return imeis_.Mutable(index);
}
inline void PipelineD_LiUes::set_imeis(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:magma.mconfig.PipelineD.LiUes.imeis)
  imeis_.Mutable(index)->assign(value);
}
inline void PipelineD_LiUes::set_imeis(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:magma.mconfig.PipelineD.LiUes.imeis)
  imeis_.Mutable(index)->assign(std::move(value));
}
inline void PipelineD_LiUes::set_imeis(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  imeis_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:magma.mconfig.PipelineD.LiUes.imeis)
}
inline void PipelineD_LiUes::set_imeis(
    int index, const char* value, size_t size) {
  imeis_.Mutable(index)->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.PipelineD.LiUes.imeis)
}
inline std::string* PipelineD_LiUes::_internal_add_imeis() {
  return imeis_.Add();
}
inline void PipelineD_LiUes::add_imeis(const std::string& value) {
  imeis_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:magma.mconfig.PipelineD.LiUes.imeis)
}
inline void PipelineD_LiUes::add_imeis(std::string&& value) {
  imeis_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:magma.mconfig.PipelineD.LiUes.imeis)
}
inline void PipelineD_LiUes::add_imeis(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  imeis_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:magma.mconfig.PipelineD.LiUes.imeis)
}
inline void PipelineD_LiUes::add_imeis(const char* value, size_t size) {
  imeis_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:magma.mconfig.PipelineD.LiUes.imeis)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PipelineD_LiUes::imeis() const {
  // @@protoc_insertion_point(field_list:magma.mconfig.PipelineD.LiUes.imeis)
  return imeis_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PipelineD_LiUes::mutable_imeis() {
  // @@protoc_insertion_point(field_mutable_list:magma.mconfig.PipelineD.LiUes.imeis)
  return &imeis_;
}

// -------------------------------------------------------------------

// PipelineD_HEConfig

// bool enable_header_enrichment = 1;
inline void PipelineD_HEConfig::clear_enable_header_enrichment() {
  enable_header_enrichment_ = false;
}
inline bool PipelineD_HEConfig::_internal_enable_header_enrichment() const {
  return enable_header_enrichment_;
}
inline bool PipelineD_HEConfig::enable_header_enrichment() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.PipelineD.HEConfig.enable_header_enrichment)
  return _internal_enable_header_enrichment();
}
inline void PipelineD_HEConfig::_internal_set_enable_header_enrichment(
    bool value) {
  enable_header_enrichment_ = value;
}
inline void PipelineD_HEConfig::set_enable_header_enrichment(bool value) {
  _internal_set_enable_header_enrichment(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.PipelineD.HEConfig.enable_header_enrichment)
}

// bool enable_encryption = 2;
inline void PipelineD_HEConfig::clear_enable_encryption() {
  enable_encryption_ = false;
}
inline bool PipelineD_HEConfig::_internal_enable_encryption() const {
  return enable_encryption_;
}
inline bool PipelineD_HEConfig::enable_encryption() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.PipelineD.HEConfig.enable_encryption)
  return _internal_enable_encryption();
}
inline void PipelineD_HEConfig::_internal_set_enable_encryption(bool value) {
  enable_encryption_ = value;
}
inline void PipelineD_HEConfig::set_enable_encryption(bool value) {
  _internal_set_enable_encryption(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.PipelineD.HEConfig.enable_encryption)
}

// .magma.mconfig.PipelineD.HEConfig.EncryptionAlgorithm encryptionAlgorithm =
// 3;
inline void PipelineD_HEConfig::clear_encryptionalgorithm() {
  encryptionalgorithm_ = 0;
}
inline ::magma::mconfig::PipelineD_HEConfig_EncryptionAlgorithm
PipelineD_HEConfig::_internal_encryptionalgorithm() const {
  return static_cast<::magma::mconfig::PipelineD_HEConfig_EncryptionAlgorithm>(
      encryptionalgorithm_);
}
inline ::magma::mconfig::PipelineD_HEConfig_EncryptionAlgorithm
PipelineD_HEConfig::encryptionalgorithm() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.PipelineD.HEConfig.encryptionAlgorithm)
  return _internal_encryptionalgorithm();
}
inline void PipelineD_HEConfig::_internal_set_encryptionalgorithm(
    ::magma::mconfig::PipelineD_HEConfig_EncryptionAlgorithm value) {
  encryptionalgorithm_ = value;
}
inline void PipelineD_HEConfig::set_encryptionalgorithm(
    ::magma::mconfig::PipelineD_HEConfig_EncryptionAlgorithm value) {
  _internal_set_encryptionalgorithm(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.PipelineD.HEConfig.encryptionAlgorithm)
}

// .magma.mconfig.PipelineD.HEConfig.HashFunction hashFunction = 4;
inline void PipelineD_HEConfig::clear_hashfunction() {
  hashfunction_ = 0;
}
inline ::magma::mconfig::PipelineD_HEConfig_HashFunction
PipelineD_HEConfig::_internal_hashfunction() const {
  return static_cast<::magma::mconfig::PipelineD_HEConfig_HashFunction>(
      hashfunction_);
}
inline ::magma::mconfig::PipelineD_HEConfig_HashFunction
PipelineD_HEConfig::hashfunction() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.PipelineD.HEConfig.hashFunction)
  return _internal_hashfunction();
}
inline void PipelineD_HEConfig::_internal_set_hashfunction(
    ::magma::mconfig::PipelineD_HEConfig_HashFunction value) {
  hashfunction_ = value;
}
inline void PipelineD_HEConfig::set_hashfunction(
    ::magma::mconfig::PipelineD_HEConfig_HashFunction value) {
  _internal_set_hashfunction(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.PipelineD.HEConfig.hashFunction)
}

// .magma.mconfig.PipelineD.HEConfig.EncodingType encodingType = 5;
inline void PipelineD_HEConfig::clear_encodingtype() {
  encodingtype_ = 0;
}
inline ::magma::mconfig::PipelineD_HEConfig_EncodingType
PipelineD_HEConfig::_internal_encodingtype() const {
  return static_cast<::magma::mconfig::PipelineD_HEConfig_EncodingType>(
      encodingtype_);
}
inline ::magma::mconfig::PipelineD_HEConfig_EncodingType
PipelineD_HEConfig::encodingtype() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.PipelineD.HEConfig.encodingType)
  return _internal_encodingtype();
}
inline void PipelineD_HEConfig::_internal_set_encodingtype(
    ::magma::mconfig::PipelineD_HEConfig_EncodingType value) {
  encodingtype_ = value;
}
inline void PipelineD_HEConfig::set_encodingtype(
    ::magma::mconfig::PipelineD_HEConfig_EncodingType value) {
  _internal_set_encodingtype(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.PipelineD.HEConfig.encodingType)
}

// string encryption_key = 6;
inline void PipelineD_HEConfig::clear_encryption_key() {
  encryption_key_.ClearToEmpty();
}
inline const std::string& PipelineD_HEConfig::encryption_key() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.PipelineD.HEConfig.encryption_key)
  return _internal_encryption_key();
}
inline void PipelineD_HEConfig::set_encryption_key(const std::string& value) {
  _internal_set_encryption_key(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.PipelineD.HEConfig.encryption_key)
}
inline std::string* PipelineD_HEConfig::mutable_encryption_key() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.PipelineD.HEConfig.encryption_key)
  return _internal_mutable_encryption_key();
}
inline const std::string& PipelineD_HEConfig::_internal_encryption_key() const {
  return encryption_key_.Get();
}
inline void PipelineD_HEConfig::_internal_set_encryption_key(
    const std::string& value) {
  encryption_key_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void PipelineD_HEConfig::set_encryption_key(std::string&& value) {
  encryption_key_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.PipelineD.HEConfig.encryption_key)
}
inline void PipelineD_HEConfig::set_encryption_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  encryption_key_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.PipelineD.HEConfig.encryption_key)
}
inline void PipelineD_HEConfig::set_encryption_key(
    const char* value, size_t size) {
  encryption_key_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.PipelineD.HEConfig.encryption_key)
}
inline std::string* PipelineD_HEConfig::_internal_mutable_encryption_key() {
  return encryption_key_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* PipelineD_HEConfig::release_encryption_key() {
  // @@protoc_insertion_point(field_release:magma.mconfig.PipelineD.HEConfig.encryption_key)
  return encryption_key_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PipelineD_HEConfig::set_allocated_encryption_key(
    std::string* encryption_key) {
  if (encryption_key != nullptr) {
  } else {
  }
  encryption_key_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      encryption_key, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.PipelineD.HEConfig.encryption_key)
}

// string hmac_key = 7;
inline void PipelineD_HEConfig::clear_hmac_key() {
  hmac_key_.ClearToEmpty();
}
inline const std::string& PipelineD_HEConfig::hmac_key() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.PipelineD.HEConfig.hmac_key)
  return _internal_hmac_key();
}
inline void PipelineD_HEConfig::set_hmac_key(const std::string& value) {
  _internal_set_hmac_key(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.PipelineD.HEConfig.hmac_key)
}
inline std::string* PipelineD_HEConfig::mutable_hmac_key() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.PipelineD.HEConfig.hmac_key)
  return _internal_mutable_hmac_key();
}
inline const std::string& PipelineD_HEConfig::_internal_hmac_key() const {
  return hmac_key_.Get();
}
inline void PipelineD_HEConfig::_internal_set_hmac_key(
    const std::string& value) {
  hmac_key_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void PipelineD_HEConfig::set_hmac_key(std::string&& value) {
  hmac_key_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.PipelineD.HEConfig.hmac_key)
}
inline void PipelineD_HEConfig::set_hmac_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  hmac_key_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.PipelineD.HEConfig.hmac_key)
}
inline void PipelineD_HEConfig::set_hmac_key(const char* value, size_t size) {
  hmac_key_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.PipelineD.HEConfig.hmac_key)
}
inline std::string* PipelineD_HEConfig::_internal_mutable_hmac_key() {
  return hmac_key_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* PipelineD_HEConfig::release_hmac_key() {
  // @@protoc_insertion_point(field_release:magma.mconfig.PipelineD.HEConfig.hmac_key)
  return hmac_key_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PipelineD_HEConfig::set_allocated_hmac_key(std::string* hmac_key) {
  if (hmac_key != nullptr) {
  } else {
  }
  hmac_key_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hmac_key, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.PipelineD.HEConfig.hmac_key)
}

// -------------------------------------------------------------------

// PipelineD

// .magma.orc8r.LogLevel log_level = 1;
inline void PipelineD::clear_log_level() {
  log_level_ = 0;
}
inline ::magma::orc8r::LogLevel PipelineD::_internal_log_level() const {
  return static_cast<::magma::orc8r::LogLevel>(log_level_);
}
inline ::magma::orc8r::LogLevel PipelineD::log_level() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.PipelineD.log_level)
  return _internal_log_level();
}
inline void PipelineD::_internal_set_log_level(::magma::orc8r::LogLevel value) {
  log_level_ = value;
}
inline void PipelineD::set_log_level(::magma::orc8r::LogLevel value) {
  _internal_set_log_level(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.PipelineD.log_level)
}

// string ue_ip_block = 2;
inline void PipelineD::clear_ue_ip_block() {
  ue_ip_block_.ClearToEmpty();
}
inline const std::string& PipelineD::ue_ip_block() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.PipelineD.ue_ip_block)
  return _internal_ue_ip_block();
}
inline void PipelineD::set_ue_ip_block(const std::string& value) {
  _internal_set_ue_ip_block(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.PipelineD.ue_ip_block)
}
inline std::string* PipelineD::mutable_ue_ip_block() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.PipelineD.ue_ip_block)
  return _internal_mutable_ue_ip_block();
}
inline const std::string& PipelineD::_internal_ue_ip_block() const {
  return ue_ip_block_.Get();
}
inline void PipelineD::_internal_set_ue_ip_block(const std::string& value) {
  ue_ip_block_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void PipelineD::set_ue_ip_block(std::string&& value) {
  ue_ip_block_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.PipelineD.ue_ip_block)
}
inline void PipelineD::set_ue_ip_block(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  ue_ip_block_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.PipelineD.ue_ip_block)
}
inline void PipelineD::set_ue_ip_block(const char* value, size_t size) {
  ue_ip_block_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.PipelineD.ue_ip_block)
}
inline std::string* PipelineD::_internal_mutable_ue_ip_block() {
  return ue_ip_block_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* PipelineD::release_ue_ip_block() {
  // @@protoc_insertion_point(field_release:magma.mconfig.PipelineD.ue_ip_block)
  return ue_ip_block_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PipelineD::set_allocated_ue_ip_block(std::string* ue_ip_block) {
  if (ue_ip_block != nullptr) {
  } else {
  }
  ue_ip_block_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ue_ip_block, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.PipelineD.ue_ip_block)
}

// bool nat_enabled = 3;
inline void PipelineD::clear_nat_enabled() {
  nat_enabled_ = false;
}
inline bool PipelineD::_internal_nat_enabled() const {
  return nat_enabled_;
}
inline bool PipelineD::nat_enabled() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.PipelineD.nat_enabled)
  return _internal_nat_enabled();
}
inline void PipelineD::_internal_set_nat_enabled(bool value) {
  nat_enabled_ = value;
}
inline void PipelineD::set_nat_enabled(bool value) {
  _internal_set_nat_enabled(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.PipelineD.nat_enabled)
}

// string default_rule_id = 6;
inline void PipelineD::clear_default_rule_id() {
  default_rule_id_.ClearToEmpty();
}
inline const std::string& PipelineD::default_rule_id() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.PipelineD.default_rule_id)
  return _internal_default_rule_id();
}
inline void PipelineD::set_default_rule_id(const std::string& value) {
  _internal_set_default_rule_id(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.PipelineD.default_rule_id)
}
inline std::string* PipelineD::mutable_default_rule_id() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.PipelineD.default_rule_id)
  return _internal_mutable_default_rule_id();
}
inline const std::string& PipelineD::_internal_default_rule_id() const {
  return default_rule_id_.Get();
}
inline void PipelineD::_internal_set_default_rule_id(const std::string& value) {
  default_rule_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void PipelineD::set_default_rule_id(std::string&& value) {
  default_rule_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.PipelineD.default_rule_id)
}
inline void PipelineD::set_default_rule_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  default_rule_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.PipelineD.default_rule_id)
}
inline void PipelineD::set_default_rule_id(const char* value, size_t size) {
  default_rule_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.PipelineD.default_rule_id)
}
inline std::string* PipelineD::_internal_mutable_default_rule_id() {
  return default_rule_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* PipelineD::release_default_rule_id() {
  // @@protoc_insertion_point(field_release:magma.mconfig.PipelineD.default_rule_id)
  return default_rule_id_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PipelineD::set_allocated_default_rule_id(
    std::string* default_rule_id) {
  if (default_rule_id != nullptr) {
  } else {
  }
  default_rule_id_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      default_rule_id, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.PipelineD.default_rule_id)
}

// repeated .magma.mconfig.PipelineD.NetworkServices services = 8;
inline int PipelineD::_internal_services_size() const {
  return services_.size();
}
inline int PipelineD::services_size() const {
  return _internal_services_size();
}
inline void PipelineD::clear_services() {
  services_.Clear();
}
inline ::magma::mconfig::PipelineD_NetworkServices
PipelineD::_internal_services(int index) const {
  return static_cast<::magma::mconfig::PipelineD_NetworkServices>(
      services_.Get(index));
}
inline ::magma::mconfig::PipelineD_NetworkServices PipelineD::services(
    int index) const {
  // @@protoc_insertion_point(field_get:magma.mconfig.PipelineD.services)
  return _internal_services(index);
}
inline void PipelineD::set_services(
    int index, ::magma::mconfig::PipelineD_NetworkServices value) {
  services_.Set(index, value);
  // @@protoc_insertion_point(field_set:magma.mconfig.PipelineD.services)
}
inline void PipelineD::_internal_add_services(
    ::magma::mconfig::PipelineD_NetworkServices value) {
  services_.Add(value);
}
inline void PipelineD::add_services(
    ::magma::mconfig::PipelineD_NetworkServices value) {
  // @@protoc_insertion_point(field_add:magma.mconfig.PipelineD.services)
  _internal_add_services(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& PipelineD::services()
    const {
  // @@protoc_insertion_point(field_list:magma.mconfig.PipelineD.services)
  return services_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
PipelineD::_internal_mutable_services() {
  return &services_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
PipelineD::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:magma.mconfig.PipelineD.services)
  return _internal_mutable_services();
}

// repeated .magma.mconfig.PipelineD.AllowedGrePeer allowed_gre_peers = 9;
inline int PipelineD::_internal_allowed_gre_peers_size() const {
  return allowed_gre_peers_.size();
}
inline int PipelineD::allowed_gre_peers_size() const {
  return _internal_allowed_gre_peers_size();
}
inline void PipelineD::clear_allowed_gre_peers() {
  allowed_gre_peers_.Clear();
}
inline ::magma::mconfig::PipelineD_AllowedGrePeer*
PipelineD::mutable_allowed_gre_peers(int index) {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.PipelineD.allowed_gre_peers)
  return allowed_gre_peers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::magma::mconfig::PipelineD_AllowedGrePeer>*
PipelineD::mutable_allowed_gre_peers() {
  // @@protoc_insertion_point(field_mutable_list:magma.mconfig.PipelineD.allowed_gre_peers)
  return &allowed_gre_peers_;
}
inline const ::magma::mconfig::PipelineD_AllowedGrePeer&
PipelineD::_internal_allowed_gre_peers(int index) const {
  return allowed_gre_peers_.Get(index);
}
inline const ::magma::mconfig::PipelineD_AllowedGrePeer&
PipelineD::allowed_gre_peers(int index) const {
  // @@protoc_insertion_point(field_get:magma.mconfig.PipelineD.allowed_gre_peers)
  return _internal_allowed_gre_peers(index);
}
inline ::magma::mconfig::PipelineD_AllowedGrePeer*
PipelineD::_internal_add_allowed_gre_peers() {
  return allowed_gre_peers_.Add();
}
inline ::magma::mconfig::PipelineD_AllowedGrePeer*
PipelineD::add_allowed_gre_peers() {
  // @@protoc_insertion_point(field_add:magma.mconfig.PipelineD.allowed_gre_peers)
  return _internal_add_allowed_gre_peers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::magma::mconfig::PipelineD_AllowedGrePeer>&
PipelineD::allowed_gre_peers() const {
  // @@protoc_insertion_point(field_list:magma.mconfig.PipelineD.allowed_gre_peers)
  return allowed_gre_peers_;
}

// .magma.mconfig.PipelineD.IPDRExportDst ipdr_export_dst = 10;
inline bool PipelineD::_internal_has_ipdr_export_dst() const {
  return this != internal_default_instance() && ipdr_export_dst_ != nullptr;
}
inline bool PipelineD::has_ipdr_export_dst() const {
  return _internal_has_ipdr_export_dst();
}
inline void PipelineD::clear_ipdr_export_dst() {
  if (GetArena() == nullptr && ipdr_export_dst_ != nullptr) {
    delete ipdr_export_dst_;
  }
  ipdr_export_dst_ = nullptr;
}
inline const ::magma::mconfig::PipelineD_IPDRExportDst&
PipelineD::_internal_ipdr_export_dst() const {
  const ::magma::mconfig::PipelineD_IPDRExportDst* p = ipdr_export_dst_;
  return p != nullptr ?
             *p :
             reinterpret_cast<const ::magma::mconfig::PipelineD_IPDRExportDst&>(
                 ::magma::mconfig::_PipelineD_IPDRExportDst_default_instance_);
}
inline const ::magma::mconfig::PipelineD_IPDRExportDst&
PipelineD::ipdr_export_dst() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.PipelineD.ipdr_export_dst)
  return _internal_ipdr_export_dst();
}
inline void PipelineD::unsafe_arena_set_allocated_ipdr_export_dst(
    ::magma::mconfig::PipelineD_IPDRExportDst* ipdr_export_dst) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(
        ipdr_export_dst_);
  }
  ipdr_export_dst_ = ipdr_export_dst;
  if (ipdr_export_dst) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:magma.mconfig.PipelineD.ipdr_export_dst)
}
inline ::magma::mconfig::PipelineD_IPDRExportDst*
PipelineD::release_ipdr_export_dst() {
  ::magma::mconfig::PipelineD_IPDRExportDst* temp = ipdr_export_dst_;
  ipdr_export_dst_                                = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::magma::mconfig::PipelineD_IPDRExportDst*
PipelineD::unsafe_arena_release_ipdr_export_dst() {
  // @@protoc_insertion_point(field_release:magma.mconfig.PipelineD.ipdr_export_dst)

  ::magma::mconfig::PipelineD_IPDRExportDst* temp = ipdr_export_dst_;
  ipdr_export_dst_                                = nullptr;
  return temp;
}
inline ::magma::mconfig::PipelineD_IPDRExportDst*
PipelineD::_internal_mutable_ipdr_export_dst() {
  if (ipdr_export_dst_ == nullptr) {
    auto* p = CreateMaybeMessage<::magma::mconfig::PipelineD_IPDRExportDst>(
        GetArena());
    ipdr_export_dst_ = p;
  }
  return ipdr_export_dst_;
}
inline ::magma::mconfig::PipelineD_IPDRExportDst*
PipelineD::mutable_ipdr_export_dst() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.PipelineD.ipdr_export_dst)
  return _internal_mutable_ipdr_export_dst();
}
inline void PipelineD::set_allocated_ipdr_export_dst(
    ::magma::mconfig::PipelineD_IPDRExportDst* ipdr_export_dst) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ipdr_export_dst_;
  }
  if (ipdr_export_dst) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ipdr_export_dst);
    if (message_arena != submessage_arena) {
      ipdr_export_dst = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ipdr_export_dst, submessage_arena);
    }

  } else {
  }
  ipdr_export_dst_ = ipdr_export_dst;
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.PipelineD.ipdr_export_dst)
}

// .magma.mconfig.PipelineD.LiUes li_ues = 12;
inline bool PipelineD::_internal_has_li_ues() const {
  return this != internal_default_instance() && li_ues_ != nullptr;
}
inline bool PipelineD::has_li_ues() const {
  return _internal_has_li_ues();
}
inline void PipelineD::clear_li_ues() {
  if (GetArena() == nullptr && li_ues_ != nullptr) {
    delete li_ues_;
  }
  li_ues_ = nullptr;
}
inline const ::magma::mconfig::PipelineD_LiUes& PipelineD::_internal_li_ues()
    const {
  const ::magma::mconfig::PipelineD_LiUes* p = li_ues_;
  return p != nullptr ?
             *p :
             reinterpret_cast<const ::magma::mconfig::PipelineD_LiUes&>(
                 ::magma::mconfig::_PipelineD_LiUes_default_instance_);
}
inline const ::magma::mconfig::PipelineD_LiUes& PipelineD::li_ues() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.PipelineD.li_ues)
  return _internal_li_ues();
}
inline void PipelineD::unsafe_arena_set_allocated_li_ues(
    ::magma::mconfig::PipelineD_LiUes* li_ues) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(li_ues_);
  }
  li_ues_ = li_ues;
  if (li_ues) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:magma.mconfig.PipelineD.li_ues)
}
inline ::magma::mconfig::PipelineD_LiUes* PipelineD::release_li_ues() {
  ::magma::mconfig::PipelineD_LiUes* temp = li_ues_;
  li_ues_                                 = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::magma::mconfig::PipelineD_LiUes*
PipelineD::unsafe_arena_release_li_ues() {
  // @@protoc_insertion_point(field_release:magma.mconfig.PipelineD.li_ues)

  ::magma::mconfig::PipelineD_LiUes* temp = li_ues_;
  li_ues_                                 = nullptr;
  return temp;
}
inline ::magma::mconfig::PipelineD_LiUes*
PipelineD::_internal_mutable_li_ues() {
  if (li_ues_ == nullptr) {
    auto* p = CreateMaybeMessage<::magma::mconfig::PipelineD_LiUes>(GetArena());
    li_ues_ = p;
  }
  return li_ues_;
}
inline ::magma::mconfig::PipelineD_LiUes* PipelineD::mutable_li_ues() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.PipelineD.li_ues)
  return _internal_mutable_li_ues();
}
inline void PipelineD::set_allocated_li_ues(
    ::magma::mconfig::PipelineD_LiUes* li_ues) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete li_ues_;
  }
  if (li_ues) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(li_ues);
    if (message_arena != submessage_arena) {
      li_ues = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, li_ues, submessage_arena);
    }

  } else {
  }
  li_ues_ = li_ues;
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.PipelineD.li_ues)
}

// string sgi_management_iface_vlan = 13;
inline void PipelineD::clear_sgi_management_iface_vlan() {
  sgi_management_iface_vlan_.ClearToEmpty();
}
inline const std::string& PipelineD::sgi_management_iface_vlan() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.PipelineD.sgi_management_iface_vlan)
  return _internal_sgi_management_iface_vlan();
}
inline void PipelineD::set_sgi_management_iface_vlan(const std::string& value) {
  _internal_set_sgi_management_iface_vlan(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.PipelineD.sgi_management_iface_vlan)
}
inline std::string* PipelineD::mutable_sgi_management_iface_vlan() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.PipelineD.sgi_management_iface_vlan)
  return _internal_mutable_sgi_management_iface_vlan();
}
inline const std::string& PipelineD::_internal_sgi_management_iface_vlan()
    const {
  return sgi_management_iface_vlan_.Get();
}
inline void PipelineD::_internal_set_sgi_management_iface_vlan(
    const std::string& value) {
  sgi_management_iface_vlan_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void PipelineD::set_sgi_management_iface_vlan(std::string&& value) {
  sgi_management_iface_vlan_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.PipelineD.sgi_management_iface_vlan)
}
inline void PipelineD::set_sgi_management_iface_vlan(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  sgi_management_iface_vlan_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.PipelineD.sgi_management_iface_vlan)
}
inline void PipelineD::set_sgi_management_iface_vlan(
    const char* value, size_t size) {
  sgi_management_iface_vlan_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.PipelineD.sgi_management_iface_vlan)
}
inline std::string* PipelineD::_internal_mutable_sgi_management_iface_vlan() {
  return sgi_management_iface_vlan_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* PipelineD::release_sgi_management_iface_vlan() {
  // @@protoc_insertion_point(field_release:magma.mconfig.PipelineD.sgi_management_iface_vlan)
  return sgi_management_iface_vlan_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PipelineD::set_allocated_sgi_management_iface_vlan(
    std::string* sgi_management_iface_vlan) {
  if (sgi_management_iface_vlan != nullptr) {
  } else {
  }
  sgi_management_iface_vlan_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sgi_management_iface_vlan, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.PipelineD.sgi_management_iface_vlan)
}

// string sgi_management_iface_ip_addr = 14;
inline void PipelineD::clear_sgi_management_iface_ip_addr() {
  sgi_management_iface_ip_addr_.ClearToEmpty();
}
inline const std::string& PipelineD::sgi_management_iface_ip_addr() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.PipelineD.sgi_management_iface_ip_addr)
  return _internal_sgi_management_iface_ip_addr();
}
inline void PipelineD::set_sgi_management_iface_ip_addr(
    const std::string& value) {
  _internal_set_sgi_management_iface_ip_addr(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.PipelineD.sgi_management_iface_ip_addr)
}
inline std::string* PipelineD::mutable_sgi_management_iface_ip_addr() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.PipelineD.sgi_management_iface_ip_addr)
  return _internal_mutable_sgi_management_iface_ip_addr();
}
inline const std::string& PipelineD::_internal_sgi_management_iface_ip_addr()
    const {
  return sgi_management_iface_ip_addr_.Get();
}
inline void PipelineD::_internal_set_sgi_management_iface_ip_addr(
    const std::string& value) {
  sgi_management_iface_ip_addr_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void PipelineD::set_sgi_management_iface_ip_addr(std::string&& value) {
  sgi_management_iface_ip_addr_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.PipelineD.sgi_management_iface_ip_addr)
}
inline void PipelineD::set_sgi_management_iface_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  sgi_management_iface_ip_addr_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.PipelineD.sgi_management_iface_ip_addr)
}
inline void PipelineD::set_sgi_management_iface_ip_addr(
    const char* value, size_t size) {
  sgi_management_iface_ip_addr_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.PipelineD.sgi_management_iface_ip_addr)
}
inline std::string*
PipelineD::_internal_mutable_sgi_management_iface_ip_addr() {
  return sgi_management_iface_ip_addr_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* PipelineD::release_sgi_management_iface_ip_addr() {
  // @@protoc_insertion_point(field_release:magma.mconfig.PipelineD.sgi_management_iface_ip_addr)
  return sgi_management_iface_ip_addr_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PipelineD::set_allocated_sgi_management_iface_ip_addr(
    std::string* sgi_management_iface_ip_addr) {
  if (sgi_management_iface_ip_addr != nullptr) {
  } else {
  }
  sgi_management_iface_ip_addr_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sgi_management_iface_ip_addr, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.PipelineD.sgi_management_iface_ip_addr)
}

// string sgi_management_iface_gw = 15;
inline void PipelineD::clear_sgi_management_iface_gw() {
  sgi_management_iface_gw_.ClearToEmpty();
}
inline const std::string& PipelineD::sgi_management_iface_gw() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.PipelineD.sgi_management_iface_gw)
  return _internal_sgi_management_iface_gw();
}
inline void PipelineD::set_sgi_management_iface_gw(const std::string& value) {
  _internal_set_sgi_management_iface_gw(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.PipelineD.sgi_management_iface_gw)
}
inline std::string* PipelineD::mutable_sgi_management_iface_gw() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.PipelineD.sgi_management_iface_gw)
  return _internal_mutable_sgi_management_iface_gw();
}
inline const std::string& PipelineD::_internal_sgi_management_iface_gw() const {
  return sgi_management_iface_gw_.Get();
}
inline void PipelineD::_internal_set_sgi_management_iface_gw(
    const std::string& value) {
  sgi_management_iface_gw_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void PipelineD::set_sgi_management_iface_gw(std::string&& value) {
  sgi_management_iface_gw_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.PipelineD.sgi_management_iface_gw)
}
inline void PipelineD::set_sgi_management_iface_gw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  sgi_management_iface_gw_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.PipelineD.sgi_management_iface_gw)
}
inline void PipelineD::set_sgi_management_iface_gw(
    const char* value, size_t size) {
  sgi_management_iface_gw_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.PipelineD.sgi_management_iface_gw)
}
inline std::string* PipelineD::_internal_mutable_sgi_management_iface_gw() {
  return sgi_management_iface_gw_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* PipelineD::release_sgi_management_iface_gw() {
  // @@protoc_insertion_point(field_release:magma.mconfig.PipelineD.sgi_management_iface_gw)
  return sgi_management_iface_gw_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PipelineD::set_allocated_sgi_management_iface_gw(
    std::string* sgi_management_iface_gw) {
  if (sgi_management_iface_gw != nullptr) {
  } else {
  }
  sgi_management_iface_gw_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sgi_management_iface_gw, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.PipelineD.sgi_management_iface_gw)
}

// .magma.mconfig.PipelineD.HEConfig he_config = 17;
inline bool PipelineD::_internal_has_he_config() const {
  return this != internal_default_instance() && he_config_ != nullptr;
}
inline bool PipelineD::has_he_config() const {
  return _internal_has_he_config();
}
inline void PipelineD::clear_he_config() {
  if (GetArena() == nullptr && he_config_ != nullptr) {
    delete he_config_;
  }
  he_config_ = nullptr;
}
inline const ::magma::mconfig::PipelineD_HEConfig&
PipelineD::_internal_he_config() const {
  const ::magma::mconfig::PipelineD_HEConfig* p = he_config_;
  return p != nullptr ?
             *p :
             reinterpret_cast<const ::magma::mconfig::PipelineD_HEConfig&>(
                 ::magma::mconfig::_PipelineD_HEConfig_default_instance_);
}
inline const ::magma::mconfig::PipelineD_HEConfig& PipelineD::he_config()
    const {
  // @@protoc_insertion_point(field_get:magma.mconfig.PipelineD.he_config)
  return _internal_he_config();
}
inline void PipelineD::unsafe_arena_set_allocated_he_config(
    ::magma::mconfig::PipelineD_HEConfig* he_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(he_config_);
  }
  he_config_ = he_config;
  if (he_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:magma.mconfig.PipelineD.he_config)
}
inline ::magma::mconfig::PipelineD_HEConfig* PipelineD::release_he_config() {
  ::magma::mconfig::PipelineD_HEConfig* temp = he_config_;
  he_config_                                 = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::magma::mconfig::PipelineD_HEConfig*
PipelineD::unsafe_arena_release_he_config() {
  // @@protoc_insertion_point(field_release:magma.mconfig.PipelineD.he_config)

  ::magma::mconfig::PipelineD_HEConfig* temp = he_config_;
  he_config_                                 = nullptr;
  return temp;
}
inline ::magma::mconfig::PipelineD_HEConfig*
PipelineD::_internal_mutable_he_config() {
  if (he_config_ == nullptr) {
    auto* p =
        CreateMaybeMessage<::magma::mconfig::PipelineD_HEConfig>(GetArena());
    he_config_ = p;
  }
  return he_config_;
}
inline ::magma::mconfig::PipelineD_HEConfig* PipelineD::mutable_he_config() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.PipelineD.he_config)
  return _internal_mutable_he_config();
}
inline void PipelineD::set_allocated_he_config(
    ::magma::mconfig::PipelineD_HEConfig* he_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete he_config_;
  }
  if (he_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(he_config);
    if (message_arena != submessage_arena) {
      he_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, he_config, submessage_arena);
    }

  } else {
  }
  he_config_ = he_config;
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.PipelineD.he_config)
}

// -------------------------------------------------------------------

// SessionD

// .magma.orc8r.LogLevel log_level = 1;
inline void SessionD::clear_log_level() {
  log_level_ = 0;
}
inline ::magma::orc8r::LogLevel SessionD::_internal_log_level() const {
  return static_cast<::magma::orc8r::LogLevel>(log_level_);
}
inline ::magma::orc8r::LogLevel SessionD::log_level() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.SessionD.log_level)
  return _internal_log_level();
}
inline void SessionD::_internal_set_log_level(::magma::orc8r::LogLevel value) {
  log_level_ = value;
}
inline void SessionD::set_log_level(::magma::orc8r::LogLevel value) {
  _internal_set_log_level(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.SessionD.log_level)
}

// bool relay_enabled = 2 [deprecated = true];
inline void SessionD::clear_relay_enabled() {
  relay_enabled_ = false;
}
inline bool SessionD::_internal_relay_enabled() const {
  return relay_enabled_;
}
inline bool SessionD::relay_enabled() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.SessionD.relay_enabled)
  return _internal_relay_enabled();
}
inline void SessionD::_internal_set_relay_enabled(bool value) {
  relay_enabled_ = value;
}
inline void SessionD::set_relay_enabled(bool value) {
  _internal_set_relay_enabled(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.SessionD.relay_enabled)
}

// .magma.mconfig.WalletExhaustDetection wallet_exhaust_detection = 3;
inline bool SessionD::_internal_has_wallet_exhaust_detection() const {
  return this != internal_default_instance() &&
         wallet_exhaust_detection_ != nullptr;
}
inline bool SessionD::has_wallet_exhaust_detection() const {
  return _internal_has_wallet_exhaust_detection();
}
inline void SessionD::clear_wallet_exhaust_detection() {
  if (GetArena() == nullptr && wallet_exhaust_detection_ != nullptr) {
    delete wallet_exhaust_detection_;
  }
  wallet_exhaust_detection_ = nullptr;
}
inline const ::magma::mconfig::WalletExhaustDetection&
SessionD::_internal_wallet_exhaust_detection() const {
  const ::magma::mconfig::WalletExhaustDetection* p = wallet_exhaust_detection_;
  return p != nullptr ?
             *p :
             reinterpret_cast<const ::magma::mconfig::WalletExhaustDetection&>(
                 ::magma::mconfig::_WalletExhaustDetection_default_instance_);
}
inline const ::magma::mconfig::WalletExhaustDetection&
SessionD::wallet_exhaust_detection() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.SessionD.wallet_exhaust_detection)
  return _internal_wallet_exhaust_detection();
}
inline void SessionD::unsafe_arena_set_allocated_wallet_exhaust_detection(
    ::magma::mconfig::WalletExhaustDetection* wallet_exhaust_detection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(
        wallet_exhaust_detection_);
  }
  wallet_exhaust_detection_ = wallet_exhaust_detection;
  if (wallet_exhaust_detection) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:magma.mconfig.SessionD.wallet_exhaust_detection)
}
inline ::magma::mconfig::WalletExhaustDetection*
SessionD::release_wallet_exhaust_detection() {
  ::magma::mconfig::WalletExhaustDetection* temp = wallet_exhaust_detection_;
  wallet_exhaust_detection_                      = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::magma::mconfig::WalletExhaustDetection*
SessionD::unsafe_arena_release_wallet_exhaust_detection() {
  // @@protoc_insertion_point(field_release:magma.mconfig.SessionD.wallet_exhaust_detection)

  ::magma::mconfig::WalletExhaustDetection* temp = wallet_exhaust_detection_;
  wallet_exhaust_detection_                      = nullptr;
  return temp;
}
inline ::magma::mconfig::WalletExhaustDetection*
SessionD::_internal_mutable_wallet_exhaust_detection() {
  if (wallet_exhaust_detection_ == nullptr) {
    auto* p = CreateMaybeMessage<::magma::mconfig::WalletExhaustDetection>(
        GetArena());
    wallet_exhaust_detection_ = p;
  }
  return wallet_exhaust_detection_;
}
inline ::magma::mconfig::WalletExhaustDetection*
SessionD::mutable_wallet_exhaust_detection() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.SessionD.wallet_exhaust_detection)
  return _internal_mutable_wallet_exhaust_detection();
}
inline void SessionD::set_allocated_wallet_exhaust_detection(
    ::magma::mconfig::WalletExhaustDetection* wallet_exhaust_detection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete wallet_exhaust_detection_;
  }
  if (wallet_exhaust_detection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wallet_exhaust_detection);
    if (message_arena != submessage_arena) {
      wallet_exhaust_detection =
          ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
              message_arena, wallet_exhaust_detection, submessage_arena);
    }

  } else {
  }
  wallet_exhaust_detection_ = wallet_exhaust_detection;
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.SessionD.wallet_exhaust_detection)
}

// bool gx_gy_relay_enabled = 4;
inline void SessionD::clear_gx_gy_relay_enabled() {
  gx_gy_relay_enabled_ = false;
}
inline bool SessionD::_internal_gx_gy_relay_enabled() const {
  return gx_gy_relay_enabled_;
}
inline bool SessionD::gx_gy_relay_enabled() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.SessionD.gx_gy_relay_enabled)
  return _internal_gx_gy_relay_enabled();
}
inline void SessionD::_internal_set_gx_gy_relay_enabled(bool value) {
  gx_gy_relay_enabled_ = value;
}
inline void SessionD::set_gx_gy_relay_enabled(bool value) {
  _internal_set_gx_gy_relay_enabled(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.SessionD.gx_gy_relay_enabled)
}

// .magma.mconfig.SentryConfig sentry_config = 5;
inline bool SessionD::_internal_has_sentry_config() const {
  return this != internal_default_instance() && sentry_config_ != nullptr;
}
inline bool SessionD::has_sentry_config() const {
  return _internal_has_sentry_config();
}
inline void SessionD::clear_sentry_config() {
  if (GetArena() == nullptr && sentry_config_ != nullptr) {
    delete sentry_config_;
  }
  sentry_config_ = nullptr;
}
inline const ::magma::mconfig::SentryConfig& SessionD::_internal_sentry_config()
    const {
  const ::magma::mconfig::SentryConfig* p = sentry_config_;
  return p != nullptr ? *p :
                        reinterpret_cast<const ::magma::mconfig::SentryConfig&>(
                            ::magma::mconfig::_SentryConfig_default_instance_);
}
inline const ::magma::mconfig::SentryConfig& SessionD::sentry_config() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.SessionD.sentry_config)
  return _internal_sentry_config();
}
inline void SessionD::unsafe_arena_set_allocated_sentry_config(
    ::magma::mconfig::SentryConfig* sentry_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(
        sentry_config_);
  }
  sentry_config_ = sentry_config;
  if (sentry_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:magma.mconfig.SessionD.sentry_config)
}
inline ::magma::mconfig::SentryConfig* SessionD::release_sentry_config() {
  ::magma::mconfig::SentryConfig* temp = sentry_config_;
  sentry_config_                       = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::magma::mconfig::SentryConfig*
SessionD::unsafe_arena_release_sentry_config() {
  // @@protoc_insertion_point(field_release:magma.mconfig.SessionD.sentry_config)

  ::magma::mconfig::SentryConfig* temp = sentry_config_;
  sentry_config_                       = nullptr;
  return temp;
}
inline ::magma::mconfig::SentryConfig*
SessionD::_internal_mutable_sentry_config() {
  if (sentry_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::magma::mconfig::SentryConfig>(GetArena());
    sentry_config_ = p;
  }
  return sentry_config_;
}
inline ::magma::mconfig::SentryConfig* SessionD::mutable_sentry_config() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.SessionD.sentry_config)
  return _internal_mutable_sentry_config();
}
inline void SessionD::set_allocated_sentry_config(
    ::magma::mconfig::SentryConfig* sentry_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sentry_config_;
  }
  if (sentry_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sentry_config);
    if (message_arena != submessage_arena) {
      sentry_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sentry_config, submessage_arena);
    }

  } else {
  }
  sentry_config_ = sentry_config;
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.SessionD.sentry_config)
}

// -------------------------------------------------------------------

// WalletExhaustDetection

// bool terminate_on_exhaust = 1;
inline void WalletExhaustDetection::clear_terminate_on_exhaust() {
  terminate_on_exhaust_ = false;
}
inline bool WalletExhaustDetection::_internal_terminate_on_exhaust() const {
  return terminate_on_exhaust_;
}
inline bool WalletExhaustDetection::terminate_on_exhaust() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.WalletExhaustDetection.terminate_on_exhaust)
  return _internal_terminate_on_exhaust();
}
inline void WalletExhaustDetection::_internal_set_terminate_on_exhaust(
    bool value) {
  terminate_on_exhaust_ = value;
}
inline void WalletExhaustDetection::set_terminate_on_exhaust(bool value) {
  _internal_set_terminate_on_exhaust(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.WalletExhaustDetection.terminate_on_exhaust)
}

// .magma.mconfig.WalletExhaustDetection.Method method = 2;
inline void WalletExhaustDetection::clear_method() {
  method_ = 0;
}
inline ::magma::mconfig::WalletExhaustDetection_Method
WalletExhaustDetection::_internal_method() const {
  return static_cast<::magma::mconfig::WalletExhaustDetection_Method>(method_);
}
inline ::magma::mconfig::WalletExhaustDetection_Method
WalletExhaustDetection::method() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.WalletExhaustDetection.method)
  return _internal_method();
}
inline void WalletExhaustDetection::_internal_set_method(
    ::magma::mconfig::WalletExhaustDetection_Method value) {
  method_ = value;
}
inline void WalletExhaustDetection::set_method(
    ::magma::mconfig::WalletExhaustDetection_Method value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.WalletExhaustDetection.method)
}

// uint32 timeout_ms = 3;
inline void WalletExhaustDetection::clear_timeout_ms() {
  timeout_ms_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32
WalletExhaustDetection::_internal_timeout_ms() const {
  return timeout_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WalletExhaustDetection::timeout_ms()
    const {
  // @@protoc_insertion_point(field_get:magma.mconfig.WalletExhaustDetection.timeout_ms)
  return _internal_timeout_ms();
}
inline void WalletExhaustDetection::_internal_set_timeout_ms(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  timeout_ms_ = value;
}
inline void WalletExhaustDetection::set_timeout_ms(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout_ms(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.WalletExhaustDetection.timeout_ms)
}

// -------------------------------------------------------------------

// PolicyDB

// .magma.orc8r.LogLevel log_level = 1;
inline void PolicyDB::clear_log_level() {
  log_level_ = 0;
}
inline ::magma::orc8r::LogLevel PolicyDB::_internal_log_level() const {
  return static_cast<::magma::orc8r::LogLevel>(log_level_);
}
inline ::magma::orc8r::LogLevel PolicyDB::log_level() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.PolicyDB.log_level)
  return _internal_log_level();
}
inline void PolicyDB::_internal_set_log_level(::magma::orc8r::LogLevel value) {
  log_level_ = value;
}
inline void PolicyDB::set_log_level(::magma::orc8r::LogLevel value) {
  _internal_set_log_level(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.PolicyDB.log_level)
}

// -------------------------------------------------------------------

// RedirectD

// .magma.orc8r.LogLevel log_level = 1;
inline void RedirectD::clear_log_level() {
  log_level_ = 0;
}
inline ::magma::orc8r::LogLevel RedirectD::_internal_log_level() const {
  return static_cast<::magma::orc8r::LogLevel>(log_level_);
}
inline ::magma::orc8r::LogLevel RedirectD::log_level() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.RedirectD.log_level)
  return _internal_log_level();
}
inline void RedirectD::_internal_set_log_level(::magma::orc8r::LogLevel value) {
  log_level_ = value;
}
inline void RedirectD::set_log_level(::magma::orc8r::LogLevel value) {
  _internal_set_log_level(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.RedirectD.log_level)
}

// -------------------------------------------------------------------

// MobilityD

// .magma.orc8r.LogLevel log_level = 1;
inline void MobilityD::clear_log_level() {
  log_level_ = 0;
}
inline ::magma::orc8r::LogLevel MobilityD::_internal_log_level() const {
  return static_cast<::magma::orc8r::LogLevel>(log_level_);
}
inline ::magma::orc8r::LogLevel MobilityD::log_level() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MobilityD.log_level)
  return _internal_log_level();
}
inline void MobilityD::_internal_set_log_level(::magma::orc8r::LogLevel value) {
  log_level_ = value;
}
inline void MobilityD::set_log_level(::magma::orc8r::LogLevel value) {
  _internal_set_log_level(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MobilityD.log_level)
}

// string ip_block = 2;
inline void MobilityD::clear_ip_block() {
  ip_block_.ClearToEmpty();
}
inline const std::string& MobilityD::ip_block() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MobilityD.ip_block)
  return _internal_ip_block();
}
inline void MobilityD::set_ip_block(const std::string& value) {
  _internal_set_ip_block(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MobilityD.ip_block)
}
inline std::string* MobilityD::mutable_ip_block() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.MobilityD.ip_block)
  return _internal_mutable_ip_block();
}
inline const std::string& MobilityD::_internal_ip_block() const {
  return ip_block_.Get();
}
inline void MobilityD::_internal_set_ip_block(const std::string& value) {
  ip_block_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void MobilityD::set_ip_block(std::string&& value) {
  ip_block_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.MobilityD.ip_block)
}
inline void MobilityD::set_ip_block(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  ip_block_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.MobilityD.ip_block)
}
inline void MobilityD::set_ip_block(const char* value, size_t size) {
  ip_block_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.MobilityD.ip_block)
}
inline std::string* MobilityD::_internal_mutable_ip_block() {
  return ip_block_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* MobilityD::release_ip_block() {
  // @@protoc_insertion_point(field_release:magma.mconfig.MobilityD.ip_block)
  return ip_block_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MobilityD::set_allocated_ip_block(std::string* ip_block) {
  if (ip_block != nullptr) {
  } else {
  }
  ip_block_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip_block, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.MobilityD.ip_block)
}

// .magma.mconfig.MobilityD.IpAllocatorType ip_allocator_type = 3;
inline void MobilityD::clear_ip_allocator_type() {
  ip_allocator_type_ = 0;
}
inline ::magma::mconfig::MobilityD_IpAllocatorType
MobilityD::_internal_ip_allocator_type() const {
  return static_cast<::magma::mconfig::MobilityD_IpAllocatorType>(
      ip_allocator_type_);
}
inline ::magma::mconfig::MobilityD_IpAllocatorType
MobilityD::ip_allocator_type() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MobilityD.ip_allocator_type)
  return _internal_ip_allocator_type();
}
inline void MobilityD::_internal_set_ip_allocator_type(
    ::magma::mconfig::MobilityD_IpAllocatorType value) {
  ip_allocator_type_ = value;
}
inline void MobilityD::set_ip_allocator_type(
    ::magma::mconfig::MobilityD_IpAllocatorType value) {
  _internal_set_ip_allocator_type(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MobilityD.ip_allocator_type)
}

// bool static_ip_enabled = 4;
inline void MobilityD::clear_static_ip_enabled() {
  static_ip_enabled_ = false;
}
inline bool MobilityD::_internal_static_ip_enabled() const {
  return static_ip_enabled_;
}
inline bool MobilityD::static_ip_enabled() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MobilityD.static_ip_enabled)
  return _internal_static_ip_enabled();
}
inline void MobilityD::_internal_set_static_ip_enabled(bool value) {
  static_ip_enabled_ = value;
}
inline void MobilityD::set_static_ip_enabled(bool value) {
  _internal_set_static_ip_enabled(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MobilityD.static_ip_enabled)
}

// bool multi_apn_ip_alloc = 5;
inline void MobilityD::clear_multi_apn_ip_alloc() {
  multi_apn_ip_alloc_ = false;
}
inline bool MobilityD::_internal_multi_apn_ip_alloc() const {
  return multi_apn_ip_alloc_;
}
inline bool MobilityD::multi_apn_ip_alloc() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MobilityD.multi_apn_ip_alloc)
  return _internal_multi_apn_ip_alloc();
}
inline void MobilityD::_internal_set_multi_apn_ip_alloc(bool value) {
  multi_apn_ip_alloc_ = value;
}
inline void MobilityD::set_multi_apn_ip_alloc(bool value) {
  _internal_set_multi_apn_ip_alloc(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MobilityD.multi_apn_ip_alloc)
}

// string ipv6_block = 10;
inline void MobilityD::clear_ipv6_block() {
  ipv6_block_.ClearToEmpty();
}
inline const std::string& MobilityD::ipv6_block() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MobilityD.ipv6_block)
  return _internal_ipv6_block();
}
inline void MobilityD::set_ipv6_block(const std::string& value) {
  _internal_set_ipv6_block(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MobilityD.ipv6_block)
}
inline std::string* MobilityD::mutable_ipv6_block() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.MobilityD.ipv6_block)
  return _internal_mutable_ipv6_block();
}
inline const std::string& MobilityD::_internal_ipv6_block() const {
  return ipv6_block_.Get();
}
inline void MobilityD::_internal_set_ipv6_block(const std::string& value) {
  ipv6_block_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void MobilityD::set_ipv6_block(std::string&& value) {
  ipv6_block_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.MobilityD.ipv6_block)
}
inline void MobilityD::set_ipv6_block(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  ipv6_block_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.MobilityD.ipv6_block)
}
inline void MobilityD::set_ipv6_block(const char* value, size_t size) {
  ipv6_block_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.MobilityD.ipv6_block)
}
inline std::string* MobilityD::_internal_mutable_ipv6_block() {
  return ipv6_block_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* MobilityD::release_ipv6_block() {
  // @@protoc_insertion_point(field_release:magma.mconfig.MobilityD.ipv6_block)
  return ipv6_block_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MobilityD::set_allocated_ipv6_block(std::string* ipv6_block) {
  if (ipv6_block != nullptr) {
  } else {
  }
  ipv6_block_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ipv6_block, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.MobilityD.ipv6_block)
}

// string ipv6_prefix_allocation_type = 11;
inline void MobilityD::clear_ipv6_prefix_allocation_type() {
  ipv6_prefix_allocation_type_.ClearToEmpty();
}
inline const std::string& MobilityD::ipv6_prefix_allocation_type() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MobilityD.ipv6_prefix_allocation_type)
  return _internal_ipv6_prefix_allocation_type();
}
inline void MobilityD::set_ipv6_prefix_allocation_type(
    const std::string& value) {
  _internal_set_ipv6_prefix_allocation_type(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MobilityD.ipv6_prefix_allocation_type)
}
inline std::string* MobilityD::mutable_ipv6_prefix_allocation_type() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.MobilityD.ipv6_prefix_allocation_type)
  return _internal_mutable_ipv6_prefix_allocation_type();
}
inline const std::string& MobilityD::_internal_ipv6_prefix_allocation_type()
    const {
  return ipv6_prefix_allocation_type_.Get();
}
inline void MobilityD::_internal_set_ipv6_prefix_allocation_type(
    const std::string& value) {
  ipv6_prefix_allocation_type_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void MobilityD::set_ipv6_prefix_allocation_type(std::string&& value) {
  ipv6_prefix_allocation_type_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.MobilityD.ipv6_prefix_allocation_type)
}
inline void MobilityD::set_ipv6_prefix_allocation_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  ipv6_prefix_allocation_type_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.MobilityD.ipv6_prefix_allocation_type)
}
inline void MobilityD::set_ipv6_prefix_allocation_type(
    const char* value, size_t size) {
  ipv6_prefix_allocation_type_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.MobilityD.ipv6_prefix_allocation_type)
}
inline std::string* MobilityD::_internal_mutable_ipv6_prefix_allocation_type() {
  return ipv6_prefix_allocation_type_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* MobilityD::release_ipv6_prefix_allocation_type() {
  // @@protoc_insertion_point(field_release:magma.mconfig.MobilityD.ipv6_prefix_allocation_type)
  return ipv6_prefix_allocation_type_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MobilityD::set_allocated_ipv6_prefix_allocation_type(
    std::string* ipv6_prefix_allocation_type) {
  if (ipv6_prefix_allocation_type != nullptr) {
  } else {
  }
  ipv6_prefix_allocation_type_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ipv6_prefix_allocation_type, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.MobilityD.ipv6_prefix_allocation_type)
}

// -------------------------------------------------------------------

// MME_ApnCorrectionMap

// string imsi_prefix = 1;
inline void MME_ApnCorrectionMap::clear_imsi_prefix() {
  imsi_prefix_.ClearToEmpty();
}
inline const std::string& MME_ApnCorrectionMap::imsi_prefix() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.ApnCorrectionMap.imsi_prefix)
  return _internal_imsi_prefix();
}
inline void MME_ApnCorrectionMap::set_imsi_prefix(const std::string& value) {
  _internal_set_imsi_prefix(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.ApnCorrectionMap.imsi_prefix)
}
inline std::string* MME_ApnCorrectionMap::mutable_imsi_prefix() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.MME.ApnCorrectionMap.imsi_prefix)
  return _internal_mutable_imsi_prefix();
}
inline const std::string& MME_ApnCorrectionMap::_internal_imsi_prefix() const {
  return imsi_prefix_.Get();
}
inline void MME_ApnCorrectionMap::_internal_set_imsi_prefix(
    const std::string& value) {
  imsi_prefix_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void MME_ApnCorrectionMap::set_imsi_prefix(std::string&& value) {
  imsi_prefix_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.MME.ApnCorrectionMap.imsi_prefix)
}
inline void MME_ApnCorrectionMap::set_imsi_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  imsi_prefix_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.MME.ApnCorrectionMap.imsi_prefix)
}
inline void MME_ApnCorrectionMap::set_imsi_prefix(
    const char* value, size_t size) {
  imsi_prefix_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.MME.ApnCorrectionMap.imsi_prefix)
}
inline std::string* MME_ApnCorrectionMap::_internal_mutable_imsi_prefix() {
  return imsi_prefix_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* MME_ApnCorrectionMap::release_imsi_prefix() {
  // @@protoc_insertion_point(field_release:magma.mconfig.MME.ApnCorrectionMap.imsi_prefix)
  return imsi_prefix_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MME_ApnCorrectionMap::set_allocated_imsi_prefix(
    std::string* imsi_prefix) {
  if (imsi_prefix != nullptr) {
  } else {
  }
  imsi_prefix_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      imsi_prefix, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.MME.ApnCorrectionMap.imsi_prefix)
}

// string apn_override = 2;
inline void MME_ApnCorrectionMap::clear_apn_override() {
  apn_override_.ClearToEmpty();
}
inline const std::string& MME_ApnCorrectionMap::apn_override() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.ApnCorrectionMap.apn_override)
  return _internal_apn_override();
}
inline void MME_ApnCorrectionMap::set_apn_override(const std::string& value) {
  _internal_set_apn_override(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.ApnCorrectionMap.apn_override)
}
inline std::string* MME_ApnCorrectionMap::mutable_apn_override() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.MME.ApnCorrectionMap.apn_override)
  return _internal_mutable_apn_override();
}
inline const std::string& MME_ApnCorrectionMap::_internal_apn_override() const {
  return apn_override_.Get();
}
inline void MME_ApnCorrectionMap::_internal_set_apn_override(
    const std::string& value) {
  apn_override_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void MME_ApnCorrectionMap::set_apn_override(std::string&& value) {
  apn_override_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.MME.ApnCorrectionMap.apn_override)
}
inline void MME_ApnCorrectionMap::set_apn_override(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  apn_override_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.MME.ApnCorrectionMap.apn_override)
}
inline void MME_ApnCorrectionMap::set_apn_override(
    const char* value, size_t size) {
  apn_override_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.MME.ApnCorrectionMap.apn_override)
}
inline std::string* MME_ApnCorrectionMap::_internal_mutable_apn_override() {
  return apn_override_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* MME_ApnCorrectionMap::release_apn_override() {
  // @@protoc_insertion_point(field_release:magma.mconfig.MME.ApnCorrectionMap.apn_override)
  return apn_override_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MME_ApnCorrectionMap::set_allocated_apn_override(
    std::string* apn_override) {
  if (apn_override != nullptr) {
  } else {
  }
  apn_override_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      apn_override, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.MME.ApnCorrectionMap.apn_override)
}

// -------------------------------------------------------------------

// MME_PlmnConfig

// string mcc = 1;
inline void MME_PlmnConfig::clear_mcc() {
  mcc_.ClearToEmpty();
}
inline const std::string& MME_PlmnConfig::mcc() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.PlmnConfig.mcc)
  return _internal_mcc();
}
inline void MME_PlmnConfig::set_mcc(const std::string& value) {
  _internal_set_mcc(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.PlmnConfig.mcc)
}
inline std::string* MME_PlmnConfig::mutable_mcc() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.MME.PlmnConfig.mcc)
  return _internal_mutable_mcc();
}
inline const std::string& MME_PlmnConfig::_internal_mcc() const {
  return mcc_.Get();
}
inline void MME_PlmnConfig::_internal_set_mcc(const std::string& value) {
  mcc_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void MME_PlmnConfig::set_mcc(std::string&& value) {
  mcc_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.MME.PlmnConfig.mcc)
}
inline void MME_PlmnConfig::set_mcc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  mcc_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.MME.PlmnConfig.mcc)
}
inline void MME_PlmnConfig::set_mcc(const char* value, size_t size) {
  mcc_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.MME.PlmnConfig.mcc)
}
inline std::string* MME_PlmnConfig::_internal_mutable_mcc() {
  return mcc_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* MME_PlmnConfig::release_mcc() {
  // @@protoc_insertion_point(field_release:magma.mconfig.MME.PlmnConfig.mcc)
  return mcc_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MME_PlmnConfig::set_allocated_mcc(std::string* mcc) {
  if (mcc != nullptr) {
  } else {
  }
  mcc_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mcc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.MME.PlmnConfig.mcc)
}

// string mnc = 2;
inline void MME_PlmnConfig::clear_mnc() {
  mnc_.ClearToEmpty();
}
inline const std::string& MME_PlmnConfig::mnc() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.PlmnConfig.mnc)
  return _internal_mnc();
}
inline void MME_PlmnConfig::set_mnc(const std::string& value) {
  _internal_set_mnc(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.PlmnConfig.mnc)
}
inline std::string* MME_PlmnConfig::mutable_mnc() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.MME.PlmnConfig.mnc)
  return _internal_mutable_mnc();
}
inline const std::string& MME_PlmnConfig::_internal_mnc() const {
  return mnc_.Get();
}
inline void MME_PlmnConfig::_internal_set_mnc(const std::string& value) {
  mnc_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void MME_PlmnConfig::set_mnc(std::string&& value) {
  mnc_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.MME.PlmnConfig.mnc)
}
inline void MME_PlmnConfig::set_mnc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  mnc_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.MME.PlmnConfig.mnc)
}
inline void MME_PlmnConfig::set_mnc(const char* value, size_t size) {
  mnc_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.MME.PlmnConfig.mnc)
}
inline std::string* MME_PlmnConfig::_internal_mutable_mnc() {
  return mnc_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* MME_PlmnConfig::release_mnc() {
  // @@protoc_insertion_point(field_release:magma.mconfig.MME.PlmnConfig.mnc)
  return mnc_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MME_PlmnConfig::set_allocated_mnc(std::string* mnc) {
  if (mnc != nullptr) {
  } else {
  }
  mnc_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mnc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.MME.PlmnConfig.mnc)
}

// -------------------------------------------------------------------

// MME_TacList

// repeated uint32 tac = 1;
inline int MME_TacList::_internal_tac_size() const {
  return tac_.size();
}
inline int MME_TacList::tac_size() const {
  return _internal_tac_size();
}
inline void MME_TacList::clear_tac() {
  tac_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MME_TacList::_internal_tac(
    int index) const {
  return tac_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MME_TacList::tac(int index) const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.TacList.tac)
  return _internal_tac(index);
}
inline void MME_TacList::set_tac(
    int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  tac_.Set(index, value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.TacList.tac)
}
inline void MME_TacList::_internal_add_tac(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  tac_.Add(value);
}
inline void MME_TacList::add_tac(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_tac(value);
  // @@protoc_insertion_point(field_add:magma.mconfig.MME.TacList.tac)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<
    ::PROTOBUF_NAMESPACE_ID::uint32>&
MME_TacList::_internal_tac() const {
  return tac_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<
    ::PROTOBUF_NAMESPACE_ID::uint32>&
MME_TacList::tac() const {
  // @@protoc_insertion_point(field_list:magma.mconfig.MME.TacList.tac)
  return _internal_tac();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::PROTOBUF_NAMESPACE_ID::uint32>*
MME_TacList::_internal_mutable_tac() {
  return &tac_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::PROTOBUF_NAMESPACE_ID::uint32>*
MME_TacList::mutable_tac() {
  // @@protoc_insertion_point(field_mutable_list:magma.mconfig.MME.TacList.tac)
  return _internal_mutable_tac();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MME_ImeiConfig

// string tac = 1;
inline void MME_ImeiConfig::clear_tac() {
  tac_.ClearToEmpty();
}
inline const std::string& MME_ImeiConfig::tac() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.ImeiConfig.tac)
  return _internal_tac();
}
inline void MME_ImeiConfig::set_tac(const std::string& value) {
  _internal_set_tac(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.ImeiConfig.tac)
}
inline std::string* MME_ImeiConfig::mutable_tac() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.MME.ImeiConfig.tac)
  return _internal_mutable_tac();
}
inline const std::string& MME_ImeiConfig::_internal_tac() const {
  return tac_.Get();
}
inline void MME_ImeiConfig::_internal_set_tac(const std::string& value) {
  tac_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void MME_ImeiConfig::set_tac(std::string&& value) {
  tac_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.MME.ImeiConfig.tac)
}
inline void MME_ImeiConfig::set_tac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  tac_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.MME.ImeiConfig.tac)
}
inline void MME_ImeiConfig::set_tac(const char* value, size_t size) {
  tac_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.MME.ImeiConfig.tac)
}
inline std::string* MME_ImeiConfig::_internal_mutable_tac() {
  return tac_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* MME_ImeiConfig::release_tac() {
  // @@protoc_insertion_point(field_release:magma.mconfig.MME.ImeiConfig.tac)
  return tac_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MME_ImeiConfig::set_allocated_tac(std::string* tac) {
  if (tac != nullptr) {
  } else {
  }
  tac_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tac,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.MME.ImeiConfig.tac)
}

// string snr = 2;
inline void MME_ImeiConfig::clear_snr() {
  snr_.ClearToEmpty();
}
inline const std::string& MME_ImeiConfig::snr() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.ImeiConfig.snr)
  return _internal_snr();
}
inline void MME_ImeiConfig::set_snr(const std::string& value) {
  _internal_set_snr(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.ImeiConfig.snr)
}
inline std::string* MME_ImeiConfig::mutable_snr() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.MME.ImeiConfig.snr)
  return _internal_mutable_snr();
}
inline const std::string& MME_ImeiConfig::_internal_snr() const {
  return snr_.Get();
}
inline void MME_ImeiConfig::_internal_set_snr(const std::string& value) {
  snr_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void MME_ImeiConfig::set_snr(std::string&& value) {
  snr_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.MME.ImeiConfig.snr)
}
inline void MME_ImeiConfig::set_snr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  snr_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.MME.ImeiConfig.snr)
}
inline void MME_ImeiConfig::set_snr(const char* value, size_t size) {
  snr_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.MME.ImeiConfig.snr)
}
inline std::string* MME_ImeiConfig::_internal_mutable_snr() {
  return snr_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* MME_ImeiConfig::release_snr() {
  // @@protoc_insertion_point(field_release:magma.mconfig.MME.ImeiConfig.snr)
  return snr_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MME_ImeiConfig::set_allocated_snr(std::string* snr) {
  if (snr != nullptr) {
  } else {
  }
  snr_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.MME.ImeiConfig.snr)
}

// -------------------------------------------------------------------

// MME

// .magma.orc8r.LogLevel log_level = 1;
inline void MME::clear_log_level() {
  log_level_ = 0;
}
inline ::magma::orc8r::LogLevel MME::_internal_log_level() const {
  return static_cast<::magma::orc8r::LogLevel>(log_level_);
}
inline ::magma::orc8r::LogLevel MME::log_level() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.log_level)
  return _internal_log_level();
}
inline void MME::_internal_set_log_level(::magma::orc8r::LogLevel value) {
  log_level_ = value;
}
inline void MME::set_log_level(::magma::orc8r::LogLevel value) {
  _internal_set_log_level(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.log_level)
}

// string mcc = 2;
inline void MME::clear_mcc() {
  mcc_.ClearToEmpty();
}
inline const std::string& MME::mcc() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.mcc)
  return _internal_mcc();
}
inline void MME::set_mcc(const std::string& value) {
  _internal_set_mcc(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.mcc)
}
inline std::string* MME::mutable_mcc() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.MME.mcc)
  return _internal_mutable_mcc();
}
inline const std::string& MME::_internal_mcc() const {
  return mcc_.Get();
}
inline void MME::_internal_set_mcc(const std::string& value) {
  mcc_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void MME::set_mcc(std::string&& value) {
  mcc_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.MME.mcc)
}
inline void MME::set_mcc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  mcc_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.MME.mcc)
}
inline void MME::set_mcc(const char* value, size_t size) {
  mcc_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.MME.mcc)
}
inline std::string* MME::_internal_mutable_mcc() {
  return mcc_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* MME::release_mcc() {
  // @@protoc_insertion_point(field_release:magma.mconfig.MME.mcc)
  return mcc_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MME::set_allocated_mcc(std::string* mcc) {
  if (mcc != nullptr) {
  } else {
  }
  mcc_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mcc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.MME.mcc)
}

// string mnc = 3;
inline void MME::clear_mnc() {
  mnc_.ClearToEmpty();
}
inline const std::string& MME::mnc() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.mnc)
  return _internal_mnc();
}
inline void MME::set_mnc(const std::string& value) {
  _internal_set_mnc(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.mnc)
}
inline std::string* MME::mutable_mnc() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.MME.mnc)
  return _internal_mutable_mnc();
}
inline const std::string& MME::_internal_mnc() const {
  return mnc_.Get();
}
inline void MME::_internal_set_mnc(const std::string& value) {
  mnc_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void MME::set_mnc(std::string&& value) {
  mnc_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.MME.mnc)
}
inline void MME::set_mnc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  mnc_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.MME.mnc)
}
inline void MME::set_mnc(const char* value, size_t size) {
  mnc_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.MME.mnc)
}
inline std::string* MME::_internal_mutable_mnc() {
  return mnc_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* MME::release_mnc() {
  // @@protoc_insertion_point(field_release:magma.mconfig.MME.mnc)
  return mnc_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MME::set_allocated_mnc(std::string* mnc) {
  if (mnc != nullptr) {
  } else {
  }
  mnc_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mnc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.MME.mnc)
}

// int32 tac = 4;
inline void MME::clear_tac() {
  tac_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MME::_internal_tac() const {
  return tac_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MME::tac() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.tac)
  return _internal_tac();
}
inline void MME::_internal_set_tac(::PROTOBUF_NAMESPACE_ID::int32 value) {
  tac_ = value;
}
inline void MME::set_tac(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tac(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.tac)
}

// int32 mme_gid = 5;
inline void MME::clear_mme_gid() {
  mme_gid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MME::_internal_mme_gid() const {
  return mme_gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MME::mme_gid() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.mme_gid)
  return _internal_mme_gid();
}
inline void MME::_internal_set_mme_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  mme_gid_ = value;
}
inline void MME::set_mme_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mme_gid(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.mme_gid)
}

// int32 mme_code = 6;
inline void MME::clear_mme_code() {
  mme_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MME::_internal_mme_code() const {
  return mme_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MME::mme_code() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.mme_code)
  return _internal_mme_code();
}
inline void MME::_internal_set_mme_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  mme_code_ = value;
}
inline void MME::set_mme_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mme_code(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.mme_code)
}

// bool enable_dns_caching = 7;
inline void MME::clear_enable_dns_caching() {
  enable_dns_caching_ = false;
}
inline bool MME::_internal_enable_dns_caching() const {
  return enable_dns_caching_;
}
inline bool MME::enable_dns_caching() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.enable_dns_caching)
  return _internal_enable_dns_caching();
}
inline void MME::_internal_set_enable_dns_caching(bool value) {
  enable_dns_caching_ = value;
}
inline void MME::set_enable_dns_caching(bool value) {
  _internal_set_enable_dns_caching(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.enable_dns_caching)
}

// bool relay_enabled = 8;
inline void MME::clear_relay_enabled() {
  relay_enabled_ = false;
}
inline bool MME::_internal_relay_enabled() const {
  return relay_enabled_;
}
inline bool MME::relay_enabled() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.relay_enabled)
  return _internal_relay_enabled();
}
inline void MME::_internal_set_relay_enabled(bool value) {
  relay_enabled_ = value;
}
inline void MME::set_relay_enabled(bool value) {
  _internal_set_relay_enabled(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.relay_enabled)
}

// .magma.mconfig.MME.NonEPSServiceControl non_eps_service_control = 9;
inline void MME::clear_non_eps_service_control() {
  non_eps_service_control_ = 0;
}
inline ::magma::mconfig::MME_NonEPSServiceControl
MME::_internal_non_eps_service_control() const {
  return static_cast<::magma::mconfig::MME_NonEPSServiceControl>(
      non_eps_service_control_);
}
inline ::magma::mconfig::MME_NonEPSServiceControl MME::non_eps_service_control()
    const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.non_eps_service_control)
  return _internal_non_eps_service_control();
}
inline void MME::_internal_set_non_eps_service_control(
    ::magma::mconfig::MME_NonEPSServiceControl value) {
  non_eps_service_control_ = value;
}
inline void MME::set_non_eps_service_control(
    ::magma::mconfig::MME_NonEPSServiceControl value) {
  _internal_set_non_eps_service_control(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.non_eps_service_control)
}

// string csfb_mcc = 10;
inline void MME::clear_csfb_mcc() {
  csfb_mcc_.ClearToEmpty();
}
inline const std::string& MME::csfb_mcc() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.csfb_mcc)
  return _internal_csfb_mcc();
}
inline void MME::set_csfb_mcc(const std::string& value) {
  _internal_set_csfb_mcc(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.csfb_mcc)
}
inline std::string* MME::mutable_csfb_mcc() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.MME.csfb_mcc)
  return _internal_mutable_csfb_mcc();
}
inline const std::string& MME::_internal_csfb_mcc() const {
  return csfb_mcc_.Get();
}
inline void MME::_internal_set_csfb_mcc(const std::string& value) {
  csfb_mcc_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void MME::set_csfb_mcc(std::string&& value) {
  csfb_mcc_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.MME.csfb_mcc)
}
inline void MME::set_csfb_mcc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  csfb_mcc_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.MME.csfb_mcc)
}
inline void MME::set_csfb_mcc(const char* value, size_t size) {
  csfb_mcc_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.MME.csfb_mcc)
}
inline std::string* MME::_internal_mutable_csfb_mcc() {
  return csfb_mcc_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* MME::release_csfb_mcc() {
  // @@protoc_insertion_point(field_release:magma.mconfig.MME.csfb_mcc)
  return csfb_mcc_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MME::set_allocated_csfb_mcc(std::string* csfb_mcc) {
  if (csfb_mcc != nullptr) {
  } else {
  }
  csfb_mcc_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      csfb_mcc, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.MME.csfb_mcc)
}

// string csfb_mnc = 11;
inline void MME::clear_csfb_mnc() {
  csfb_mnc_.ClearToEmpty();
}
inline const std::string& MME::csfb_mnc() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.csfb_mnc)
  return _internal_csfb_mnc();
}
inline void MME::set_csfb_mnc(const std::string& value) {
  _internal_set_csfb_mnc(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.csfb_mnc)
}
inline std::string* MME::mutable_csfb_mnc() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.MME.csfb_mnc)
  return _internal_mutable_csfb_mnc();
}
inline const std::string& MME::_internal_csfb_mnc() const {
  return csfb_mnc_.Get();
}
inline void MME::_internal_set_csfb_mnc(const std::string& value) {
  csfb_mnc_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void MME::set_csfb_mnc(std::string&& value) {
  csfb_mnc_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.MME.csfb_mnc)
}
inline void MME::set_csfb_mnc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  csfb_mnc_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.MME.csfb_mnc)
}
inline void MME::set_csfb_mnc(const char* value, size_t size) {
  csfb_mnc_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.MME.csfb_mnc)
}
inline std::string* MME::_internal_mutable_csfb_mnc() {
  return csfb_mnc_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* MME::release_csfb_mnc() {
  // @@protoc_insertion_point(field_release:magma.mconfig.MME.csfb_mnc)
  return csfb_mnc_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MME::set_allocated_csfb_mnc(std::string* csfb_mnc) {
  if (csfb_mnc != nullptr) {
  } else {
  }
  csfb_mnc_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      csfb_mnc, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.MME.csfb_mnc)
}

// int32 lac = 12;
inline void MME::clear_lac() {
  lac_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MME::_internal_lac() const {
  return lac_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MME::lac() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.lac)
  return _internal_lac();
}
inline void MME::_internal_set_lac(::PROTOBUF_NAMESPACE_ID::int32 value) {
  lac_ = value;
}
inline void MME::set_lac(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lac(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.lac)
}

// bool cloud_subscriberdb_enabled = 14;
inline void MME::clear_cloud_subscriberdb_enabled() {
  cloud_subscriberdb_enabled_ = false;
}
inline bool MME::_internal_cloud_subscriberdb_enabled() const {
  return cloud_subscriberdb_enabled_;
}
inline bool MME::cloud_subscriberdb_enabled() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.cloud_subscriberdb_enabled)
  return _internal_cloud_subscriberdb_enabled();
}
inline void MME::_internal_set_cloud_subscriberdb_enabled(bool value) {
  cloud_subscriberdb_enabled_ = value;
}
inline void MME::set_cloud_subscriberdb_enabled(bool value) {
  _internal_set_cloud_subscriberdb_enabled(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.cloud_subscriberdb_enabled)
}

// repeated int32 attached_enodeb_tacs = 15;
inline int MME::_internal_attached_enodeb_tacs_size() const {
  return attached_enodeb_tacs_.size();
}
inline int MME::attached_enodeb_tacs_size() const {
  return _internal_attached_enodeb_tacs_size();
}
inline void MME::clear_attached_enodeb_tacs() {
  attached_enodeb_tacs_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MME::_internal_attached_enodeb_tacs(
    int index) const {
  return attached_enodeb_tacs_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MME::attached_enodeb_tacs(
    int index) const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.attached_enodeb_tacs)
  return _internal_attached_enodeb_tacs(index);
}
inline void MME::set_attached_enodeb_tacs(
    int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  attached_enodeb_tacs_.Set(index, value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.attached_enodeb_tacs)
}
inline void MME::_internal_add_attached_enodeb_tacs(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  attached_enodeb_tacs_.Add(value);
}
inline void MME::add_attached_enodeb_tacs(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_attached_enodeb_tacs(value);
  // @@protoc_insertion_point(field_add:magma.mconfig.MME.attached_enodeb_tacs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<
    ::PROTOBUF_NAMESPACE_ID::int32>&
MME::_internal_attached_enodeb_tacs() const {
  return attached_enodeb_tacs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<
    ::PROTOBUF_NAMESPACE_ID::int32>&
MME::attached_enodeb_tacs() const {
  // @@protoc_insertion_point(field_list:magma.mconfig.MME.attached_enodeb_tacs)
  return _internal_attached_enodeb_tacs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::PROTOBUF_NAMESPACE_ID::int32>*
MME::_internal_mutable_attached_enodeb_tacs() {
  return &attached_enodeb_tacs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::PROTOBUF_NAMESPACE_ID::int32>*
MME::mutable_attached_enodeb_tacs() {
  // @@protoc_insertion_point(field_mutable_list:magma.mconfig.MME.attached_enodeb_tacs)
  return _internal_mutable_attached_enodeb_tacs();
}

// int32 mme_relative_capacity = 16;
inline void MME::clear_mme_relative_capacity() {
  mme_relative_capacity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MME::_internal_mme_relative_capacity()
    const {
  return mme_relative_capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MME::mme_relative_capacity() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.mme_relative_capacity)
  return _internal_mme_relative_capacity();
}
inline void MME::_internal_set_mme_relative_capacity(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  mme_relative_capacity_ = value;
}
inline void MME::set_mme_relative_capacity(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mme_relative_capacity(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.mme_relative_capacity)
}

// string dns_primary = 20;
inline void MME::clear_dns_primary() {
  dns_primary_.ClearToEmpty();
}
inline const std::string& MME::dns_primary() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.dns_primary)
  return _internal_dns_primary();
}
inline void MME::set_dns_primary(const std::string& value) {
  _internal_set_dns_primary(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.dns_primary)
}
inline std::string* MME::mutable_dns_primary() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.MME.dns_primary)
  return _internal_mutable_dns_primary();
}
inline const std::string& MME::_internal_dns_primary() const {
  return dns_primary_.Get();
}
inline void MME::_internal_set_dns_primary(const std::string& value) {
  dns_primary_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void MME::set_dns_primary(std::string&& value) {
  dns_primary_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.MME.dns_primary)
}
inline void MME::set_dns_primary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  dns_primary_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.MME.dns_primary)
}
inline void MME::set_dns_primary(const char* value, size_t size) {
  dns_primary_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.MME.dns_primary)
}
inline std::string* MME::_internal_mutable_dns_primary() {
  return dns_primary_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* MME::release_dns_primary() {
  // @@protoc_insertion_point(field_release:magma.mconfig.MME.dns_primary)
  return dns_primary_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MME::set_allocated_dns_primary(std::string* dns_primary) {
  if (dns_primary != nullptr) {
  } else {
  }
  dns_primary_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dns_primary, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.MME.dns_primary)
}

// string dns_secondary = 21;
inline void MME::clear_dns_secondary() {
  dns_secondary_.ClearToEmpty();
}
inline const std::string& MME::dns_secondary() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.dns_secondary)
  return _internal_dns_secondary();
}
inline void MME::set_dns_secondary(const std::string& value) {
  _internal_set_dns_secondary(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.dns_secondary)
}
inline std::string* MME::mutable_dns_secondary() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.MME.dns_secondary)
  return _internal_mutable_dns_secondary();
}
inline const std::string& MME::_internal_dns_secondary() const {
  return dns_secondary_.Get();
}
inline void MME::_internal_set_dns_secondary(const std::string& value) {
  dns_secondary_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void MME::set_dns_secondary(std::string&& value) {
  dns_secondary_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.MME.dns_secondary)
}
inline void MME::set_dns_secondary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  dns_secondary_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.MME.dns_secondary)
}
inline void MME::set_dns_secondary(const char* value, size_t size) {
  dns_secondary_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.MME.dns_secondary)
}
inline std::string* MME::_internal_mutable_dns_secondary() {
  return dns_secondary_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* MME::release_dns_secondary() {
  // @@protoc_insertion_point(field_release:magma.mconfig.MME.dns_secondary)
  return dns_secondary_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MME::set_allocated_dns_secondary(std::string* dns_secondary) {
  if (dns_secondary != nullptr) {
  } else {
  }
  dns_secondary_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dns_secondary, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.MME.dns_secondary)
}

// bool nat_enabled = 22;
inline void MME::clear_nat_enabled() {
  nat_enabled_ = false;
}
inline bool MME::_internal_nat_enabled() const {
  return nat_enabled_;
}
inline bool MME::nat_enabled() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.nat_enabled)
  return _internal_nat_enabled();
}
inline void MME::_internal_set_nat_enabled(bool value) {
  nat_enabled_ = value;
}
inline void MME::set_nat_enabled(bool value) {
  _internal_set_nat_enabled(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.nat_enabled)
}

// bool hss_relay_enabled = 23;
inline void MME::clear_hss_relay_enabled() {
  hss_relay_enabled_ = false;
}
inline bool MME::_internal_hss_relay_enabled() const {
  return hss_relay_enabled_;
}
inline bool MME::hss_relay_enabled() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.hss_relay_enabled)
  return _internal_hss_relay_enabled();
}
inline void MME::_internal_set_hss_relay_enabled(bool value) {
  hss_relay_enabled_ = value;
}
inline void MME::set_hss_relay_enabled(bool value) {
  _internal_set_hss_relay_enabled(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.hss_relay_enabled)
}

// bool enable_apn_correction = 24;
inline void MME::clear_enable_apn_correction() {
  enable_apn_correction_ = false;
}
inline bool MME::_internal_enable_apn_correction() const {
  return enable_apn_correction_;
}
inline bool MME::enable_apn_correction() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.enable_apn_correction)
  return _internal_enable_apn_correction();
}
inline void MME::_internal_set_enable_apn_correction(bool value) {
  enable_apn_correction_ = value;
}
inline void MME::set_enable_apn_correction(bool value) {
  _internal_set_enable_apn_correction(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.enable_apn_correction)
}

// repeated .magma.mconfig.MME.ApnCorrectionMap apn_correction_map_list = 25;
inline int MME::_internal_apn_correction_map_list_size() const {
  return apn_correction_map_list_.size();
}
inline int MME::apn_correction_map_list_size() const {
  return _internal_apn_correction_map_list_size();
}
inline void MME::clear_apn_correction_map_list() {
  apn_correction_map_list_.Clear();
}
inline ::magma::mconfig::MME_ApnCorrectionMap*
MME::mutable_apn_correction_map_list(int index) {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.MME.apn_correction_map_list)
  return apn_correction_map_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::magma::mconfig::MME_ApnCorrectionMap>*
MME::mutable_apn_correction_map_list() {
  // @@protoc_insertion_point(field_mutable_list:magma.mconfig.MME.apn_correction_map_list)
  return &apn_correction_map_list_;
}
inline const ::magma::mconfig::MME_ApnCorrectionMap&
MME::_internal_apn_correction_map_list(int index) const {
  return apn_correction_map_list_.Get(index);
}
inline const ::magma::mconfig::MME_ApnCorrectionMap&
MME::apn_correction_map_list(int index) const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.apn_correction_map_list)
  return _internal_apn_correction_map_list(index);
}
inline ::magma::mconfig::MME_ApnCorrectionMap*
MME::_internal_add_apn_correction_map_list() {
  return apn_correction_map_list_.Add();
}
inline ::magma::mconfig::MME_ApnCorrectionMap*
MME::add_apn_correction_map_list() {
  // @@protoc_insertion_point(field_add:magma.mconfig.MME.apn_correction_map_list)
  return _internal_add_apn_correction_map_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::magma::mconfig::MME_ApnCorrectionMap>&
MME::apn_correction_map_list() const {
  // @@protoc_insertion_point(field_list:magma.mconfig.MME.apn_correction_map_list)
  return apn_correction_map_list_;
}

// string ipv4_p_cscf_address = 26;
inline void MME::clear_ipv4_p_cscf_address() {
  ipv4_p_cscf_address_.ClearToEmpty();
}
inline const std::string& MME::ipv4_p_cscf_address() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.ipv4_p_cscf_address)
  return _internal_ipv4_p_cscf_address();
}
inline void MME::set_ipv4_p_cscf_address(const std::string& value) {
  _internal_set_ipv4_p_cscf_address(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.ipv4_p_cscf_address)
}
inline std::string* MME::mutable_ipv4_p_cscf_address() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.MME.ipv4_p_cscf_address)
  return _internal_mutable_ipv4_p_cscf_address();
}
inline const std::string& MME::_internal_ipv4_p_cscf_address() const {
  return ipv4_p_cscf_address_.Get();
}
inline void MME::_internal_set_ipv4_p_cscf_address(const std::string& value) {
  ipv4_p_cscf_address_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void MME::set_ipv4_p_cscf_address(std::string&& value) {
  ipv4_p_cscf_address_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.MME.ipv4_p_cscf_address)
}
inline void MME::set_ipv4_p_cscf_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  ipv4_p_cscf_address_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.MME.ipv4_p_cscf_address)
}
inline void MME::set_ipv4_p_cscf_address(const char* value, size_t size) {
  ipv4_p_cscf_address_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.MME.ipv4_p_cscf_address)
}
inline std::string* MME::_internal_mutable_ipv4_p_cscf_address() {
  return ipv4_p_cscf_address_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* MME::release_ipv4_p_cscf_address() {
  // @@protoc_insertion_point(field_release:magma.mconfig.MME.ipv4_p_cscf_address)
  return ipv4_p_cscf_address_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MME::set_allocated_ipv4_p_cscf_address(
    std::string* ipv4_p_cscf_address) {
  if (ipv4_p_cscf_address != nullptr) {
  } else {
  }
  ipv4_p_cscf_address_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ipv4_p_cscf_address, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.MME.ipv4_p_cscf_address)
}

// string ipv6_p_cscf_address = 27;
inline void MME::clear_ipv6_p_cscf_address() {
  ipv6_p_cscf_address_.ClearToEmpty();
}
inline const std::string& MME::ipv6_p_cscf_address() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.ipv6_p_cscf_address)
  return _internal_ipv6_p_cscf_address();
}
inline void MME::set_ipv6_p_cscf_address(const std::string& value) {
  _internal_set_ipv6_p_cscf_address(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.ipv6_p_cscf_address)
}
inline std::string* MME::mutable_ipv6_p_cscf_address() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.MME.ipv6_p_cscf_address)
  return _internal_mutable_ipv6_p_cscf_address();
}
inline const std::string& MME::_internal_ipv6_p_cscf_address() const {
  return ipv6_p_cscf_address_.Get();
}
inline void MME::_internal_set_ipv6_p_cscf_address(const std::string& value) {
  ipv6_p_cscf_address_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void MME::set_ipv6_p_cscf_address(std::string&& value) {
  ipv6_p_cscf_address_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.MME.ipv6_p_cscf_address)
}
inline void MME::set_ipv6_p_cscf_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  ipv6_p_cscf_address_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.MME.ipv6_p_cscf_address)
}
inline void MME::set_ipv6_p_cscf_address(const char* value, size_t size) {
  ipv6_p_cscf_address_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.MME.ipv6_p_cscf_address)
}
inline std::string* MME::_internal_mutable_ipv6_p_cscf_address() {
  return ipv6_p_cscf_address_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* MME::release_ipv6_p_cscf_address() {
  // @@protoc_insertion_point(field_release:magma.mconfig.MME.ipv6_p_cscf_address)
  return ipv6_p_cscf_address_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MME::set_allocated_ipv6_p_cscf_address(
    std::string* ipv6_p_cscf_address) {
  if (ipv6_p_cscf_address != nullptr) {
  } else {
  }
  ipv6_p_cscf_address_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ipv6_p_cscf_address, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.MME.ipv6_p_cscf_address)
}

// string ipv6_dns_address = 30;
inline void MME::clear_ipv6_dns_address() {
  ipv6_dns_address_.ClearToEmpty();
}
inline const std::string& MME::ipv6_dns_address() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.ipv6_dns_address)
  return _internal_ipv6_dns_address();
}
inline void MME::set_ipv6_dns_address(const std::string& value) {
  _internal_set_ipv6_dns_address(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.ipv6_dns_address)
}
inline std::string* MME::mutable_ipv6_dns_address() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.MME.ipv6_dns_address)
  return _internal_mutable_ipv6_dns_address();
}
inline const std::string& MME::_internal_ipv6_dns_address() const {
  return ipv6_dns_address_.Get();
}
inline void MME::_internal_set_ipv6_dns_address(const std::string& value) {
  ipv6_dns_address_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void MME::set_ipv6_dns_address(std::string&& value) {
  ipv6_dns_address_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.MME.ipv6_dns_address)
}
inline void MME::set_ipv6_dns_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  ipv6_dns_address_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.MME.ipv6_dns_address)
}
inline void MME::set_ipv6_dns_address(const char* value, size_t size) {
  ipv6_dns_address_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.MME.ipv6_dns_address)
}
inline std::string* MME::_internal_mutable_ipv6_dns_address() {
  return ipv6_dns_address_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* MME::release_ipv6_dns_address() {
  // @@protoc_insertion_point(field_release:magma.mconfig.MME.ipv6_dns_address)
  return ipv6_dns_address_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MME::set_allocated_ipv6_dns_address(std::string* ipv6_dns_address) {
  if (ipv6_dns_address != nullptr) {
  } else {
  }
  ipv6_dns_address_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ipv6_dns_address, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.MME.ipv6_dns_address)
}

// string ipv4_sgw_s1u_addr = 31;
inline void MME::clear_ipv4_sgw_s1u_addr() {
  ipv4_sgw_s1u_addr_.ClearToEmpty();
}
inline const std::string& MME::ipv4_sgw_s1u_addr() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.ipv4_sgw_s1u_addr)
  return _internal_ipv4_sgw_s1u_addr();
}
inline void MME::set_ipv4_sgw_s1u_addr(const std::string& value) {
  _internal_set_ipv4_sgw_s1u_addr(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.ipv4_sgw_s1u_addr)
}
inline std::string* MME::mutable_ipv4_sgw_s1u_addr() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.MME.ipv4_sgw_s1u_addr)
  return _internal_mutable_ipv4_sgw_s1u_addr();
}
inline const std::string& MME::_internal_ipv4_sgw_s1u_addr() const {
  return ipv4_sgw_s1u_addr_.Get();
}
inline void MME::_internal_set_ipv4_sgw_s1u_addr(const std::string& value) {
  ipv4_sgw_s1u_addr_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void MME::set_ipv4_sgw_s1u_addr(std::string&& value) {
  ipv4_sgw_s1u_addr_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.MME.ipv4_sgw_s1u_addr)
}
inline void MME::set_ipv4_sgw_s1u_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  ipv4_sgw_s1u_addr_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.MME.ipv4_sgw_s1u_addr)
}
inline void MME::set_ipv4_sgw_s1u_addr(const char* value, size_t size) {
  ipv4_sgw_s1u_addr_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.MME.ipv4_sgw_s1u_addr)
}
inline std::string* MME::_internal_mutable_ipv4_sgw_s1u_addr() {
  return ipv4_sgw_s1u_addr_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* MME::release_ipv4_sgw_s1u_addr() {
  // @@protoc_insertion_point(field_release:magma.mconfig.MME.ipv4_sgw_s1u_addr)
  return ipv4_sgw_s1u_addr_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MME::set_allocated_ipv4_sgw_s1u_addr(
    std::string* ipv4_sgw_s1u_addr) {
  if (ipv4_sgw_s1u_addr != nullptr) {
  } else {
  }
  ipv4_sgw_s1u_addr_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ipv4_sgw_s1u_addr, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.MME.ipv4_sgw_s1u_addr)
}

// repeated .magma.mconfig.MME.PlmnConfig restricted_plmns = 32;
inline int MME::_internal_restricted_plmns_size() const {
  return restricted_plmns_.size();
}
inline int MME::restricted_plmns_size() const {
  return _internal_restricted_plmns_size();
}
inline void MME::clear_restricted_plmns() {
  restricted_plmns_.Clear();
}
inline ::magma::mconfig::MME_PlmnConfig* MME::mutable_restricted_plmns(
    int index) {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.MME.restricted_plmns)
  return restricted_plmns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::magma::mconfig::MME_PlmnConfig>*
MME::mutable_restricted_plmns() {
  // @@protoc_insertion_point(field_mutable_list:magma.mconfig.MME.restricted_plmns)
  return &restricted_plmns_;
}
inline const ::magma::mconfig::MME_PlmnConfig& MME::_internal_restricted_plmns(
    int index) const {
  return restricted_plmns_.Get(index);
}
inline const ::magma::mconfig::MME_PlmnConfig& MME::restricted_plmns(
    int index) const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.restricted_plmns)
  return _internal_restricted_plmns(index);
}
inline ::magma::mconfig::MME_PlmnConfig* MME::_internal_add_restricted_plmns() {
  return restricted_plmns_.Add();
}
inline ::magma::mconfig::MME_PlmnConfig* MME::add_restricted_plmns() {
  // @@protoc_insertion_point(field_add:magma.mconfig.MME.restricted_plmns)
  return _internal_add_restricted_plmns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::magma::mconfig::MME_PlmnConfig>&
MME::restricted_plmns() const {
  // @@protoc_insertion_point(field_list:magma.mconfig.MME.restricted_plmns)
  return restricted_plmns_;
}

// map<string, .magma.mconfig.MME.TacList> service_area_maps = 33;
inline int MME::_internal_service_area_maps_size() const {
  return service_area_maps_.size();
}
inline int MME::service_area_maps_size() const {
  return _internal_service_area_maps_size();
}
inline void MME::clear_service_area_maps() {
  service_area_maps_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map<
    std::string, ::magma::mconfig::MME_TacList>&
MME::_internal_service_area_maps() const {
  return service_area_maps_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map<
    std::string, ::magma::mconfig::MME_TacList>&
MME::service_area_maps() const {
  // @@protoc_insertion_point(field_map:magma.mconfig.MME.service_area_maps)
  return _internal_service_area_maps();
}
inline ::PROTOBUF_NAMESPACE_ID::Map<std::string, ::magma::mconfig::MME_TacList>*
MME::_internal_mutable_service_area_maps() {
  return service_area_maps_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map<std::string, ::magma::mconfig::MME_TacList>*
MME::mutable_service_area_maps() {
  // @@protoc_insertion_point(field_mutable_map:magma.mconfig.MME.service_area_maps)
  return _internal_mutable_service_area_maps();
}

// .magma.mconfig.FederatedModeMap federated_mode_map = 34;
inline bool MME::_internal_has_federated_mode_map() const {
  return this != internal_default_instance() && federated_mode_map_ != nullptr;
}
inline bool MME::has_federated_mode_map() const {
  return _internal_has_federated_mode_map();
}
inline void MME::clear_federated_mode_map() {
  if (GetArena() == nullptr && federated_mode_map_ != nullptr) {
    delete federated_mode_map_;
  }
  federated_mode_map_ = nullptr;
}
inline const ::magma::mconfig::FederatedModeMap&
MME::_internal_federated_mode_map() const {
  const ::magma::mconfig::FederatedModeMap* p = federated_mode_map_;
  return p != nullptr ?
             *p :
             reinterpret_cast<const ::magma::mconfig::FederatedModeMap&>(
                 ::magma::mconfig::_FederatedModeMap_default_instance_);
}
inline const ::magma::mconfig::FederatedModeMap& MME::federated_mode_map()
    const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.federated_mode_map)
  return _internal_federated_mode_map();
}
inline void MME::unsafe_arena_set_allocated_federated_mode_map(
    ::magma::mconfig::FederatedModeMap* federated_mode_map) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(
        federated_mode_map_);
  }
  federated_mode_map_ = federated_mode_map;
  if (federated_mode_map) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:magma.mconfig.MME.federated_mode_map)
}
inline ::magma::mconfig::FederatedModeMap* MME::release_federated_mode_map() {
  ::magma::mconfig::FederatedModeMap* temp = federated_mode_map_;
  federated_mode_map_                      = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::magma::mconfig::FederatedModeMap*
MME::unsafe_arena_release_federated_mode_map() {
  // @@protoc_insertion_point(field_release:magma.mconfig.MME.federated_mode_map)

  ::magma::mconfig::FederatedModeMap* temp = federated_mode_map_;
  federated_mode_map_                      = nullptr;
  return temp;
}
inline ::magma::mconfig::FederatedModeMap*
MME::_internal_mutable_federated_mode_map() {
  if (federated_mode_map_ == nullptr) {
    auto* p =
        CreateMaybeMessage<::magma::mconfig::FederatedModeMap>(GetArena());
    federated_mode_map_ = p;
  }
  return federated_mode_map_;
}
inline ::magma::mconfig::FederatedModeMap* MME::mutable_federated_mode_map() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.MME.federated_mode_map)
  return _internal_mutable_federated_mode_map();
}
inline void MME::set_allocated_federated_mode_map(
    ::magma::mconfig::FederatedModeMap* federated_mode_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete federated_mode_map_;
  }
  if (federated_mode_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(federated_mode_map);
    if (message_arena != submessage_arena) {
      federated_mode_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, federated_mode_map, submessage_arena);
    }

  } else {
  }
  federated_mode_map_ = federated_mode_map;
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.MME.federated_mode_map)
}

// repeated .magma.mconfig.MME.ImeiConfig restricted_imeis = 35;
inline int MME::_internal_restricted_imeis_size() const {
  return restricted_imeis_.size();
}
inline int MME::restricted_imeis_size() const {
  return _internal_restricted_imeis_size();
}
inline void MME::clear_restricted_imeis() {
  restricted_imeis_.Clear();
}
inline ::magma::mconfig::MME_ImeiConfig* MME::mutable_restricted_imeis(
    int index) {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.MME.restricted_imeis)
  return restricted_imeis_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::magma::mconfig::MME_ImeiConfig>*
MME::mutable_restricted_imeis() {
  // @@protoc_insertion_point(field_mutable_list:magma.mconfig.MME.restricted_imeis)
  return &restricted_imeis_;
}
inline const ::magma::mconfig::MME_ImeiConfig& MME::_internal_restricted_imeis(
    int index) const {
  return restricted_imeis_.Get(index);
}
inline const ::magma::mconfig::MME_ImeiConfig& MME::restricted_imeis(
    int index) const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.restricted_imeis)
  return _internal_restricted_imeis(index);
}
inline ::magma::mconfig::MME_ImeiConfig* MME::_internal_add_restricted_imeis() {
  return restricted_imeis_.Add();
}
inline ::magma::mconfig::MME_ImeiConfig* MME::add_restricted_imeis() {
  // @@protoc_insertion_point(field_add:magma.mconfig.MME.restricted_imeis)
  return _internal_add_restricted_imeis();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::magma::mconfig::MME_ImeiConfig>&
MME::restricted_imeis() const {
  // @@protoc_insertion_point(field_list:magma.mconfig.MME.restricted_imeis)
  return restricted_imeis_;
}

// bool congestion_control_enabled = 40;
inline void MME::clear_congestion_control_enabled() {
  congestion_control_enabled_ = false;
}
inline bool MME::_internal_congestion_control_enabled() const {
  return congestion_control_enabled_;
}
inline bool MME::congestion_control_enabled() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.congestion_control_enabled)
  return _internal_congestion_control_enabled();
}
inline void MME::_internal_set_congestion_control_enabled(bool value) {
  congestion_control_enabled_ = value;
}
inline void MME::set_congestion_control_enabled(bool value) {
  _internal_set_congestion_control_enabled(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.congestion_control_enabled)
}

// .magma.mconfig.SentryConfig sentry_config = 45;
inline bool MME::_internal_has_sentry_config() const {
  return this != internal_default_instance() && sentry_config_ != nullptr;
}
inline bool MME::has_sentry_config() const {
  return _internal_has_sentry_config();
}
inline void MME::clear_sentry_config() {
  if (GetArena() == nullptr && sentry_config_ != nullptr) {
    delete sentry_config_;
  }
  sentry_config_ = nullptr;
}
inline const ::magma::mconfig::SentryConfig& MME::_internal_sentry_config()
    const {
  const ::magma::mconfig::SentryConfig* p = sentry_config_;
  return p != nullptr ? *p :
                        reinterpret_cast<const ::magma::mconfig::SentryConfig&>(
                            ::magma::mconfig::_SentryConfig_default_instance_);
}
inline const ::magma::mconfig::SentryConfig& MME::sentry_config() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.sentry_config)
  return _internal_sentry_config();
}
inline void MME::unsafe_arena_set_allocated_sentry_config(
    ::magma::mconfig::SentryConfig* sentry_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(
        sentry_config_);
  }
  sentry_config_ = sentry_config;
  if (sentry_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:magma.mconfig.MME.sentry_config)
}
inline ::magma::mconfig::SentryConfig* MME::release_sentry_config() {
  ::magma::mconfig::SentryConfig* temp = sentry_config_;
  sentry_config_                       = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::magma::mconfig::SentryConfig*
MME::unsafe_arena_release_sentry_config() {
  // @@protoc_insertion_point(field_release:magma.mconfig.MME.sentry_config)

  ::magma::mconfig::SentryConfig* temp = sentry_config_;
  sentry_config_                       = nullptr;
  return temp;
}
inline ::magma::mconfig::SentryConfig* MME::_internal_mutable_sentry_config() {
  if (sentry_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::magma::mconfig::SentryConfig>(GetArena());
    sentry_config_ = p;
  }
  return sentry_config_;
}
inline ::magma::mconfig::SentryConfig* MME::mutable_sentry_config() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.MME.sentry_config)
  return _internal_mutable_sentry_config();
}
inline void MME::set_allocated_sentry_config(
    ::magma::mconfig::SentryConfig* sentry_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sentry_config_;
  }
  if (sentry_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sentry_config);
    if (message_arena != submessage_arena) {
      sentry_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sentry_config, submessage_arena);
    }

  } else {
  }
  sentry_config_ = sentry_config;
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.MME.sentry_config)
}

// bool enable_converged_core = 46;
inline void MME::clear_enable_converged_core() {
  enable_converged_core_ = false;
}
inline bool MME::_internal_enable_converged_core() const {
  return enable_converged_core_;
}
inline bool MME::enable_converged_core() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MME.enable_converged_core)
  return _internal_enable_converged_core();
}
inline void MME::_internal_set_enable_converged_core(bool value) {
  enable_converged_core_ = value;
}
inline void MME::set_enable_converged_core(bool value) {
  _internal_set_enable_converged_core(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MME.enable_converged_core)
}

// -------------------------------------------------------------------

// FederatedModeMap

// bool enabled = 1;
inline void FederatedModeMap::clear_enabled() {
  enabled_ = false;
}
inline bool FederatedModeMap::_internal_enabled() const {
  return enabled_;
}
inline bool FederatedModeMap::enabled() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.FederatedModeMap.enabled)
  return _internal_enabled();
}
inline void FederatedModeMap::_internal_set_enabled(bool value) {
  enabled_ = value;
}
inline void FederatedModeMap::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.FederatedModeMap.enabled)
}

// repeated .magma.mconfig.ModeMapItem mapping = 2;
inline int FederatedModeMap::_internal_mapping_size() const {
  return mapping_.size();
}
inline int FederatedModeMap::mapping_size() const {
  return _internal_mapping_size();
}
inline void FederatedModeMap::clear_mapping() {
  mapping_.Clear();
}
inline ::magma::mconfig::ModeMapItem* FederatedModeMap::mutable_mapping(
    int index) {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.FederatedModeMap.mapping)
  return mapping_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::magma::mconfig::ModeMapItem>*
FederatedModeMap::mutable_mapping() {
  // @@protoc_insertion_point(field_mutable_list:magma.mconfig.FederatedModeMap.mapping)
  return &mapping_;
}
inline const ::magma::mconfig::ModeMapItem& FederatedModeMap::_internal_mapping(
    int index) const {
  return mapping_.Get(index);
}
inline const ::magma::mconfig::ModeMapItem& FederatedModeMap::mapping(
    int index) const {
  // @@protoc_insertion_point(field_get:magma.mconfig.FederatedModeMap.mapping)
  return _internal_mapping(index);
}
inline ::magma::mconfig::ModeMapItem*
FederatedModeMap::_internal_add_mapping() {
  return mapping_.Add();
}
inline ::magma::mconfig::ModeMapItem* FederatedModeMap::add_mapping() {
  // @@protoc_insertion_point(field_add:magma.mconfig.FederatedModeMap.mapping)
  return _internal_add_mapping();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::magma::mconfig::ModeMapItem>&
FederatedModeMap::mapping() const {
  // @@protoc_insertion_point(field_list:magma.mconfig.FederatedModeMap.mapping)
  return mapping_;
}

// -------------------------------------------------------------------

// ModeMapItem

// .magma.mconfig.ModeMapItem.FederatedMode mode = 1;
inline void ModeMapItem::clear_mode() {
  mode_ = 0;
}
inline ::magma::mconfig::ModeMapItem_FederatedMode ModeMapItem::_internal_mode()
    const {
  return static_cast<::magma::mconfig::ModeMapItem_FederatedMode>(mode_);
}
inline ::magma::mconfig::ModeMapItem_FederatedMode ModeMapItem::mode() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.ModeMapItem.mode)
  return _internal_mode();
}
inline void ModeMapItem::_internal_set_mode(
    ::magma::mconfig::ModeMapItem_FederatedMode value) {
  mode_ = value;
}
inline void ModeMapItem::set_mode(
    ::magma::mconfig::ModeMapItem_FederatedMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.ModeMapItem.mode)
}

// string plmn = 2;
inline void ModeMapItem::clear_plmn() {
  plmn_.ClearToEmpty();
}
inline const std::string& ModeMapItem::plmn() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.ModeMapItem.plmn)
  return _internal_plmn();
}
inline void ModeMapItem::set_plmn(const std::string& value) {
  _internal_set_plmn(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.ModeMapItem.plmn)
}
inline std::string* ModeMapItem::mutable_plmn() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.ModeMapItem.plmn)
  return _internal_mutable_plmn();
}
inline const std::string& ModeMapItem::_internal_plmn() const {
  return plmn_.Get();
}
inline void ModeMapItem::_internal_set_plmn(const std::string& value) {
  plmn_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void ModeMapItem::set_plmn(std::string&& value) {
  plmn_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.ModeMapItem.plmn)
}
inline void ModeMapItem::set_plmn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  plmn_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.ModeMapItem.plmn)
}
inline void ModeMapItem::set_plmn(const char* value, size_t size) {
  plmn_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.ModeMapItem.plmn)
}
inline std::string* ModeMapItem::_internal_mutable_plmn() {
  return plmn_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* ModeMapItem::release_plmn() {
  // @@protoc_insertion_point(field_release:magma.mconfig.ModeMapItem.plmn)
  return plmn_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ModeMapItem::set_allocated_plmn(std::string* plmn) {
  if (plmn != nullptr) {
  } else {
  }
  plmn_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plmn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.ModeMapItem.plmn)
}

// string imsi_range = 3;
inline void ModeMapItem::clear_imsi_range() {
  imsi_range_.ClearToEmpty();
}
inline const std::string& ModeMapItem::imsi_range() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.ModeMapItem.imsi_range)
  return _internal_imsi_range();
}
inline void ModeMapItem::set_imsi_range(const std::string& value) {
  _internal_set_imsi_range(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.ModeMapItem.imsi_range)
}
inline std::string* ModeMapItem::mutable_imsi_range() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.ModeMapItem.imsi_range)
  return _internal_mutable_imsi_range();
}
inline const std::string& ModeMapItem::_internal_imsi_range() const {
  return imsi_range_.Get();
}
inline void ModeMapItem::_internal_set_imsi_range(const std::string& value) {
  imsi_range_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void ModeMapItem::set_imsi_range(std::string&& value) {
  imsi_range_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.ModeMapItem.imsi_range)
}
inline void ModeMapItem::set_imsi_range(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  imsi_range_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.ModeMapItem.imsi_range)
}
inline void ModeMapItem::set_imsi_range(const char* value, size_t size) {
  imsi_range_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.ModeMapItem.imsi_range)
}
inline std::string* ModeMapItem::_internal_mutable_imsi_range() {
  return imsi_range_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* ModeMapItem::release_imsi_range() {
  // @@protoc_insertion_point(field_release:magma.mconfig.ModeMapItem.imsi_range)
  return imsi_range_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ModeMapItem::set_allocated_imsi_range(std::string* imsi_range) {
  if (imsi_range != nullptr) {
  } else {
  }
  imsi_range_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      imsi_range, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.ModeMapItem.imsi_range)
}

// string apn = 4;
inline void ModeMapItem::clear_apn() {
  apn_.ClearToEmpty();
}
inline const std::string& ModeMapItem::apn() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.ModeMapItem.apn)
  return _internal_apn();
}
inline void ModeMapItem::set_apn(const std::string& value) {
  _internal_set_apn(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.ModeMapItem.apn)
}
inline std::string* ModeMapItem::mutable_apn() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.ModeMapItem.apn)
  return _internal_mutable_apn();
}
inline const std::string& ModeMapItem::_internal_apn() const {
  return apn_.Get();
}
inline void ModeMapItem::_internal_set_apn(const std::string& value) {
  apn_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void ModeMapItem::set_apn(std::string&& value) {
  apn_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.ModeMapItem.apn)
}
inline void ModeMapItem::set_apn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  apn_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.ModeMapItem.apn)
}
inline void ModeMapItem::set_apn(const char* value, size_t size) {
  apn_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.ModeMapItem.apn)
}
inline std::string* ModeMapItem::_internal_mutable_apn() {
  return apn_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* ModeMapItem::release_apn() {
  // @@protoc_insertion_point(field_release:magma.mconfig.ModeMapItem.apn)
  return apn_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ModeMapItem::set_allocated_apn(std::string* apn) {
  if (apn != nullptr) {
  } else {
  }
  apn_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), apn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.ModeMapItem.apn)
}

// -------------------------------------------------------------------

// SubscriberDB_SubscriptionProfile

// uint64 max_ul_bit_rate = 1;
inline void SubscriberDB_SubscriptionProfile::clear_max_ul_bit_rate() {
  max_ul_bit_rate_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64
SubscriberDB_SubscriptionProfile::_internal_max_ul_bit_rate() const {
  return max_ul_bit_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64
SubscriberDB_SubscriptionProfile::max_ul_bit_rate() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.SubscriberDB.SubscriptionProfile.max_ul_bit_rate)
  return _internal_max_ul_bit_rate();
}
inline void SubscriberDB_SubscriptionProfile::_internal_set_max_ul_bit_rate(
    ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  max_ul_bit_rate_ = value;
}
inline void SubscriberDB_SubscriptionProfile::set_max_ul_bit_rate(
    ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_ul_bit_rate(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.SubscriberDB.SubscriptionProfile.max_ul_bit_rate)
}

// uint64 max_dl_bit_rate = 2;
inline void SubscriberDB_SubscriptionProfile::clear_max_dl_bit_rate() {
  max_dl_bit_rate_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64
SubscriberDB_SubscriptionProfile::_internal_max_dl_bit_rate() const {
  return max_dl_bit_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64
SubscriberDB_SubscriptionProfile::max_dl_bit_rate() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.SubscriberDB.SubscriptionProfile.max_dl_bit_rate)
  return _internal_max_dl_bit_rate();
}
inline void SubscriberDB_SubscriptionProfile::_internal_set_max_dl_bit_rate(
    ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  max_dl_bit_rate_ = value;
}
inline void SubscriberDB_SubscriptionProfile::set_max_dl_bit_rate(
    ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_dl_bit_rate(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.SubscriberDB.SubscriptionProfile.max_dl_bit_rate)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SubscriberDB

// .magma.orc8r.LogLevel log_level = 1;
inline void SubscriberDB::clear_log_level() {
  log_level_ = 0;
}
inline ::magma::orc8r::LogLevel SubscriberDB::_internal_log_level() const {
  return static_cast<::magma::orc8r::LogLevel>(log_level_);
}
inline ::magma::orc8r::LogLevel SubscriberDB::log_level() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.SubscriberDB.log_level)
  return _internal_log_level();
}
inline void SubscriberDB::_internal_set_log_level(
    ::magma::orc8r::LogLevel value) {
  log_level_ = value;
}
inline void SubscriberDB::set_log_level(::magma::orc8r::LogLevel value) {
  _internal_set_log_level(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.SubscriberDB.log_level)
}

// bytes lte_auth_op = 2;
inline void SubscriberDB::clear_lte_auth_op() {
  lte_auth_op_.ClearToEmpty();
}
inline const std::string& SubscriberDB::lte_auth_op() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.SubscriberDB.lte_auth_op)
  return _internal_lte_auth_op();
}
inline void SubscriberDB::set_lte_auth_op(const std::string& value) {
  _internal_set_lte_auth_op(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.SubscriberDB.lte_auth_op)
}
inline std::string* SubscriberDB::mutable_lte_auth_op() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.SubscriberDB.lte_auth_op)
  return _internal_mutable_lte_auth_op();
}
inline const std::string& SubscriberDB::_internal_lte_auth_op() const {
  return lte_auth_op_.Get();
}
inline void SubscriberDB::_internal_set_lte_auth_op(const std::string& value) {
  lte_auth_op_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void SubscriberDB::set_lte_auth_op(std::string&& value) {
  lte_auth_op_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.SubscriberDB.lte_auth_op)
}
inline void SubscriberDB::set_lte_auth_op(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  lte_auth_op_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.SubscriberDB.lte_auth_op)
}
inline void SubscriberDB::set_lte_auth_op(const void* value, size_t size) {
  lte_auth_op_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.SubscriberDB.lte_auth_op)
}
inline std::string* SubscriberDB::_internal_mutable_lte_auth_op() {
  return lte_auth_op_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* SubscriberDB::release_lte_auth_op() {
  // @@protoc_insertion_point(field_release:magma.mconfig.SubscriberDB.lte_auth_op)
  return lte_auth_op_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubscriberDB::set_allocated_lte_auth_op(std::string* lte_auth_op) {
  if (lte_auth_op != nullptr) {
  } else {
  }
  lte_auth_op_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      lte_auth_op, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.SubscriberDB.lte_auth_op)
}

// bytes lte_auth_amf = 3;
inline void SubscriberDB::clear_lte_auth_amf() {
  lte_auth_amf_.ClearToEmpty();
}
inline const std::string& SubscriberDB::lte_auth_amf() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.SubscriberDB.lte_auth_amf)
  return _internal_lte_auth_amf();
}
inline void SubscriberDB::set_lte_auth_amf(const std::string& value) {
  _internal_set_lte_auth_amf(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.SubscriberDB.lte_auth_amf)
}
inline std::string* SubscriberDB::mutable_lte_auth_amf() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.SubscriberDB.lte_auth_amf)
  return _internal_mutable_lte_auth_amf();
}
inline const std::string& SubscriberDB::_internal_lte_auth_amf() const {
  return lte_auth_amf_.Get();
}
inline void SubscriberDB::_internal_set_lte_auth_amf(const std::string& value) {
  lte_auth_amf_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void SubscriberDB::set_lte_auth_amf(std::string&& value) {
  lte_auth_amf_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.SubscriberDB.lte_auth_amf)
}
inline void SubscriberDB::set_lte_auth_amf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  lte_auth_amf_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.SubscriberDB.lte_auth_amf)
}
inline void SubscriberDB::set_lte_auth_amf(const void* value, size_t size) {
  lte_auth_amf_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.SubscriberDB.lte_auth_amf)
}
inline std::string* SubscriberDB::_internal_mutable_lte_auth_amf() {
  return lte_auth_amf_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* SubscriberDB::release_lte_auth_amf() {
  // @@protoc_insertion_point(field_release:magma.mconfig.SubscriberDB.lte_auth_amf)
  return lte_auth_amf_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubscriberDB::set_allocated_lte_auth_amf(
    std::string* lte_auth_amf) {
  if (lte_auth_amf != nullptr) {
  } else {
  }
  lte_auth_amf_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      lte_auth_amf, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.SubscriberDB.lte_auth_amf)
}

// map<string, .magma.mconfig.SubscriberDB.SubscriptionProfile> sub_profiles =
// 4;
inline int SubscriberDB::_internal_sub_profiles_size() const {
  return sub_profiles_.size();
}
inline int SubscriberDB::sub_profiles_size() const {
  return _internal_sub_profiles_size();
}
inline void SubscriberDB::clear_sub_profiles() {
  sub_profiles_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map<
    std::string, ::magma::mconfig::SubscriberDB_SubscriptionProfile>&
SubscriberDB::_internal_sub_profiles() const {
  return sub_profiles_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map<
    std::string, ::magma::mconfig::SubscriberDB_SubscriptionProfile>&
SubscriberDB::sub_profiles() const {
  // @@protoc_insertion_point(field_map:magma.mconfig.SubscriberDB.sub_profiles)
  return _internal_sub_profiles();
}
inline ::PROTOBUF_NAMESPACE_ID::Map<
    std::string, ::magma::mconfig::SubscriberDB_SubscriptionProfile>*
SubscriberDB::_internal_mutable_sub_profiles() {
  return sub_profiles_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map<
    std::string, ::magma::mconfig::SubscriberDB_SubscriptionProfile>*
SubscriberDB::mutable_sub_profiles() {
  // @@protoc_insertion_point(field_mutable_map:magma.mconfig.SubscriberDB.sub_profiles)
  return _internal_mutable_sub_profiles();
}

// bool relay_enabled = 5;
inline void SubscriberDB::clear_relay_enabled() {
  relay_enabled_ = false;
}
inline bool SubscriberDB::_internal_relay_enabled() const {
  return relay_enabled_;
}
inline bool SubscriberDB::relay_enabled() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.SubscriberDB.relay_enabled)
  return _internal_relay_enabled();
}
inline void SubscriberDB::_internal_set_relay_enabled(bool value) {
  relay_enabled_ = value;
}
inline void SubscriberDB::set_relay_enabled(bool value) {
  _internal_set_relay_enabled(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.SubscriberDB.relay_enabled)
}

// bool hss_relay_enabled = 6;
inline void SubscriberDB::clear_hss_relay_enabled() {
  hss_relay_enabled_ = false;
}
inline bool SubscriberDB::_internal_hss_relay_enabled() const {
  return hss_relay_enabled_;
}
inline bool SubscriberDB::hss_relay_enabled() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.SubscriberDB.hss_relay_enabled)
  return _internal_hss_relay_enabled();
}
inline void SubscriberDB::_internal_set_hss_relay_enabled(bool value) {
  hss_relay_enabled_ = value;
}
inline void SubscriberDB::set_hss_relay_enabled(bool value) {
  _internal_set_hss_relay_enabled(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.SubscriberDB.hss_relay_enabled)
}

// uint32 sync_interval = 7;
inline void SubscriberDB::clear_sync_interval() {
  sync_interval_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubscriberDB::_internal_sync_interval()
    const {
  return sync_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubscriberDB::sync_interval() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.SubscriberDB.sync_interval)
  return _internal_sync_interval();
}
inline void SubscriberDB::_internal_set_sync_interval(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  sync_interval_ = value;
}
inline void SubscriberDB::set_sync_interval(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sync_interval(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.SubscriberDB.sync_interval)
}

// -------------------------------------------------------------------

// LighttpD

// .magma.orc8r.LogLevel log_level = 1;
inline void LighttpD::clear_log_level() {
  log_level_ = 0;
}
inline ::magma::orc8r::LogLevel LighttpD::_internal_log_level() const {
  return static_cast<::magma::orc8r::LogLevel>(log_level_);
}
inline ::magma::orc8r::LogLevel LighttpD::log_level() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.LighttpD.log_level)
  return _internal_log_level();
}
inline void LighttpD::_internal_set_log_level(::magma::orc8r::LogLevel value) {
  log_level_ = value;
}
inline void LighttpD::set_log_level(::magma::orc8r::LogLevel value) {
  _internal_set_log_level(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.LighttpD.log_level)
}

// bool enable_caching = 2;
inline void LighttpD::clear_enable_caching() {
  enable_caching_ = false;
}
inline bool LighttpD::_internal_enable_caching() const {
  return enable_caching_;
}
inline bool LighttpD::enable_caching() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.LighttpD.enable_caching)
  return _internal_enable_caching();
}
inline void LighttpD::_internal_set_enable_caching(bool value) {
  enable_caching_ = value;
}
inline void LighttpD::set_enable_caching(bool value) {
  _internal_set_enable_caching(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.LighttpD.enable_caching)
}

// -------------------------------------------------------------------

// MonitorD

// .magma.orc8r.LogLevel log_level = 1;
inline void MonitorD::clear_log_level() {
  log_level_ = 0;
}
inline ::magma::orc8r::LogLevel MonitorD::_internal_log_level() const {
  return static_cast<::magma::orc8r::LogLevel>(log_level_);
}
inline ::magma::orc8r::LogLevel MonitorD::log_level() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MonitorD.log_level)
  return _internal_log_level();
}
inline void MonitorD::_internal_set_log_level(::magma::orc8r::LogLevel value) {
  log_level_ = value;
}
inline void MonitorD::set_log_level(::magma::orc8r::LogLevel value) {
  _internal_set_log_level(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MonitorD.log_level)
}

// int32 polling_interval = 60;
inline void MonitorD::clear_polling_interval() {
  polling_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MonitorD::_internal_polling_interval()
    const {
  return polling_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MonitorD::polling_interval() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.MonitorD.polling_interval)
  return _internal_polling_interval();
}
inline void MonitorD::_internal_set_polling_interval(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  polling_interval_ = value;
}
inline void MonitorD::set_polling_interval(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_polling_interval(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.MonitorD.polling_interval)
}

// -------------------------------------------------------------------

// DPID

// .magma.orc8r.LogLevel log_level = 1;
inline void DPID::clear_log_level() {
  log_level_ = 0;
}
inline ::magma::orc8r::LogLevel DPID::_internal_log_level() const {
  return static_cast<::magma::orc8r::LogLevel>(log_level_);
}
inline ::magma::orc8r::LogLevel DPID::log_level() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.DPID.log_level)
  return _internal_log_level();
}
inline void DPID::_internal_set_log_level(::magma::orc8r::LogLevel value) {
  log_level_ = value;
}
inline void DPID::set_log_level(::magma::orc8r::LogLevel value) {
  _internal_set_log_level(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.DPID.log_level)
}

// -------------------------------------------------------------------

// ConnectionD

// .magma.orc8r.LogLevel log_level = 1;
inline void ConnectionD::clear_log_level() {
  log_level_ = 0;
}
inline ::magma::orc8r::LogLevel ConnectionD::_internal_log_level() const {
  return static_cast<::magma::orc8r::LogLevel>(log_level_);
}
inline ::magma::orc8r::LogLevel ConnectionD::log_level() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.ConnectionD.log_level)
  return _internal_log_level();
}
inline void ConnectionD::_internal_set_log_level(
    ::magma::orc8r::LogLevel value) {
  log_level_ = value;
}
inline void ConnectionD::set_log_level(::magma::orc8r::LogLevel value) {
  _internal_set_log_level(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.ConnectionD.log_level)
}

// -------------------------------------------------------------------

// LIAgentD

// .magma.orc8r.LogLevel log_level = 1;
inline void LIAgentD::clear_log_level() {
  log_level_ = 0;
}
inline ::magma::orc8r::LogLevel LIAgentD::_internal_log_level() const {
  return static_cast<::magma::orc8r::LogLevel>(log_level_);
}
inline ::magma::orc8r::LogLevel LIAgentD::log_level() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.LIAgentD.log_level)
  return _internal_log_level();
}
inline void LIAgentD::_internal_set_log_level(::magma::orc8r::LogLevel value) {
  log_level_ = value;
}
inline void LIAgentD::set_log_level(::magma::orc8r::LogLevel value) {
  _internal_set_log_level(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.LIAgentD.log_level)
}

// repeated .magma.mconfig.NProbeTask nprobe_tasks = 2;
inline int LIAgentD::_internal_nprobe_tasks_size() const {
  return nprobe_tasks_.size();
}
inline int LIAgentD::nprobe_tasks_size() const {
  return _internal_nprobe_tasks_size();
}
inline void LIAgentD::clear_nprobe_tasks() {
  nprobe_tasks_.Clear();
}
inline ::magma::mconfig::NProbeTask* LIAgentD::mutable_nprobe_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.LIAgentD.nprobe_tasks)
  return nprobe_tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::magma::mconfig::NProbeTask>*
LIAgentD::mutable_nprobe_tasks() {
  // @@protoc_insertion_point(field_mutable_list:magma.mconfig.LIAgentD.nprobe_tasks)
  return &nprobe_tasks_;
}
inline const ::magma::mconfig::NProbeTask& LIAgentD::_internal_nprobe_tasks(
    int index) const {
  return nprobe_tasks_.Get(index);
}
inline const ::magma::mconfig::NProbeTask& LIAgentD::nprobe_tasks(
    int index) const {
  // @@protoc_insertion_point(field_get:magma.mconfig.LIAgentD.nprobe_tasks)
  return _internal_nprobe_tasks(index);
}
inline ::magma::mconfig::NProbeTask* LIAgentD::_internal_add_nprobe_tasks() {
  return nprobe_tasks_.Add();
}
inline ::magma::mconfig::NProbeTask* LIAgentD::add_nprobe_tasks() {
  // @@protoc_insertion_point(field_add:magma.mconfig.LIAgentD.nprobe_tasks)
  return _internal_add_nprobe_tasks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::magma::mconfig::NProbeTask>&
LIAgentD::nprobe_tasks() const {
  // @@protoc_insertion_point(field_list:magma.mconfig.LIAgentD.nprobe_tasks)
  return nprobe_tasks_;
}

// -------------------------------------------------------------------

// NProbeTask

// string task_id = 1;
inline void NProbeTask::clear_task_id() {
  task_id_.ClearToEmpty();
}
inline const std::string& NProbeTask::task_id() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.NProbeTask.task_id)
  return _internal_task_id();
}
inline void NProbeTask::set_task_id(const std::string& value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.NProbeTask.task_id)
}
inline std::string* NProbeTask::mutable_task_id() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.NProbeTask.task_id)
  return _internal_mutable_task_id();
}
inline const std::string& NProbeTask::_internal_task_id() const {
  return task_id_.Get();
}
inline void NProbeTask::_internal_set_task_id(const std::string& value) {
  task_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void NProbeTask::set_task_id(std::string&& value) {
  task_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.NProbeTask.task_id)
}
inline void NProbeTask::set_task_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  task_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.NProbeTask.task_id)
}
inline void NProbeTask::set_task_id(const char* value, size_t size) {
  task_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.NProbeTask.task_id)
}
inline std::string* NProbeTask::_internal_mutable_task_id() {
  return task_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* NProbeTask::release_task_id() {
  // @@protoc_insertion_point(field_release:magma.mconfig.NProbeTask.task_id)
  return task_id_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NProbeTask::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
  } else {
  }
  task_id_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      task_id, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.NProbeTask.task_id)
}

// string target_id = 2;
inline void NProbeTask::clear_target_id() {
  target_id_.ClearToEmpty();
}
inline const std::string& NProbeTask::target_id() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.NProbeTask.target_id)
  return _internal_target_id();
}
inline void NProbeTask::set_target_id(const std::string& value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.NProbeTask.target_id)
}
inline std::string* NProbeTask::mutable_target_id() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.NProbeTask.target_id)
  return _internal_mutable_target_id();
}
inline const std::string& NProbeTask::_internal_target_id() const {
  return target_id_.Get();
}
inline void NProbeTask::_internal_set_target_id(const std::string& value) {
  target_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void NProbeTask::set_target_id(std::string&& value) {
  target_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.NProbeTask.target_id)
}
inline void NProbeTask::set_target_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  target_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.NProbeTask.target_id)
}
inline void NProbeTask::set_target_id(const char* value, size_t size) {
  target_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.NProbeTask.target_id)
}
inline std::string* NProbeTask::_internal_mutable_target_id() {
  return target_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* NProbeTask::release_target_id() {
  // @@protoc_insertion_point(field_release:magma.mconfig.NProbeTask.target_id)
  return target_id_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NProbeTask::set_allocated_target_id(std::string* target_id) {
  if (target_id != nullptr) {
  } else {
  }
  target_id_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target_id, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.NProbeTask.target_id)
}

// string target_type = 3;
inline void NProbeTask::clear_target_type() {
  target_type_.ClearToEmpty();
}
inline const std::string& NProbeTask::target_type() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.NProbeTask.target_type)
  return _internal_target_type();
}
inline void NProbeTask::set_target_type(const std::string& value) {
  _internal_set_target_type(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.NProbeTask.target_type)
}
inline std::string* NProbeTask::mutable_target_type() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.NProbeTask.target_type)
  return _internal_mutable_target_type();
}
inline const std::string& NProbeTask::_internal_target_type() const {
  return target_type_.Get();
}
inline void NProbeTask::_internal_set_target_type(const std::string& value) {
  target_type_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void NProbeTask::set_target_type(std::string&& value) {
  target_type_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.NProbeTask.target_type)
}
inline void NProbeTask::set_target_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  target_type_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.NProbeTask.target_type)
}
inline void NProbeTask::set_target_type(const char* value, size_t size) {
  target_type_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.NProbeTask.target_type)
}
inline std::string* NProbeTask::_internal_mutable_target_type() {
  return target_type_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* NProbeTask::release_target_type() {
  // @@protoc_insertion_point(field_release:magma.mconfig.NProbeTask.target_type)
  return target_type_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NProbeTask::set_allocated_target_type(std::string* target_type) {
  if (target_type != nullptr) {
  } else {
  }
  target_type_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target_type, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.NProbeTask.target_type)
}

// string delivery_type = 4;
inline void NProbeTask::clear_delivery_type() {
  delivery_type_.ClearToEmpty();
}
inline const std::string& NProbeTask::delivery_type() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.NProbeTask.delivery_type)
  return _internal_delivery_type();
}
inline void NProbeTask::set_delivery_type(const std::string& value) {
  _internal_set_delivery_type(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.NProbeTask.delivery_type)
}
inline std::string* NProbeTask::mutable_delivery_type() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.NProbeTask.delivery_type)
  return _internal_mutable_delivery_type();
}
inline const std::string& NProbeTask::_internal_delivery_type() const {
  return delivery_type_.Get();
}
inline void NProbeTask::_internal_set_delivery_type(const std::string& value) {
  delivery_type_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void NProbeTask::set_delivery_type(std::string&& value) {
  delivery_type_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.NProbeTask.delivery_type)
}
inline void NProbeTask::set_delivery_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  delivery_type_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.NProbeTask.delivery_type)
}
inline void NProbeTask::set_delivery_type(const char* value, size_t size) {
  delivery_type_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.NProbeTask.delivery_type)
}
inline std::string* NProbeTask::_internal_mutable_delivery_type() {
  return delivery_type_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* NProbeTask::release_delivery_type() {
  // @@protoc_insertion_point(field_release:magma.mconfig.NProbeTask.delivery_type)
  return delivery_type_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NProbeTask::set_allocated_delivery_type(
    std::string* delivery_type) {
  if (delivery_type != nullptr) {
  } else {
  }
  delivery_type_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      delivery_type, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.NProbeTask.delivery_type)
}

// uint64 correlation_id = 5;
inline void NProbeTask::clear_correlation_id() {
  correlation_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NProbeTask::_internal_correlation_id()
    const {
  return correlation_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NProbeTask::correlation_id() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.NProbeTask.correlation_id)
  return _internal_correlation_id();
}
inline void NProbeTask::_internal_set_correlation_id(
    ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  correlation_id_ = value;
}
inline void NProbeTask::set_correlation_id(
    ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_correlation_id(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.NProbeTask.correlation_id)
}

// string domain_id = 6;
inline void NProbeTask::clear_domain_id() {
  domain_id_.ClearToEmpty();
}
inline const std::string& NProbeTask::domain_id() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.NProbeTask.domain_id)
  return _internal_domain_id();
}
inline void NProbeTask::set_domain_id(const std::string& value) {
  _internal_set_domain_id(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.NProbeTask.domain_id)
}
inline std::string* NProbeTask::mutable_domain_id() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.NProbeTask.domain_id)
  return _internal_mutable_domain_id();
}
inline const std::string& NProbeTask::_internal_domain_id() const {
  return domain_id_.Get();
}
inline void NProbeTask::_internal_set_domain_id(const std::string& value) {
  domain_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void NProbeTask::set_domain_id(std::string&& value) {
  domain_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.NProbeTask.domain_id)
}
inline void NProbeTask::set_domain_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  domain_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.NProbeTask.domain_id)
}
inline void NProbeTask::set_domain_id(const char* value, size_t size) {
  domain_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.NProbeTask.domain_id)
}
inline std::string* NProbeTask::_internal_mutable_domain_id() {
  return domain_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* NProbeTask::release_domain_id() {
  // @@protoc_insertion_point(field_release:magma.mconfig.NProbeTask.domain_id)
  return domain_id_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NProbeTask::set_allocated_domain_id(std::string* domain_id) {
  if (domain_id != nullptr) {
  } else {
  }
  domain_id_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      domain_id, GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.NProbeTask.domain_id)
}

// -------------------------------------------------------------------

// DnsD

// .magma.orc8r.LogLevel log_level = 1;
inline void DnsD::clear_log_level() {
  log_level_ = 0;
}
inline ::magma::orc8r::LogLevel DnsD::_internal_log_level() const {
  return static_cast<::magma::orc8r::LogLevel>(log_level_);
}
inline ::magma::orc8r::LogLevel DnsD::log_level() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.DnsD.log_level)
  return _internal_log_level();
}
inline void DnsD::_internal_set_log_level(::magma::orc8r::LogLevel value) {
  log_level_ = value;
}
inline void DnsD::set_log_level(::magma::orc8r::LogLevel value) {
  _internal_set_log_level(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.DnsD.log_level)
}

// bool enable_caching = 2;
inline void DnsD::clear_enable_caching() {
  enable_caching_ = false;
}
inline bool DnsD::_internal_enable_caching() const {
  return enable_caching_;
}
inline bool DnsD::enable_caching() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.DnsD.enable_caching)
  return _internal_enable_caching();
}
inline void DnsD::_internal_set_enable_caching(bool value) {
  enable_caching_ = value;
}
inline void DnsD::set_enable_caching(bool value) {
  _internal_set_enable_caching(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.DnsD.enable_caching)
}

// int32 localTTL = 3;
inline void DnsD::clear_localttl() {
  localttl_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DnsD::_internal_localttl() const {
  return localttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DnsD::localttl() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.DnsD.localTTL)
  return _internal_localttl();
}
inline void DnsD::_internal_set_localttl(::PROTOBUF_NAMESPACE_ID::int32 value) {
  localttl_ = value;
}
inline void DnsD::set_localttl(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_localttl(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.DnsD.localTTL)
}

// repeated .magma.mconfig.GatewayDNSConfigRecordsItems records = 4;
inline int DnsD::_internal_records_size() const {
  return records_.size();
}
inline int DnsD::records_size() const {
  return _internal_records_size();
}
inline void DnsD::clear_records() {
  records_.Clear();
}
inline ::magma::mconfig::GatewayDNSConfigRecordsItems* DnsD::mutable_records(
    int index) {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.DnsD.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::magma::mconfig::GatewayDNSConfigRecordsItems>*
DnsD::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:magma.mconfig.DnsD.records)
  return &records_;
}
inline const ::magma::mconfig::GatewayDNSConfigRecordsItems&
DnsD::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::magma::mconfig::GatewayDNSConfigRecordsItems& DnsD::records(
    int index) const {
  // @@protoc_insertion_point(field_get:magma.mconfig.DnsD.records)
  return _internal_records(index);
}
inline ::magma::mconfig::GatewayDNSConfigRecordsItems*
DnsD::_internal_add_records() {
  return records_.Add();
}
inline ::magma::mconfig::GatewayDNSConfigRecordsItems* DnsD::add_records() {
  // @@protoc_insertion_point(field_add:magma.mconfig.DnsD.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::magma::mconfig::GatewayDNSConfigRecordsItems>&
DnsD::records() const {
  // @@protoc_insertion_point(field_list:magma.mconfig.DnsD.records)
  return records_;
}

// bool dhcp_server_enabled = 5;
inline void DnsD::clear_dhcp_server_enabled() {
  dhcp_server_enabled_ = false;
}
inline bool DnsD::_internal_dhcp_server_enabled() const {
  return dhcp_server_enabled_;
}
inline bool DnsD::dhcp_server_enabled() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.DnsD.dhcp_server_enabled)
  return _internal_dhcp_server_enabled();
}
inline void DnsD::_internal_set_dhcp_server_enabled(bool value) {
  dhcp_server_enabled_ = value;
}
inline void DnsD::set_dhcp_server_enabled(bool value) {
  _internal_set_dhcp_server_enabled(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.DnsD.dhcp_server_enabled)
}

// -------------------------------------------------------------------

// GatewayDNSConfigRecordsItems

// repeated string a_record = 1;
inline int GatewayDNSConfigRecordsItems::_internal_a_record_size() const {
  return a_record_.size();
}
inline int GatewayDNSConfigRecordsItems::a_record_size() const {
  return _internal_a_record_size();
}
inline void GatewayDNSConfigRecordsItems::clear_a_record() {
  a_record_.Clear();
}
inline std::string* GatewayDNSConfigRecordsItems::add_a_record() {
  // @@protoc_insertion_point(field_add_mutable:magma.mconfig.GatewayDNSConfigRecordsItems.a_record)
  return _internal_add_a_record();
}
inline const std::string& GatewayDNSConfigRecordsItems::_internal_a_record(
    int index) const {
  return a_record_.Get(index);
}
inline const std::string& GatewayDNSConfigRecordsItems::a_record(
    int index) const {
  // @@protoc_insertion_point(field_get:magma.mconfig.GatewayDNSConfigRecordsItems.a_record)
  return _internal_a_record(index);
}
inline std::string* GatewayDNSConfigRecordsItems::mutable_a_record(int index) {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.GatewayDNSConfigRecordsItems.a_record)
  return a_record_.Mutable(index);
}
inline void GatewayDNSConfigRecordsItems::set_a_record(
    int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:magma.mconfig.GatewayDNSConfigRecordsItems.a_record)
  a_record_.Mutable(index)->assign(value);
}
inline void GatewayDNSConfigRecordsItems::set_a_record(
    int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:magma.mconfig.GatewayDNSConfigRecordsItems.a_record)
  a_record_.Mutable(index)->assign(std::move(value));
}
inline void GatewayDNSConfigRecordsItems::set_a_record(
    int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  a_record_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:magma.mconfig.GatewayDNSConfigRecordsItems.a_record)
}
inline void GatewayDNSConfigRecordsItems::set_a_record(
    int index, const char* value, size_t size) {
  a_record_.Mutable(index)->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.GatewayDNSConfigRecordsItems.a_record)
}
inline std::string* GatewayDNSConfigRecordsItems::_internal_add_a_record() {
  return a_record_.Add();
}
inline void GatewayDNSConfigRecordsItems::add_a_record(
    const std::string& value) {
  a_record_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:magma.mconfig.GatewayDNSConfigRecordsItems.a_record)
}
inline void GatewayDNSConfigRecordsItems::add_a_record(std::string&& value) {
  a_record_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:magma.mconfig.GatewayDNSConfigRecordsItems.a_record)
}
inline void GatewayDNSConfigRecordsItems::add_a_record(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  a_record_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:magma.mconfig.GatewayDNSConfigRecordsItems.a_record)
}
inline void GatewayDNSConfigRecordsItems::add_a_record(
    const char* value, size_t size) {
  a_record_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:magma.mconfig.GatewayDNSConfigRecordsItems.a_record)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GatewayDNSConfigRecordsItems::a_record() const {
  // @@protoc_insertion_point(field_list:magma.mconfig.GatewayDNSConfigRecordsItems.a_record)
  return a_record_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GatewayDNSConfigRecordsItems::mutable_a_record() {
  // @@protoc_insertion_point(field_mutable_list:magma.mconfig.GatewayDNSConfigRecordsItems.a_record)
  return &a_record_;
}

// repeated string aaaa_record = 2;
inline int GatewayDNSConfigRecordsItems::_internal_aaaa_record_size() const {
  return aaaa_record_.size();
}
inline int GatewayDNSConfigRecordsItems::aaaa_record_size() const {
  return _internal_aaaa_record_size();
}
inline void GatewayDNSConfigRecordsItems::clear_aaaa_record() {
  aaaa_record_.Clear();
}
inline std::string* GatewayDNSConfigRecordsItems::add_aaaa_record() {
  // @@protoc_insertion_point(field_add_mutable:magma.mconfig.GatewayDNSConfigRecordsItems.aaaa_record)
  return _internal_add_aaaa_record();
}
inline const std::string& GatewayDNSConfigRecordsItems::_internal_aaaa_record(
    int index) const {
  return aaaa_record_.Get(index);
}
inline const std::string& GatewayDNSConfigRecordsItems::aaaa_record(
    int index) const {
  // @@protoc_insertion_point(field_get:magma.mconfig.GatewayDNSConfigRecordsItems.aaaa_record)
  return _internal_aaaa_record(index);
}
inline std::string* GatewayDNSConfigRecordsItems::mutable_aaaa_record(
    int index) {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.GatewayDNSConfigRecordsItems.aaaa_record)
  return aaaa_record_.Mutable(index);
}
inline void GatewayDNSConfigRecordsItems::set_aaaa_record(
    int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:magma.mconfig.GatewayDNSConfigRecordsItems.aaaa_record)
  aaaa_record_.Mutable(index)->assign(value);
}
inline void GatewayDNSConfigRecordsItems::set_aaaa_record(
    int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:magma.mconfig.GatewayDNSConfigRecordsItems.aaaa_record)
  aaaa_record_.Mutable(index)->assign(std::move(value));
}
inline void GatewayDNSConfigRecordsItems::set_aaaa_record(
    int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aaaa_record_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:magma.mconfig.GatewayDNSConfigRecordsItems.aaaa_record)
}
inline void GatewayDNSConfigRecordsItems::set_aaaa_record(
    int index, const char* value, size_t size) {
  aaaa_record_.Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.GatewayDNSConfigRecordsItems.aaaa_record)
}
inline std::string* GatewayDNSConfigRecordsItems::_internal_add_aaaa_record() {
  return aaaa_record_.Add();
}
inline void GatewayDNSConfigRecordsItems::add_aaaa_record(
    const std::string& value) {
  aaaa_record_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:magma.mconfig.GatewayDNSConfigRecordsItems.aaaa_record)
}
inline void GatewayDNSConfigRecordsItems::add_aaaa_record(std::string&& value) {
  aaaa_record_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:magma.mconfig.GatewayDNSConfigRecordsItems.aaaa_record)
}
inline void GatewayDNSConfigRecordsItems::add_aaaa_record(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aaaa_record_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:magma.mconfig.GatewayDNSConfigRecordsItems.aaaa_record)
}
inline void GatewayDNSConfigRecordsItems::add_aaaa_record(
    const char* value, size_t size) {
  aaaa_record_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:magma.mconfig.GatewayDNSConfigRecordsItems.aaaa_record)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GatewayDNSConfigRecordsItems::aaaa_record() const {
  // @@protoc_insertion_point(field_list:magma.mconfig.GatewayDNSConfigRecordsItems.aaaa_record)
  return aaaa_record_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GatewayDNSConfigRecordsItems::mutable_aaaa_record() {
  // @@protoc_insertion_point(field_mutable_list:magma.mconfig.GatewayDNSConfigRecordsItems.aaaa_record)
  return &aaaa_record_;
}

// repeated string cname_record = 3;
inline int GatewayDNSConfigRecordsItems::_internal_cname_record_size() const {
  return cname_record_.size();
}
inline int GatewayDNSConfigRecordsItems::cname_record_size() const {
  return _internal_cname_record_size();
}
inline void GatewayDNSConfigRecordsItems::clear_cname_record() {
  cname_record_.Clear();
}
inline std::string* GatewayDNSConfigRecordsItems::add_cname_record() {
  // @@protoc_insertion_point(field_add_mutable:magma.mconfig.GatewayDNSConfigRecordsItems.cname_record)
  return _internal_add_cname_record();
}
inline const std::string& GatewayDNSConfigRecordsItems::_internal_cname_record(
    int index) const {
  return cname_record_.Get(index);
}
inline const std::string& GatewayDNSConfigRecordsItems::cname_record(
    int index) const {
  // @@protoc_insertion_point(field_get:magma.mconfig.GatewayDNSConfigRecordsItems.cname_record)
  return _internal_cname_record(index);
}
inline std::string* GatewayDNSConfigRecordsItems::mutable_cname_record(
    int index) {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.GatewayDNSConfigRecordsItems.cname_record)
  return cname_record_.Mutable(index);
}
inline void GatewayDNSConfigRecordsItems::set_cname_record(
    int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:magma.mconfig.GatewayDNSConfigRecordsItems.cname_record)
  cname_record_.Mutable(index)->assign(value);
}
inline void GatewayDNSConfigRecordsItems::set_cname_record(
    int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:magma.mconfig.GatewayDNSConfigRecordsItems.cname_record)
  cname_record_.Mutable(index)->assign(std::move(value));
}
inline void GatewayDNSConfigRecordsItems::set_cname_record(
    int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cname_record_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:magma.mconfig.GatewayDNSConfigRecordsItems.cname_record)
}
inline void GatewayDNSConfigRecordsItems::set_cname_record(
    int index, const char* value, size_t size) {
  cname_record_.Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.GatewayDNSConfigRecordsItems.cname_record)
}
inline std::string* GatewayDNSConfigRecordsItems::_internal_add_cname_record() {
  return cname_record_.Add();
}
inline void GatewayDNSConfigRecordsItems::add_cname_record(
    const std::string& value) {
  cname_record_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:magma.mconfig.GatewayDNSConfigRecordsItems.cname_record)
}
inline void GatewayDNSConfigRecordsItems::add_cname_record(
    std::string&& value) {
  cname_record_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:magma.mconfig.GatewayDNSConfigRecordsItems.cname_record)
}
inline void GatewayDNSConfigRecordsItems::add_cname_record(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cname_record_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:magma.mconfig.GatewayDNSConfigRecordsItems.cname_record)
}
inline void GatewayDNSConfigRecordsItems::add_cname_record(
    const char* value, size_t size) {
  cname_record_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:magma.mconfig.GatewayDNSConfigRecordsItems.cname_record)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GatewayDNSConfigRecordsItems::cname_record() const {
  // @@protoc_insertion_point(field_list:magma.mconfig.GatewayDNSConfigRecordsItems.cname_record)
  return cname_record_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GatewayDNSConfigRecordsItems::mutable_cname_record() {
  // @@protoc_insertion_point(field_mutable_list:magma.mconfig.GatewayDNSConfigRecordsItems.cname_record)
  return &cname_record_;
}

// string domain = 4;
inline void GatewayDNSConfigRecordsItems::clear_domain() {
  domain_.ClearToEmpty();
}
inline const std::string& GatewayDNSConfigRecordsItems::domain() const {
  // @@protoc_insertion_point(field_get:magma.mconfig.GatewayDNSConfigRecordsItems.domain)
  return _internal_domain();
}
inline void GatewayDNSConfigRecordsItems::set_domain(const std::string& value) {
  _internal_set_domain(value);
  // @@protoc_insertion_point(field_set:magma.mconfig.GatewayDNSConfigRecordsItems.domain)
}
inline std::string* GatewayDNSConfigRecordsItems::mutable_domain() {
  // @@protoc_insertion_point(field_mutable:magma.mconfig.GatewayDNSConfigRecordsItems.domain)
  return _internal_mutable_domain();
}
inline const std::string& GatewayDNSConfigRecordsItems::_internal_domain()
    const {
  return domain_.Get();
}
inline void GatewayDNSConfigRecordsItems::_internal_set_domain(
    const std::string& value) {
  domain_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
      GetArena());
}
inline void GatewayDNSConfigRecordsItems::set_domain(std::string&& value) {
  domain_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:magma.mconfig.GatewayDNSConfigRecordsItems.domain)
}
inline void GatewayDNSConfigRecordsItems::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  domain_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:magma.mconfig.GatewayDNSConfigRecordsItems.domain)
}
inline void GatewayDNSConfigRecordsItems::set_domain(
    const char* value, size_t size) {
  domain_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:magma.mconfig.GatewayDNSConfigRecordsItems.domain)
}
inline std::string* GatewayDNSConfigRecordsItems::_internal_mutable_domain() {
  return domain_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      GetArena());
}
inline std::string* GatewayDNSConfigRecordsItems::release_domain() {
  // @@protoc_insertion_point(field_release:magma.mconfig.GatewayDNSConfigRecordsItems.domain)
  return domain_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GatewayDNSConfigRecordsItems::set_allocated_domain(
    std::string* domain) {
  if (domain != nullptr) {
  } else {
  }
  domain_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:magma.mconfig.GatewayDNSConfigRecordsItems.domain)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

}  // namespace mconfig
}  // namespace magma

PROTOBUF_NAMESPACE_OPEN

template<>
struct is_proto_enum<::magma::mconfig::EnodebD_CSFBRat> : ::std::true_type {};
template<>
inline const EnumDescriptor*
GetEnumDescriptor<::magma::mconfig::EnodebD_CSFBRat>() {
  return ::magma::mconfig::EnodebD_CSFBRat_descriptor();
}
template<>
struct is_proto_enum<::magma::mconfig::PipelineD_HEConfig_EncryptionAlgorithm>
    : ::std::true_type {};
template<>
inline const EnumDescriptor*
GetEnumDescriptor<::magma::mconfig::PipelineD_HEConfig_EncryptionAlgorithm>() {
  return ::magma::mconfig::PipelineD_HEConfig_EncryptionAlgorithm_descriptor();
}
template<>
struct is_proto_enum<::magma::mconfig::PipelineD_HEConfig_HashFunction>
    : ::std::true_type {};
template<>
inline const EnumDescriptor*
GetEnumDescriptor<::magma::mconfig::PipelineD_HEConfig_HashFunction>() {
  return ::magma::mconfig::PipelineD_HEConfig_HashFunction_descriptor();
}
template<>
struct is_proto_enum<::magma::mconfig::PipelineD_HEConfig_EncodingType>
    : ::std::true_type {};
template<>
inline const EnumDescriptor*
GetEnumDescriptor<::magma::mconfig::PipelineD_HEConfig_EncodingType>() {
  return ::magma::mconfig::PipelineD_HEConfig_EncodingType_descriptor();
}
template<>
struct is_proto_enum<::magma::mconfig::PipelineD_NetworkServices>
    : ::std::true_type {};
template<>
inline const EnumDescriptor*
GetEnumDescriptor<::magma::mconfig::PipelineD_NetworkServices>() {
  return ::magma::mconfig::PipelineD_NetworkServices_descriptor();
}
template<>
struct is_proto_enum<::magma::mconfig::WalletExhaustDetection_Method>
    : ::std::true_type {};
template<>
inline const EnumDescriptor*
GetEnumDescriptor<::magma::mconfig::WalletExhaustDetection_Method>() {
  return ::magma::mconfig::WalletExhaustDetection_Method_descriptor();
}
template<>
struct is_proto_enum<::magma::mconfig::MobilityD_IpAllocatorType>
    : ::std::true_type {};
template<>
inline const EnumDescriptor*
GetEnumDescriptor<::magma::mconfig::MobilityD_IpAllocatorType>() {
  return ::magma::mconfig::MobilityD_IpAllocatorType_descriptor();
}
template<>
struct is_proto_enum<::magma::mconfig::MME_NonEPSServiceControl>
    : ::std::true_type {};
template<>
inline const EnumDescriptor*
GetEnumDescriptor<::magma::mconfig::MME_NonEPSServiceControl>() {
  return ::magma::mconfig::MME_NonEPSServiceControl_descriptor();
}
template<>
struct is_proto_enum<::magma::mconfig::ModeMapItem_FederatedMode>
    : ::std::true_type {};
template<>
inline const EnumDescriptor*
GetEnumDescriptor<::magma::mconfig::ModeMapItem_FederatedMode>() {
  return ::magma::mconfig::ModeMapItem_FederatedMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lte_2fprotos_2fmconfig_2fmconfigs_2eproto
